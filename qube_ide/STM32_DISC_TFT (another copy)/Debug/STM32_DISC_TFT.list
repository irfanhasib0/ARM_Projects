
STM32_DISC_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a198  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af8  0800a348  0800a348  0001a348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be40  0800be40  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800be40  0800be40  0001be40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be48  0800be48  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be48  0800be48  0001be48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be4c  0800be4c  0001be4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800be50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          00000910  20000058  20000058  00020058  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000968  20000968  00020058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000310d1  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a6d  00000000  00000000  00051159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002440  00000000  00000000  00056bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002240  00000000  00000000  00059008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029299  00000000  00000000  0005b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029908  00000000  00000000  000844e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6585  00000000  00000000  000adde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a436e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009afc  00000000  00000000  001a43c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000058 	.word	0x20000058
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a330 	.word	0x0800a330

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	0800a330 	.word	0x0800a330

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000502:	f000 fea3 	bl	800124c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000506:	20ca      	movs	r0, #202	; 0xca
 8000508:	f000 f95d 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800050c:	20c3      	movs	r0, #195	; 0xc3
 800050e:	f000 f967 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000512:	2008      	movs	r0, #8
 8000514:	f000 f964 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000518:	2050      	movs	r0, #80	; 0x50
 800051a:	f000 f961 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800051e:	20cf      	movs	r0, #207	; 0xcf
 8000520:	f000 f951 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f95b 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800052a:	20c1      	movs	r0, #193	; 0xc1
 800052c:	f000 f958 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000530:	2030      	movs	r0, #48	; 0x30
 8000532:	f000 f955 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000536:	20ed      	movs	r0, #237	; 0xed
 8000538:	f000 f945 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 f94f 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000542:	2003      	movs	r0, #3
 8000544:	f000 f94c 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000548:	2012      	movs	r0, #18
 800054a:	f000 f949 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800054e:	2081      	movs	r0, #129	; 0x81
 8000550:	f000 f946 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000554:	20e8      	movs	r0, #232	; 0xe8
 8000556:	f000 f936 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800055a:	2085      	movs	r0, #133	; 0x85
 800055c:	f000 f940 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f93d 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000566:	2078      	movs	r0, #120	; 0x78
 8000568:	f000 f93a 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800056c:	20cb      	movs	r0, #203	; 0xcb
 800056e:	f000 f92a 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000572:	2039      	movs	r0, #57	; 0x39
 8000574:	f000 f934 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000578:	202c      	movs	r0, #44	; 0x2c
 800057a:	f000 f931 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 f92e 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000584:	2034      	movs	r0, #52	; 0x34
 8000586:	f000 f92b 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800058a:	2002      	movs	r0, #2
 800058c:	f000 f928 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000590:	20f7      	movs	r0, #247	; 0xf7
 8000592:	f000 f918 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000596:	2020      	movs	r0, #32
 8000598:	f000 f922 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800059c:	20ea      	movs	r0, #234	; 0xea
 800059e:	f000 f912 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f91c 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 f919 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80005ae:	20b1      	movs	r0, #177	; 0xb1
 80005b0:	f000 f909 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 f913 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80005ba:	201b      	movs	r0, #27
 80005bc:	f000 f910 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80005c0:	20b6      	movs	r0, #182	; 0xb6
 80005c2:	f000 f900 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80005c6:	200a      	movs	r0, #10
 80005c8:	f000 f90a 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80005cc:	20a2      	movs	r0, #162	; 0xa2
 80005ce:	f000 f907 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80005d2:	20c0      	movs	r0, #192	; 0xc0
 80005d4:	f000 f8f7 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005d8:	2010      	movs	r0, #16
 80005da:	f000 f901 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80005de:	20c1      	movs	r0, #193	; 0xc1
 80005e0:	f000 f8f1 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005e4:	2010      	movs	r0, #16
 80005e6:	f000 f8fb 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80005ea:	20c5      	movs	r0, #197	; 0xc5
 80005ec:	f000 f8eb 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80005f0:	2045      	movs	r0, #69	; 0x45
 80005f2:	f000 f8f5 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80005f6:	2015      	movs	r0, #21
 80005f8:	f000 f8f2 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80005fc:	20c7      	movs	r0, #199	; 0xc7
 80005fe:	f000 f8e2 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000602:	2090      	movs	r0, #144	; 0x90
 8000604:	f000 f8ec 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000608:	2036      	movs	r0, #54	; 0x36
 800060a:	f000 f8dc 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800060e:	20c8      	movs	r0, #200	; 0xc8
 8000610:	f000 f8e6 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000614:	20f2      	movs	r0, #242	; 0xf2
 8000616:	f000 f8d6 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f8e0 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000620:	20b0      	movs	r0, #176	; 0xb0
 8000622:	f000 f8d0 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000626:	20c2      	movs	r0, #194	; 0xc2
 8000628:	f000 f8da 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800062c:	20b6      	movs	r0, #182	; 0xb6
 800062e:	f000 f8ca 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000632:	200a      	movs	r0, #10
 8000634:	f000 f8d4 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000638:	20a7      	movs	r0, #167	; 0xa7
 800063a:	f000 f8d1 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800063e:	2027      	movs	r0, #39	; 0x27
 8000640:	f000 f8ce 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000644:	2004      	movs	r0, #4
 8000646:	f000 f8cb 	bl	80007e0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800064a:	202a      	movs	r0, #42	; 0x2a
 800064c:	f000 f8bb 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000650:	2000      	movs	r0, #0
 8000652:	f000 f8c5 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f8c2 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f8bf 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000662:	20ef      	movs	r0, #239	; 0xef
 8000664:	f000 f8bc 	bl	80007e0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000668:	202b      	movs	r0, #43	; 0x2b
 800066a:	f000 f8ac 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f8b6 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f8b3 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f8b0 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000680:	203f      	movs	r0, #63	; 0x3f
 8000682:	f000 f8ad 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000686:	20f6      	movs	r0, #246	; 0xf6
 8000688:	f000 f89d 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f8a7 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f8a4 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000698:	2006      	movs	r0, #6
 800069a:	f000 f8a1 	bl	80007e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800069e:	202c      	movs	r0, #44	; 0x2c
 80006a0:	f000 f891 	bl	80007c6 <ili9341_WriteReg>
  LCD_Delay(200);
 80006a4:	20c8      	movs	r0, #200	; 0xc8
 80006a6:	f000 febf 	bl	8001428 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80006aa:	2026      	movs	r0, #38	; 0x26
 80006ac:	f000 f88b 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 f895 	bl	80007e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80006b6:	20e0      	movs	r0, #224	; 0xe0
 80006b8:	f000 f885 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80006bc:	200f      	movs	r0, #15
 80006be:	f000 f88f 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80006c2:	2029      	movs	r0, #41	; 0x29
 80006c4:	f000 f88c 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80006c8:	2024      	movs	r0, #36	; 0x24
 80006ca:	f000 f889 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80006ce:	200c      	movs	r0, #12
 80006d0:	f000 f886 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80006d4:	200e      	movs	r0, #14
 80006d6:	f000 f883 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006da:	2009      	movs	r0, #9
 80006dc:	f000 f880 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80006e0:	204e      	movs	r0, #78	; 0x4e
 80006e2:	f000 f87d 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80006e6:	2078      	movs	r0, #120	; 0x78
 80006e8:	f000 f87a 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80006ec:	203c      	movs	r0, #60	; 0x3c
 80006ee:	f000 f877 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006f2:	2009      	movs	r0, #9
 80006f4:	f000 f874 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80006f8:	2013      	movs	r0, #19
 80006fa:	f000 f871 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80006fe:	2005      	movs	r0, #5
 8000700:	f000 f86e 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000704:	2017      	movs	r0, #23
 8000706:	f000 f86b 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800070a:	2011      	movs	r0, #17
 800070c:	f000 f868 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f000 f865 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000716:	20e1      	movs	r0, #225	; 0xe1
 8000718:	f000 f855 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f85f 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000722:	2016      	movs	r0, #22
 8000724:	f000 f85c 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000728:	201b      	movs	r0, #27
 800072a:	f000 f859 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800072e:	2004      	movs	r0, #4
 8000730:	f000 f856 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000734:	2011      	movs	r0, #17
 8000736:	f000 f853 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800073a:	2007      	movs	r0, #7
 800073c:	f000 f850 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000740:	2031      	movs	r0, #49	; 0x31
 8000742:	f000 f84d 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000746:	2033      	movs	r0, #51	; 0x33
 8000748:	f000 f84a 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800074c:	2042      	movs	r0, #66	; 0x42
 800074e:	f000 f847 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000752:	2005      	movs	r0, #5
 8000754:	f000 f844 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000758:	200c      	movs	r0, #12
 800075a:	f000 f841 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800075e:	200a      	movs	r0, #10
 8000760:	f000 f83e 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000764:	2028      	movs	r0, #40	; 0x28
 8000766:	f000 f83b 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800076a:	202f      	movs	r0, #47	; 0x2f
 800076c:	f000 f838 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000770:	200f      	movs	r0, #15
 8000772:	f000 f835 	bl	80007e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000776:	2011      	movs	r0, #17
 8000778:	f000 f825 	bl	80007c6 <ili9341_WriteReg>
  LCD_Delay(200);
 800077c:	20c8      	movs	r0, #200	; 0xc8
 800077e:	f000 fe53 	bl	8001428 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000782:	2029      	movs	r0, #41	; 0x29
 8000784:	f000 f81f 	bl	80007c6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000788:	202c      	movs	r0, #44	; 0x2c
 800078a:	f000 f81c 	bl	80007c6 <ili9341_WriteReg>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}

08000792 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000796:	f000 fd59 	bl	800124c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800079a:	2103      	movs	r1, #3
 800079c:	20d3      	movs	r0, #211	; 0xd3
 800079e:	f000 f82c 	bl	80007fa <ili9341_ReadData>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29b      	uxth	r3, r3
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}

080007aa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007ae:	2029      	movs	r0, #41	; 0x29
 80007b0:	f000 f809 	bl	80007c6 <ili9341_WriteReg>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80007bc:	2028      	movs	r0, #40	; 0x28
 80007be:	f000 f802 	bl	80007c6 <ili9341_WriteReg>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fdd4 	bl	8001380 <LCD_IO_WriteReg>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fda5 	bl	800133c <LCD_IO_WriteData>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	460a      	mov	r2, r1
 8000804:	80fb      	strh	r3, [r7, #6]
 8000806:	4613      	mov	r3, r2
 8000808:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800080a:	797a      	ldrb	r2, [r7, #5]
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fdd7 	bl	80013c4 <LCD_IO_ReadData>
 8000816:	4603      	mov	r3, r0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000824:	23f0      	movs	r3, #240	; 0xf0
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000834:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b087      	sub	sp, #28
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f002 fa77 	bl	8002d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f8a7 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 fb15 	bl	8000e80 <MX_GPIO_Init>
  MX_CRC_Init();
 8000856:	f000 f90d 	bl	8000a74 <MX_CRC_Init>
  MX_DMA2D_Init();
 800085a:	f000 f91f 	bl	8000a9c <MX_DMA2D_Init>
  MX_FMC_Init();
 800085e:	f000 fabf 	bl	8000de0 <MX_FMC_Init>
  MX_I2C3_Init();
 8000862:	f000 f94d 	bl	8000b00 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000866:	f000 f98b 	bl	8000b80 <MX_LTDC_Init>
  MX_SPI5_Init();
 800086a:	f000 fa09 	bl	8000c80 <MX_SPI5_Init>
  MX_TIM1_Init();
 800086e:	f000 fa3d 	bl	8000cec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000872:	f000 fa8b 	bl	8000d8c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   #include "stm32f429i_discovery_lcd.h"
   #include "string.h"
    //__HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
    BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 8000876:	f001 fc47 	bl	8002108 <BSP_SDRAM_Init>
    BSP_LCD_Init();
 800087a:	f000 fde1 	bl	8001440 <BSP_LCD_Init>
    //BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
    BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 800087e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fe5e 	bl	8001544 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 febf 	bl	800160c <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 800088e:	f001 fa3d 	bl	8001d0c <BSP_LCD_DisplayOn>

    HAL_Delay(500);
 8000892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000896:	f002 fa93 	bl	8002dc0 <HAL_Delay>
    char pData[15];
    memset(pData,0,15);
 800089a:	463b      	mov	r3, r7
 800089c:	220f      	movs	r2, #15
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f009 fd3d 	bl	800a320 <memset>
    strcpy(pData,(char*)" Hello from ");
 80008a6:	463b      	mov	r3, r7
 80008a8:	4a39      	ldr	r2, [pc, #228]	; (8000990 <main+0x14c>)
 80008aa:	461c      	mov	r4, r3
 80008ac:	4613      	mov	r3, r2
 80008ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b0:	c407      	stmia	r4!, {r0, r1, r2}
 80008b2:	7023      	strb	r3, [r4, #0]
    int cx =100, count = 0;
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    while (1)
    {
    if(count%2==0)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d12c      	bne.n	8000920 <main+0xdc>
    {
		//HAL_UART_Receive(&huart1, (uint8_t*)pData,10,1000);
		BSP_LCD_Clear(LCD_COLOR_BLUE);
 80008c6:	4833      	ldr	r0, [pc, #204]	; (8000994 <main+0x150>)
 80008c8:	f000 fef8 	bl	80016bc <BSP_LCD_Clear>
		BSP_LCD_ClearStringLine(1);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 ff1d 	bl	800170c <BSP_LCD_ClearStringLine>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80008d2:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80008d6:	f000 fea9 	bl	800162c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(1,(uint8_t*)pData);
 80008da:	463b      	mov	r3, r7
 80008dc:	4619      	mov	r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	f001 f87a 	bl	80019d8 <BSP_LCD_DisplayStringAtLine>
		//BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"   Irfan!!  ");
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80008e4:	482c      	ldr	r0, [pc, #176]	; (8000998 <main+0x154>)
 80008e6:	f000 fea1 	bl	800162c <BSP_LCD_SetTextColor>
		BSP_LCD_DrawCircle(cx, 140, 25);
 80008ea:	693b      	ldr	r3, [r7, #16]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	2219      	movs	r2, #25
 80008f0:	218c      	movs	r1, #140	; 0x8c
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f8c6 	bl	8001a84 <BSP_LCD_DrawCircle>
		BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80008f8:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80008fc:	f000 fe96 	bl	800162c <BSP_LCD_SetTextColor>
		BSP_LCD_DrawHLine(40, 200 , 120);
 8000900:	2278      	movs	r2, #120	; 0x78
 8000902:	21c8      	movs	r1, #200	; 0xc8
 8000904:	2028      	movs	r0, #40	; 0x28
 8000906:	f001 f87f 	bl	8001a08 <BSP_LCD_DrawHLine>
		BSP_LCD_DrawHLine(40, 220 , 120);
 800090a:	2278      	movs	r2, #120	; 0x78
 800090c:	21dc      	movs	r1, #220	; 0xdc
 800090e:	2028      	movs	r0, #40	; 0x28
 8000910:	f001 f87a 	bl	8001a08 <BSP_LCD_DrawHLine>
		BSP_LCD_DrawHLine(40, 225 , 120);
 8000914:	2278      	movs	r2, #120	; 0x78
 8000916:	21e1      	movs	r1, #225	; 0xe1
 8000918:	2028      	movs	r0, #40	; 0x28
 800091a:	f001 f875 	bl	8001a08 <BSP_LCD_DrawHLine>
 800091e:	e02a      	b.n	8000976 <main+0x132>
		//BSP_LCD_DrawHLine(40, 225 , 120);
		//BSP_LCD_DrawHLine(40, 230 , 120);
    }
    else{
    	//HAL_UART_Receive(&huart1, (uint8_t*)pData,10,1000);
    			BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000920:	481c      	ldr	r0, [pc, #112]	; (8000994 <main+0x150>)
 8000922:	f000 fecb 	bl	80016bc <BSP_LCD_Clear>
    			BSP_LCD_ClearStringLine(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f000 fef0 	bl	800170c <BSP_LCD_ClearStringLine>
    			BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800092c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000930:	f000 fe7c 	bl	800162c <BSP_LCD_SetTextColor>
    			//BSP_LCD_DisplayStringAtLine(1,(uint8_t*)pData);
    			BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"   Irfan!!  ");
 8000934:	4919      	ldr	r1, [pc, #100]	; (800099c <main+0x158>)
 8000936:	2001      	movs	r0, #1
 8000938:	f001 f84e 	bl	80019d8 <BSP_LCD_DisplayStringAtLine>
    			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800093c:	4816      	ldr	r0, [pc, #88]	; (8000998 <main+0x154>)
 800093e:	f000 fe75 	bl	800162c <BSP_LCD_SetTextColor>
    			BSP_LCD_DrawCircle(cx, 140, 25);
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	b29b      	uxth	r3, r3
 8000946:	2219      	movs	r2, #25
 8000948:	218c      	movs	r1, #140	; 0x8c
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f89a 	bl	8001a84 <BSP_LCD_DrawCircle>
    			BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000950:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000954:	f000 fe6a 	bl	800162c <BSP_LCD_SetTextColor>
    			BSP_LCD_DrawHLine(40, 200 , 120);
 8000958:	2278      	movs	r2, #120	; 0x78
 800095a:	21c8      	movs	r1, #200	; 0xc8
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f001 f853 	bl	8001a08 <BSP_LCD_DrawHLine>
    			BSP_LCD_DrawHLine(40, 220 , 120);
 8000962:	2278      	movs	r2, #120	; 0x78
 8000964:	21dc      	movs	r1, #220	; 0xdc
 8000966:	2028      	movs	r0, #40	; 0x28
 8000968:	f001 f84e 	bl	8001a08 <BSP_LCD_DrawHLine>
    			BSP_LCD_DrawHLine(40, 225 , 120);
 800096c:	2278      	movs	r2, #120	; 0x78
 800096e:	21e1      	movs	r1, #225	; 0xe1
 8000970:	2028      	movs	r0, #40	; 0x28
 8000972:	f001 f849 	bl	8001a08 <BSP_LCD_DrawHLine>
    			//BSP_LCD_DrawHLine(40, 225 , 120);

    }
   	HAL_Delay(1000);
 8000976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097a:	f002 fa21 	bl	8002dc0 <HAL_Delay>
   	count +=1;
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
   	if(count == 10)	count =0;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	2b0a      	cmp	r3, #10
 8000988:	d198      	bne.n	80008bc <main+0x78>
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
    if(count%2==0)
 800098e:	e795      	b.n	80008bc <main+0x78>
 8000990:	0800a348 	.word	0x0800a348
 8000994:	ff0000ff 	.word	0xff0000ff
 8000998:	ffff0000 	.word	0xffff0000
 800099c:	0800a358 	.word	0x0800a358

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	; 0x50
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	2230      	movs	r2, #48	; 0x30
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f009 fcb6 	bl	800a320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <SystemClock_Config+0xcc>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <SystemClock_Config+0xcc>)
 80009ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <SystemClock_Config+0xcc>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <SystemClock_Config+0xd0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <SystemClock_Config+0xd0>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <SystemClock_Config+0xd0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a18:	2348      	movs	r3, #72	; 0x48
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a20:	2303      	movs	r3, #3
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 faf9 	bl	8006020 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a34:	f000 fb46 	bl	80010c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	230f      	movs	r3, #15
 8000a3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2102      	movs	r1, #2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f005 fd5b 	bl	8006510 <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a60:	f000 fb30 	bl	80010c4 <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3750      	adds	r7, #80	; 0x50
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40007000 	.word	0x40007000

08000a74 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_CRC_Init+0x20>)
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <MX_CRC_Init+0x24>)
 8000a7c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_CRC_Init+0x20>)
 8000a80:	f002 faa4 	bl	8002fcc <HAL_CRC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a8a:	f000 fb1b 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200003bc 	.word	0x200003bc
 8000a98:	40023000 	.word	0x40023000

08000a9c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <MX_DMA2D_Init+0x60>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000ad2:	f002 fc55 	bl	8003380 <HAL_DMA2D_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000adc:	f000 faf2 	bl	80010c4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_DMA2D_Init+0x5c>)
 8000ae4:	f002 feba 	bl	800385c <HAL_DMA2D_ConfigLayer>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000aee:	f000 fae9 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200004f8 	.word	0x200004f8
 8000afc:	4002b000 	.word	0x4002b000

08000b00 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <MX_I2C3_Init+0x78>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <MX_I2C3_Init+0x7c>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b22:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b3e:	f004 fd1d 	bl	800557c <HAL_I2C_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 fabc 	bl	80010c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b50:	f004 fe58 	bl	8005804 <HAL_I2CEx_ConfigAnalogFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b5a:	f000 fab3 	bl	80010c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_I2C3_Init+0x74>)
 8000b62:	f004 fe8b 	bl	800587c <HAL_I2CEx_ConfigDigitalFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b6c:	f000 faaa 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000310 	.word	0x20000310
 8000b78:	40005c00 	.word	0x40005c00
 8000b7c:	000186a0 	.word	0x000186a0

08000b80 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2234      	movs	r2, #52	; 0x34
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f009 fbc7 	bl	800a320 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b92:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000b94:	4a39      	ldr	r2, [pc, #228]	; (8000c7c <MX_LTDC_Init+0xfc>)
 8000b96:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b9e:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ba4:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000baa:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000bb0:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bb2:	2209      	movs	r2, #9
 8000bb4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bbe:	221d      	movs	r2, #29
 8000bc0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bca:	f240 120d 	movw	r2, #269	; 0x10d
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bd2:	f240 1243 	movw	r2, #323	; 0x143
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bda:	f240 1217 	movw	r2, #279	; 0x117
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000be2:	f240 1247 	movw	r2, #327	; 0x147
 8000be6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c00:	481d      	ldr	r0, [pc, #116]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000c02:	f004 fe7b 	bl	80058fc <HAL_LTDC_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c0c:	f000 fa5a 	bl	80010c4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c14:	23f0      	movs	r3, #240	; 0xf0
 8000c16:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c20:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000c22:	2301      	movs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c26:	23ff      	movs	r3, #255	; 0xff
 8000c28:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c32:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c34:	2307      	movs	r3, #7
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c38:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000c3e:	23f0      	movs	r3, #240	; 0xf0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c42:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_LTDC_Init+0xf8>)
 8000c62:	f004 ffdd 	bl	8005c20 <HAL_LTDC_ConfigLayer>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000c6c:	f000 fa2a 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3738      	adds	r7, #56	; 0x38
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200003c4 	.word	0x200003c4
 8000c7c:	40016800 	.word	0x40016800

08000c80 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000c86:	4a18      	ldr	r2, [pc, #96]	; (8000ce8 <MX_SPI5_Init+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c90:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000cb4:	2218      	movs	r2, #24
 8000cb6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000ccc:	220a      	movs	r2, #10
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_SPI5_Init+0x64>)
 8000cd2:	f006 f888 	bl	8006de6 <HAL_SPI_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000cdc:	f000 f9f2 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000364 	.word	0x20000364
 8000ce8:	40015000 	.word	0x40015000

08000cec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	463b      	mov	r3, r7
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d0a:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <MX_TIM1_Init+0x9c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d36:	f006 fe35 	bl	80079a4 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d40:	f000 f9c0 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d52:	f006 ffef 	bl	8007d34 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d5c:	f000 f9b2 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_TIM1_Init+0x98>)
 8000d6e:	f007 fa0b 	bl	8008188 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d78:	f000 f9a4 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200004b0 	.word	0x200004b0
 8000d88:	40010000 	.word	0x40010000

08000d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART1_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	f007 fa70 	bl	80082a8 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f000 f979 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000046c 	.word	0x2000046c
 8000ddc:	40011000 	.word	0x40011000

08000de0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_FMC_Init+0x98>)
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_FMC_Init+0x9c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e12:	2210      	movs	r2, #16
 8000e14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e18:	2240      	movs	r2, #64	; 0x40
 8000e1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e1e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000e22:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e30:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e44:	2307      	movs	r3, #7
 8000e46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000e50:	2303      	movs	r3, #3
 8000e52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_FMC_Init+0x98>)
 8000e62:	f005 ff41 	bl	8006ce8 <HAL_SDRAM_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000e6c:	f000 f92a 	bl	80010c4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000538 	.word	0x20000538
 8000e7c:	a0000140 	.word	0xa0000140

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08e      	sub	sp, #56	; 0x38
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
 8000e9a:	4b7b      	ldr	r3, [pc, #492]	; (8001088 <MX_GPIO_Init+0x208>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a7a      	ldr	r2, [pc, #488]	; (8001088 <MX_GPIO_Init+0x208>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b78      	ldr	r3, [pc, #480]	; (8001088 <MX_GPIO_Init+0x208>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	623b      	str	r3, [r7, #32]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	4b74      	ldr	r3, [pc, #464]	; (8001088 <MX_GPIO_Init+0x208>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a73      	ldr	r2, [pc, #460]	; (8001088 <MX_GPIO_Init+0x208>)
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b71      	ldr	r3, [pc, #452]	; (8001088 <MX_GPIO_Init+0x208>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	4b6d      	ldr	r3, [pc, #436]	; (8001088 <MX_GPIO_Init+0x208>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a6c      	ldr	r2, [pc, #432]	; (8001088 <MX_GPIO_Init+0x208>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <MX_GPIO_Init+0x208>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	4b66      	ldr	r3, [pc, #408]	; (8001088 <MX_GPIO_Init+0x208>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a65      	ldr	r2, [pc, #404]	; (8001088 <MX_GPIO_Init+0x208>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b63      	ldr	r3, [pc, #396]	; (8001088 <MX_GPIO_Init+0x208>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b5f      	ldr	r3, [pc, #380]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a5e      	ldr	r2, [pc, #376]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b5c      	ldr	r3, [pc, #368]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b58      	ldr	r3, [pc, #352]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a57      	ldr	r2, [pc, #348]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b55      	ldr	r3, [pc, #340]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b51      	ldr	r3, [pc, #324]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a50      	ldr	r2, [pc, #320]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b4e      	ldr	r3, [pc, #312]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a49      	ldr	r2, [pc, #292]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <MX_GPIO_Init+0x208>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2116      	movs	r1, #22
 8000f7a:	4844      	ldr	r0, [pc, #272]	; (800108c <MX_GPIO_Init+0x20c>)
 8000f7c:	f003 f854 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	4842      	ldr	r0, [pc, #264]	; (8001090 <MX_GPIO_Init+0x210>)
 8000f86:	f003 f84f 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f90:	4840      	ldr	r0, [pc, #256]	; (8001094 <MX_GPIO_Init+0x214>)
 8000f92:	f003 f849 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f9c:	483e      	ldr	r0, [pc, #248]	; (8001098 <MX_GPIO_Init+0x218>)
 8000f9e:	f003 f843 	bl	8004028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000fa2:	2316      	movs	r3, #22
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4834      	ldr	r0, [pc, #208]	; (800108c <MX_GPIO_Init+0x20c>)
 8000fba:	f002 fd7d 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000fbe:	f248 0307 	movw	r3, #32775	; 0x8007
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fc4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482e      	ldr	r0, [pc, #184]	; (8001090 <MX_GPIO_Init+0x210>)
 8000fd6:	f002 fd6f 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4827      	ldr	r0, [pc, #156]	; (8001090 <MX_GPIO_Init+0x210>)
 8000ff2:	f002 fd61 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ffa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	4820      	ldr	r0, [pc, #128]	; (800108c <MX_GPIO_Init+0x20c>)
 800100c:	f002 fd54 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001010:	2304      	movs	r3, #4
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001020:	4619      	mov	r1, r3
 8001022:	481e      	ldr	r0, [pc, #120]	; (800109c <MX_GPIO_Init+0x21c>)
 8001024:	f002 fd48 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4815      	ldr	r0, [pc, #84]	; (8001094 <MX_GPIO_Init+0x214>)
 800103e:	f002 fd3b 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001042:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <MX_GPIO_Init+0x214>)
 800105c:	f002 fd2c 	bl	8003ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001060:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <MX_GPIO_Init+0x218>)
 800107a:	f002 fd1d 	bl	8003ab8 <HAL_GPIO_Init>

}
 800107e:	bf00      	nop
 8001080:	3738      	adds	r7, #56	; 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40020800 	.word	0x40020800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021800 	.word	0x40021800
 800109c:	40020400 	.word	0x40020400

080010a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010b2:	f001 fe65 	bl	8002d80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40001000 	.word	0x40001000

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <SPIx_Init+0x6c>)
 80010d6:	f006 fb26 	bl	8007726 <HAL_SPI_GetState>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d12b      	bne.n	8001138 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <SPIx_Init+0x6c>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <SPIx_Init+0x70>)
 80010e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <SPIx_Init+0x6c>)
 80010e8:	2218      	movs	r2, #24
 80010ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <SPIx_Init+0x6c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <SPIx_Init+0x6c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <SPIx_Init+0x6c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <SPIx_Init+0x6c>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <SPIx_Init+0x6c>)
 8001106:	2207      	movs	r2, #7
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <SPIx_Init+0x6c>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <SPIx_Init+0x6c>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <SPIx_Init+0x6c>)
 8001118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <SPIx_Init+0x6c>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SPIx_Init+0x6c>)
 8001126:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <SPIx_Init+0x6c>)
 800112e:	f000 f853 	bl	80011d8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001132:	4802      	ldr	r0, [pc, #8]	; (800113c <SPIx_Init+0x6c>)
 8001134:	f005 fe57 	bl	8006de6 <HAL_SPI_Init>
  } 
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000074 	.word	0x20000074
 8001140:	40015000 	.word	0x40015000

08001144 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <SPIx_Read+0x38>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <SPIx_Read+0x3c>)
 8001160:	f006 f82e 	bl	80071c0 <HAL_SPI_Receive>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800116e:	f000 f827 	bl	80011c0 <SPIx_Error>
  }
  
  return readvalue;
 8001172:	68bb      	ldr	r3, [r7, #8]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000038 	.word	0x20000038
 8001180:	20000074 	.word	0x20000074

08001184 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <SPIx_Write+0x34>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1db9      	adds	r1, r7, #6
 8001198:	2201      	movs	r2, #1
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <SPIx_Write+0x38>)
 800119c:	f005 fed4 	bl	8006f48 <HAL_SPI_Transmit>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80011aa:	f000 f809 	bl	80011c0 <SPIx_Error>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000038 	.word	0x20000038
 80011bc:	20000074 	.word	0x20000074

080011c0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <SPIx_Error+0x14>)
 80011c6:	f005 fe97 	bl	8006ef8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80011ca:	f7ff ff81 	bl	80010d0 <SPIx_Init>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000074 	.word	0x20000074

080011d8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <SPIx_MspInit+0x6c>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <SPIx_MspInit+0x6c>)
 80011ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011ee:	6453      	str	r3, [r2, #68]	; 0x44
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <SPIx_MspInit+0x6c>)
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <SPIx_MspInit+0x6c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <SPIx_MspInit+0x6c>)
 8001206:	f043 0320 	orr.w	r3, r3, #32
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <SPIx_MspInit+0x6c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0320 	and.w	r3, r3, #32
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001218:	f44f 7360 	mov.w	r3, #896	; 0x380
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001222:	2302      	movs	r3, #2
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001226:	2301      	movs	r3, #1
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800122a:	2305      	movs	r3, #5
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <SPIx_MspInit+0x70>)
 8001236:	f002 fc3f 	bl	8003ab8 <HAL_GPIO_Init>
}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40021400 	.word	0x40021400

0800124c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <LCD_IO_Init+0xe0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d164      	bne.n	8001324 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800125a:	4b34      	ldr	r3, [pc, #208]	; (800132c <LCD_IO_Init+0xe0>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <LCD_IO_Init+0xe4>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a31      	ldr	r2, [pc, #196]	; (8001330 <LCD_IO_Init+0xe4>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <LCD_IO_Init+0xe4>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800127c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001280:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4619      	mov	r1, r3
 8001294:	4827      	ldr	r0, [pc, #156]	; (8001334 <LCD_IO_Init+0xe8>)
 8001296:	f002 fc0f 	bl	8003ab8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <LCD_IO_Init+0xe4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a23      	ldr	r2, [pc, #140]	; (8001330 <LCD_IO_Init+0xe4>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <LCD_IO_Init+0xe4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	4819      	ldr	r0, [pc, #100]	; (8001334 <LCD_IO_Init+0xe8>)
 80012d0:	f002 fbf2 	bl	8003ab8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <LCD_IO_Init+0xe4>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <LCD_IO_Init+0xe4>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <LCD_IO_Init+0xe4>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80012f0:	2304      	movs	r3, #4
 80012f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4619      	mov	r1, r3
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <LCD_IO_Init+0xec>)
 8001308:	f002 fbd6 	bl	8003ab8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800130c:	2200      	movs	r2, #0
 800130e:	2104      	movs	r1, #4
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <LCD_IO_Init+0xec>)
 8001312:	f002 fe89 	bl	8004028 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001316:	2201      	movs	r2, #1
 8001318:	2104      	movs	r1, #4
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <LCD_IO_Init+0xec>)
 800131c:	f002 fe84 	bl	8004028 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001320:	f7ff fed6 	bl	80010d0 <SPIx_Init>
  }
}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200000cc 	.word	0x200000cc
 8001330:	40023800 	.word	0x40023800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40020800 	.word	0x40020800

0800133c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <LCD_IO_WriteData+0x3c>)
 800134e:	f002 fe6b 	bl	8004028 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001352:	2200      	movs	r2, #0
 8001354:	2104      	movs	r1, #4
 8001356:	4809      	ldr	r0, [pc, #36]	; (800137c <LCD_IO_WriteData+0x40>)
 8001358:	f002 fe66 	bl	8004028 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff10 	bl	8001184 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001364:	2201      	movs	r2, #1
 8001366:	2104      	movs	r1, #4
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <LCD_IO_WriteData+0x40>)
 800136a:	f002 fe5d 	bl	8004028 <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40020800 	.word	0x40020800

08001380 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	480a      	ldr	r0, [pc, #40]	; (80013bc <LCD_IO_WriteReg+0x3c>)
 8001392:	f002 fe49 	bl	8004028 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001396:	2200      	movs	r2, #0
 8001398:	2104      	movs	r1, #4
 800139a:	4809      	ldr	r0, [pc, #36]	; (80013c0 <LCD_IO_WriteReg+0x40>)
 800139c:	f002 fe44 	bl	8004028 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff feed 	bl	8001184 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80013aa:	2201      	movs	r2, #1
 80013ac:	2104      	movs	r1, #4
 80013ae:	4804      	ldr	r0, [pc, #16]	; (80013c0 <LCD_IO_WriteReg+0x40>)
 80013b0:	f002 fe3a 	bl	8004028 <HAL_GPIO_WritePin>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40020c00 	.word	0x40020c00
 80013c0:	40020800 	.word	0x40020800

080013c4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	80fb      	strh	r3, [r7, #6]
 80013d0:	4613      	mov	r3, r2
 80013d2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80013d8:	2200      	movs	r2, #0
 80013da:	2104      	movs	r1, #4
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <LCD_IO_ReadData+0x5c>)
 80013de:	f002 fe23 	bl	8004028 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e8:	480e      	ldr	r0, [pc, #56]	; (8001424 <LCD_IO_ReadData+0x60>)
 80013ea:	f002 fe1d 	bl	8004028 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fec7 	bl	8001184 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fea3 	bl	8001144 <SPIx_Read>
 80013fe:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <LCD_IO_ReadData+0x60>)
 8001408:	f002 fe0e 	bl	8004028 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800140c:	2201      	movs	r2, #1
 800140e:	2104      	movs	r1, #4
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <LCD_IO_ReadData+0x5c>)
 8001412:	f002 fe09 	bl	8004028 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00

08001428 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f001 fcc5 	bl	8002dc0 <HAL_Delay>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <BSP_LCD_Init+0xbc>)
 8001446:	4a2e      	ldr	r2, [pc, #184]	; (8001500 <BSP_LCD_Init+0xc0>)
 8001448:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <BSP_LCD_Init+0xbc>)
 800144c:	2209      	movs	r2, #9
 800144e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <BSP_LCD_Init+0xbc>)
 8001452:	2201      	movs	r2, #1
 8001454:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <BSP_LCD_Init+0xbc>)
 8001458:	221d      	movs	r2, #29
 800145a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <BSP_LCD_Init+0xbc>)
 800145e:	2203      	movs	r2, #3
 8001460:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <BSP_LCD_Init+0xbc>)
 8001464:	f240 120d 	movw	r2, #269	; 0x10d
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <BSP_LCD_Init+0xbc>)
 800146c:	f240 1243 	movw	r2, #323	; 0x143
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <BSP_LCD_Init+0xbc>)
 8001474:	f240 1217 	movw	r2, #279	; 0x117
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <BSP_LCD_Init+0xbc>)
 800147c:	f240 1247 	movw	r2, #327	; 0x147
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <BSP_LCD_Init+0xbc>)
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <BSP_LCD_Init+0xbc>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <BSP_LCD_Init+0xbc>)
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <BSP_LCD_Init+0xc4>)
 800149c:	2208      	movs	r2, #8
 800149e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <BSP_LCD_Init+0xc4>)
 80014a2:	22c0      	movs	r2, #192	; 0xc0
 80014a4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <BSP_LCD_Init+0xc4>)
 80014a8:	2204      	movs	r2, #4
 80014aa:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <BSP_LCD_Init+0xc4>)
 80014ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <BSP_LCD_Init+0xc4>)
 80014b6:	f005 fa59 	bl	800696c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <BSP_LCD_Init+0xbc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <BSP_LCD_Init+0xbc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <BSP_LCD_Init+0xbc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <BSP_LCD_Init+0xbc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80014d2:	f000 fc2b 	bl	8001d2c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80014d6:	4809      	ldr	r0, [pc, #36]	; (80014fc <BSP_LCD_Init+0xbc>)
 80014d8:	f004 fa10 	bl	80058fc <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <BSP_LCD_Init+0xc8>)
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <BSP_LCD_Init+0xcc>)
 80014e0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <BSP_LCD_Init+0xc8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80014ea:	f000 fe0d 	bl	8002108 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <BSP_LCD_Init+0xd0>)
 80014f0:	f000 f8b4 	bl	800165c <BSP_LCD_SetFont>

  return LCD_OK;
 80014f4:	2300      	movs	r3, #0
}  
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000056c 	.word	0x2000056c
 8001500:	40016800 	.word	0x40016800
 8001504:	20000110 	.word	0x20000110
 8001508:	20000614 	.word	0x20000614
 800150c:	20000000 	.word	0x20000000
 8001510:	2000003c 	.word	0x2000003c

08001514 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <BSP_LCD_GetXSize+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	4798      	blx	r3
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000614 	.word	0x20000614

0800152c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <BSP_LCD_GetYSize+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	4798      	blx	r3
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000614 	.word	0x20000614

08001544 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001544:	b580      	push	{r7, lr}
 8001546:	b090      	sub	sp, #64	; 0x40
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001554:	f7ff ffde 	bl	8001514 <BSP_LCD_GetXSize>
 8001558:	4603      	mov	r3, r0
 800155a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001560:	f7ff ffe4 	bl	800152c <BSP_LCD_GetYSize>
 8001564:	4603      	mov	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001570:	23ff      	movs	r3, #255	; 0xff
 8001572:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800158a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001590:	2307      	movs	r3, #7
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001594:	f7ff ffbe 	bl	8001514 <BSP_LCD_GetXSize>
 8001598:	4603      	mov	r3, r0
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800159c:	f7ff ffc6 	bl	800152c <BSP_LCD_GetYSize>
 80015a0:	4603      	mov	r3, r0
 80015a2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	4814      	ldr	r0, [pc, #80]	; (8001600 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015ae:	f004 fb37 	bl	8005c20 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	4913      	ldr	r1, [pc, #76]	; (8001604 <BSP_LCD_LayerDefaultInit+0xc0>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3304      	adds	r3, #4
 80015c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80015c8:	88fa      	ldrh	r2, [r7, #6]
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <BSP_LCD_LayerDefaultInit+0xc0>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3308      	adds	r3, #8
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <BSP_LCD_LayerDefaultInit+0xc4>)
 80015da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80015dc:	88fa      	ldrh	r2, [r7, #6]
 80015de:	4909      	ldr	r1, [pc, #36]	; (8001604 <BSP_LCD_LayerDefaultInit+0xc0>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015ee:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015f2:	f004 fb53 	bl	8005c9c <HAL_LTDC_EnableDither>
}
 80015f6:	bf00      	nop
 80015f8:	3740      	adds	r7, #64	; 0x40
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000056c 	.word	0x2000056c
 8001604:	20000144 	.word	0x20000144
 8001608:	2000003c 	.word	0x2000003c

0800160c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <BSP_LCD_SelectLayer+0x1c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000140 	.word	0x20000140

0800162c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <BSP_LCD_SetTextColor+0x28>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <BSP_LCD_SetTextColor+0x2c>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	601a      	str	r2, [r3, #0]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	20000140 	.word	0x20000140
 8001658:	20000144 	.word	0x20000144

0800165c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <BSP_LCD_SetFont+0x2c>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4908      	ldr	r1, [pc, #32]	; (800168c <BSP_LCD_SetFont+0x30>)
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3308      	adds	r3, #8
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	601a      	str	r2, [r3, #0]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000140 	.word	0x20000140
 800168c:	20000144 	.word	0x20000144

08001690 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <BSP_LCD_GetFont+0x24>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <BSP_LCD_GetFont+0x28>)
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	3308      	adds	r3, #8
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000140 	.word	0x20000140
 80016b8:	20000144 	.word	0x20000144

080016bc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <BSP_LCD_Clear+0x48>)
 80016c6:	681c      	ldr	r4, [r3, #0]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <BSP_LCD_Clear+0x48>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <BSP_LCD_Clear+0x4c>)
 80016ce:	2134      	movs	r1, #52	; 0x34
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	335c      	adds	r3, #92	; 0x5c
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461e      	mov	r6, r3
 80016dc:	f7ff ff1a 	bl	8001514 <BSP_LCD_GetXSize>
 80016e0:	4605      	mov	r5, r0
 80016e2:	f7ff ff23 	bl	800152c <BSP_LCD_GetYSize>
 80016e6:	4602      	mov	r2, r0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	2300      	movs	r3, #0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	462a      	mov	r2, r5
 80016f4:	4631      	mov	r1, r6
 80016f6:	4620      	mov	r0, r4
 80016f8:	f000 fcce 	bl	8002098 <FillBuffer>
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001704:	20000140 	.word	0x20000140
 8001708:	2000056c 	.word	0x2000056c

0800170c <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <BSP_LCD_ClearStringLine+0xc0>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	492d      	ldr	r1, [pc, #180]	; (80017d0 <BSP_LCD_ClearStringLine+0xc4>)
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <BSP_LCD_ClearStringLine+0xc0>)
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <BSP_LCD_ClearStringLine+0xc0>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4827      	ldr	r0, [pc, #156]	; (80017d0 <BSP_LCD_ClearStringLine+0xc4>)
 8001732:	460b      	mov	r3, r1
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	440b      	add	r3, r1
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4403      	add	r3, r0
 800173c:	3304      	adds	r3, #4
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	4823      	ldr	r0, [pc, #140]	; (80017d0 <BSP_LCD_ClearStringLine+0xc4>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4403      	add	r3, r0
 800174c:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <BSP_LCD_ClearStringLine+0xc0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	491f      	ldr	r1, [pc, #124]	; (80017d0 <BSP_LCD_ClearStringLine+0xc4>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	3308      	adds	r3, #8
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	88da      	ldrh	r2, [r3, #6]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	b29b      	uxth	r3, r3
 8001768:	fb12 f303 	smulbb	r3, r2, r3
 800176c:	b29c      	uxth	r4, r3
 800176e:	f7ff fed1 	bl	8001514 <BSP_LCD_GetXSize>
 8001772:	4603      	mov	r3, r0
 8001774:	b299      	uxth	r1, r3
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <BSP_LCD_ClearStringLine+0xc0>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4815      	ldr	r0, [pc, #84]	; (80017d0 <BSP_LCD_ClearStringLine+0xc4>)
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4403      	add	r3, r0
 8001786:	3308      	adds	r3, #8
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	88db      	ldrh	r3, [r3, #6]
 800178c:	460a      	mov	r2, r1
 800178e:	4621      	mov	r1, r4
 8001790:	2000      	movs	r0, #0
 8001792:	f000 fa61 	bl	8001c58 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <BSP_LCD_ClearStringLine+0xc0>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	490d      	ldr	r1, [pc, #52]	; (80017d0 <BSP_LCD_ClearStringLine+0xc4>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <BSP_LCD_ClearStringLine+0xc0>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4908      	ldr	r1, [pc, #32]	; (80017d0 <BSP_LCD_ClearStringLine+0xc4>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff35 	bl	800162c <BSP_LCD_SetTextColor>
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd90      	pop	{r4, r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000140 	.word	0x20000140
 80017d0:	20000144 	.word	0x20000144

080017d4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	460b      	mov	r3, r1
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <BSP_LCD_DisplayChar+0x80>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	491b      	ldr	r1, [pc, #108]	; (8001858 <BSP_LCD_DisplayChar+0x84>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	3308      	adds	r3, #8
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <BSP_LCD_DisplayChar+0x80>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4c14      	ldr	r4, [pc, #80]	; (8001858 <BSP_LCD_DisplayChar+0x84>)
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4423      	add	r3, r4
 8001812:	3308      	adds	r3, #8
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001818:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <BSP_LCD_DisplayChar+0x80>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4c0d      	ldr	r4, [pc, #52]	; (8001858 <BSP_LCD_DisplayChar+0x84>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4423      	add	r3, r4
 800182c:	3308      	adds	r3, #8
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	889b      	ldrh	r3, [r3, #4]
 8001832:	3307      	adds	r3, #7
 8001834:	2b00      	cmp	r3, #0
 8001836:	da00      	bge.n	800183a <BSP_LCD_DisplayChar+0x66>
 8001838:	3307      	adds	r3, #7
 800183a:	10db      	asrs	r3, r3, #3
 800183c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001840:	18ca      	adds	r2, r1, r3
 8001842:	88b9      	ldrh	r1, [r7, #4]
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fb6c 	bl	8001f24 <DrawChar>
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	20000140 	.word	0x20000140
 8001858:	20000144 	.word	0x20000144

0800185c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	461a      	mov	r2, r3
 8001866:	4603      	mov	r3, r0
 8001868:	81fb      	strh	r3, [r7, #14]
 800186a:	460b      	mov	r3, r1
 800186c:	81bb      	strh	r3, [r7, #12]
 800186e:	4613      	mov	r3, r2
 8001870:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001872:	2301      	movs	r3, #1
 8001874:	83fb      	strh	r3, [r7, #30]
 8001876:	2300      	movs	r3, #0
 8001878:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001886:	e002      	b.n	800188e <BSP_LCD_DisplayStringAt+0x32>
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	3301      	adds	r3, #1
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	617a      	str	r2, [r7, #20]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f6      	bne.n	8001888 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800189a:	f7ff fe3b 	bl	8001514 <BSP_LCD_GetXSize>
 800189e:	4601      	mov	r1, r0
 80018a0:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <BSP_LCD_DisplayStringAt+0x174>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	484b      	ldr	r0, [pc, #300]	; (80019d4 <BSP_LCD_DisplayStringAt+0x178>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4403      	add	r3, r0
 80018b0:	3308      	adds	r3, #8
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	889b      	ldrh	r3, [r3, #4]
 80018b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ba:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d01c      	beq.n	80018fc <BSP_LCD_DisplayStringAt+0xa0>
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	dc33      	bgt.n	800192e <BSP_LCD_DisplayStringAt+0xd2>
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d002      	beq.n	80018d0 <BSP_LCD_DisplayStringAt+0x74>
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d019      	beq.n	8001902 <BSP_LCD_DisplayStringAt+0xa6>
 80018ce:	e02e      	b.n	800192e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	1ad1      	subs	r1, r2, r3
 80018d6:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <BSP_LCD_DisplayStringAt+0x174>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	483e      	ldr	r0, [pc, #248]	; (80019d4 <BSP_LCD_DisplayStringAt+0x178>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4403      	add	r3, r0
 80018e6:	3308      	adds	r3, #8
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	889b      	ldrh	r3, [r3, #4]
 80018ec:	fb03 f301 	mul.w	r3, r3, r1
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	89fb      	ldrh	r3, [r7, #14]
 80018f6:	4413      	add	r3, r2
 80018f8:	83fb      	strh	r3, [r7, #30]
      break;
 80018fa:	e01b      	b.n	8001934 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80018fc:	89fb      	ldrh	r3, [r7, #14]
 80018fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001900:	e018      	b.n	8001934 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	b299      	uxth	r1, r3
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <BSP_LCD_DisplayStringAt+0x174>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4831      	ldr	r0, [pc, #196]	; (80019d4 <BSP_LCD_DisplayStringAt+0x178>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4403      	add	r3, r0
 800191a:	3308      	adds	r3, #8
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	889b      	ldrh	r3, [r3, #4]
 8001920:	fb11 f303 	smulbb	r3, r1, r3
 8001924:	b29a      	uxth	r2, r3
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	4413      	add	r3, r2
 800192a:	83fb      	strh	r3, [r7, #30]
      break;
 800192c:	e002      	b.n	8001934 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800192e:	89fb      	ldrh	r3, [r7, #14]
 8001930:	83fb      	strh	r3, [r7, #30]
      break;
 8001932:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001934:	e01a      	b.n	800196c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	89b9      	ldrh	r1, [r7, #12]
 800193c:	8bfb      	ldrh	r3, [r7, #30]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff48 	bl	80017d4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <BSP_LCD_DisplayStringAt+0x174>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4922      	ldr	r1, [pc, #136]	; (80019d4 <BSP_LCD_DisplayStringAt+0x178>)
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3308      	adds	r3, #8
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	889a      	ldrh	r2, [r3, #4]
 800195a:	8bfb      	ldrh	r3, [r7, #30]
 800195c:	4413      	add	r3, r2
 800195e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	3301      	adds	r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
    i++;
 8001966:	8bbb      	ldrh	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf14      	ite	ne
 8001974:	2301      	movne	r3, #1
 8001976:	2300      	moveq	r3, #0
 8001978:	b2dc      	uxtb	r4, r3
 800197a:	f7ff fdcb 	bl	8001514 <BSP_LCD_GetXSize>
 800197e:	8bb9      	ldrh	r1, [r7, #28]
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <BSP_LCD_DisplayStringAt+0x174>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4d13      	ldr	r5, [pc, #76]	; (80019d4 <BSP_LCD_DisplayStringAt+0x178>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	442b      	add	r3, r5
 8001990:	3308      	adds	r3, #8
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	889b      	ldrh	r3, [r3, #4]
 8001996:	fb03 f301 	mul.w	r3, r3, r1
 800199a:	1ac3      	subs	r3, r0, r3
 800199c:	b299      	uxth	r1, r3
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <BSP_LCD_DisplayStringAt+0x174>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	480c      	ldr	r0, [pc, #48]	; (80019d4 <BSP_LCD_DisplayStringAt+0x178>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4403      	add	r3, r0
 80019ae:	3308      	adds	r3, #8
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	889b      	ldrh	r3, [r3, #4]
 80019b4:	4299      	cmp	r1, r3
 80019b6:	bf2c      	ite	cs
 80019b8:	2301      	movcs	r3, #1
 80019ba:	2300      	movcc	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4023      	ands	r3, r4
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1b7      	bne.n	8001936 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80019c6:	bf00      	nop
 80019c8:	bf00      	nop
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bdb0      	pop	{r4, r5, r7, pc}
 80019d0:	20000140 	.word	0x20000140
 80019d4:	20000144 	.word	0x20000144

080019d8 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80019e4:	f7ff fe54 	bl	8001690 <BSP_LCD_GetFont>
 80019e8:	4603      	mov	r3, r0
 80019ea:	88db      	ldrh	r3, [r3, #6]
 80019ec:	88fa      	ldrh	r2, [r7, #6]
 80019ee:	fb12 f303 	smulbb	r3, r2, r3
 80019f2:	b299      	uxth	r1, r3
 80019f4:	2303      	movs	r3, #3
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff ff2f 	bl	800185c <BSP_LCD_DisplayStringAt>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
 8001a12:	460b      	mov	r3, r1
 8001a14:	80bb      	strh	r3, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <BSP_LCD_DrawHLine+0x70>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <BSP_LCD_DrawHLine+0x74>)
 8001a24:	2134      	movs	r1, #52	; 0x34
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	335c      	adds	r3, #92	; 0x5c
 8001a2e:	681c      	ldr	r4, [r3, #0]
 8001a30:	f7ff fd70 	bl	8001514 <BSP_LCD_GetXSize>
 8001a34:	4602      	mov	r2, r0
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	fb03 f202 	mul.w	r2, r3, r2
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4423      	add	r3, r4
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <BSP_LCD_DrawHLine+0x70>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	887c      	ldrh	r4, [r7, #2]
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <BSP_LCD_DrawHLine+0x70>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4d0b      	ldr	r5, [pc, #44]	; (8001a80 <BSP_LCD_DrawHLine+0x78>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	442b      	add	r3, r5
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	2300      	movs	r3, #0
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2301      	movs	r3, #1
 8001a68:	4622      	mov	r2, r4
 8001a6a:	f000 fb15 	bl	8002098 <FillBuffer>
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bdb0      	pop	{r4, r5, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000140 	.word	0x20000140
 8001a7c:	2000056c 	.word	0x2000056c
 8001a80:	20000144 	.word	0x20000144

08001a84 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	80bb      	strh	r3, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	f1c3 0303 	rsb	r3, r3, #3
 8001a9e:	617b      	str	r3, [r7, #20]
  curx = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8001aa8:	e0c7      	b.n	8001c3a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b298      	uxth	r0, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	88ba      	ldrh	r2, [r7, #4]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b299      	uxth	r1, r3
 8001abe:	4b64      	ldr	r3, [pc, #400]	; (8001c50 <BSP_LCD_DrawCircle+0x1cc>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4c64      	ldr	r4, [pc, #400]	; (8001c54 <BSP_LCD_DrawCircle+0x1d0>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4423      	add	r3, r4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f000 fa01 	bl	8001ed8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	b298      	uxth	r0, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	88ba      	ldrh	r2, [r7, #4]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	b299      	uxth	r1, r3
 8001aea:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <BSP_LCD_DrawCircle+0x1cc>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4c59      	ldr	r4, [pc, #356]	; (8001c54 <BSP_LCD_DrawCircle+0x1d0>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4423      	add	r3, r4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	f000 f9eb 	bl	8001ed8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	4413      	add	r3, r2
 8001b0a:	b298      	uxth	r0, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	88ba      	ldrh	r2, [r7, #4]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	b299      	uxth	r1, r3
 8001b16:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <BSP_LCD_DrawCircle+0x1cc>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4c4e      	ldr	r4, [pc, #312]	; (8001c54 <BSP_LCD_DrawCircle+0x1d0>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4423      	add	r3, r4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f000 f9d5 	bl	8001ed8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	88fa      	ldrh	r2, [r7, #6]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b298      	uxth	r0, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	88ba      	ldrh	r2, [r7, #4]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	b299      	uxth	r1, r3
 8001b42:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <BSP_LCD_DrawCircle+0x1cc>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4c43      	ldr	r4, [pc, #268]	; (8001c54 <BSP_LCD_DrawCircle+0x1d0>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4423      	add	r3, r4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	f000 f9bf 	bl	8001ed8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4413      	add	r3, r2
 8001b62:	b298      	uxth	r0, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	88bb      	ldrh	r3, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b299      	uxth	r1, r3
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <BSP_LCD_DrawCircle+0x1cc>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4c38      	ldr	r4, [pc, #224]	; (8001c54 <BSP_LCD_DrawCircle+0x1d0>)
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4423      	add	r3, r4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f000 f9a9 	bl	8001ed8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	88fa      	ldrh	r2, [r7, #6]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	b298      	uxth	r0, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <BSP_LCD_DrawCircle+0x1cc>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4c2d      	ldr	r4, [pc, #180]	; (8001c54 <BSP_LCD_DrawCircle+0x1d0>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4423      	add	r3, r4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f000 f993 	bl	8001ed8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b298      	uxth	r0, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	88bb      	ldrh	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <BSP_LCD_DrawCircle+0x1cc>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4c22      	ldr	r4, [pc, #136]	; (8001c54 <BSP_LCD_DrawCircle+0x1d0>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4423      	add	r3, r4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f000 f97d 	bl	8001ed8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	88fa      	ldrh	r2, [r7, #6]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	b298      	uxth	r0, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	88bb      	ldrh	r3, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	b299      	uxth	r1, r3
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <BSP_LCD_DrawCircle+0x1cc>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4c17      	ldr	r4, [pc, #92]	; (8001c54 <BSP_LCD_DrawCircle+0x1d0>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4423      	add	r3, r4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	f000 f967 	bl	8001ed8 <BSP_LCD_DrawPixel>

    if (d < 0)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da06      	bge.n	8001c1e <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	009a      	lsls	r2, r3, #2
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4413      	add	r3, r2
 8001c18:	3306      	adds	r3, #6
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00a      	b.n	8001c34 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	009a      	lsls	r2, r3, #2
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	4413      	add	r3, r2
 8001c2a:	330a      	adds	r3, #10
 8001c2c:	617b      	str	r3, [r7, #20]
      cury--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	3301      	adds	r3, #1
 8001c38:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f67f af33 	bls.w	8001aaa <BSP_LCD_DrawCircle+0x26>
  } 
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000140 	.word	0x20000140
 8001c54:	20000144 	.word	0x20000144

08001c58 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af02      	add	r7, sp, #8
 8001c60:	4604      	mov	r4, r0
 8001c62:	4608      	mov	r0, r1
 8001c64:	4611      	mov	r1, r2
 8001c66:	461a      	mov	r2, r3
 8001c68:	4623      	mov	r3, r4
 8001c6a:	80fb      	strh	r3, [r7, #6]
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	80bb      	strh	r3, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <BSP_LCD_FillRect+0xa8>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4920      	ldr	r1, [pc, #128]	; (8001d04 <BSP_LCD_FillRect+0xac>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fccc 	bl	800162c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <BSP_LCD_FillRect+0xa8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <BSP_LCD_FillRect+0xb0>)
 8001c9a:	2134      	movs	r1, #52	; 0x34
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	335c      	adds	r3, #92	; 0x5c
 8001ca4:	681c      	ldr	r4, [r3, #0]
 8001ca6:	f7ff fc35 	bl	8001514 <BSP_LCD_GetXSize>
 8001caa:	4602      	mov	r2, r0
 8001cac:	88bb      	ldrh	r3, [r7, #4]
 8001cae:	fb03 f202 	mul.w	r2, r3, r2
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4423      	add	r3, r4
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <BSP_LCD_FillRect+0xa8>)
 8001cbe:	681c      	ldr	r4, [r3, #0]
 8001cc0:	68fd      	ldr	r5, [r7, #12]
 8001cc2:	887e      	ldrh	r6, [r7, #2]
 8001cc4:	f8b7 8000 	ldrh.w	r8, [r7]
 8001cc8:	f7ff fc24 	bl	8001514 <BSP_LCD_GetXSize>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	1ad1      	subs	r1, r2, r3
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <BSP_LCD_FillRect+0xa8>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	480b      	ldr	r0, [pc, #44]	; (8001d04 <BSP_LCD_FillRect+0xac>)
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4403      	add	r3, r0
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	9100      	str	r1, [sp, #0]
 8001ce8:	4643      	mov	r3, r8
 8001cea:	4632      	mov	r2, r6
 8001cec:	4629      	mov	r1, r5
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f000 f9d2 	bl	8002098 <FillBuffer>
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000140 	.word	0x20000140
 8001d04:	20000144 	.word	0x20000144
 8001d08:	2000056c 	.word	0x2000056c

08001d0c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <BSP_LCD_DisplayOn+0x1c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001d1a:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <BSP_LCD_DisplayOn+0x1c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4798      	blx	r3
  }
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000614 	.word	0x20000614

08001d2c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08e      	sub	sp, #56	; 0x38
 8001d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a60      	ldr	r2, [pc, #384]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b5e      	ldr	r3, [pc, #376]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d4a:	623b      	str	r3, [r7, #32]
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a59      	ldr	r2, [pc, #356]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a4b      	ldr	r2, [pc, #300]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a44      	ldr	r2, [pc, #272]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b3e      	ldr	r3, [pc, #248]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a3d      	ldr	r2, [pc, #244]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a36      	ldr	r2, [pc, #216]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a2f      	ldr	r2, [pc, #188]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <BSP_LCD_MspInit+0x190>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001e12:	f641 0358 	movw	r3, #6232	; 0x1858
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001e20:	2302      	movs	r3, #2
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001e24:	230e      	movs	r3, #14
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4824      	ldr	r0, [pc, #144]	; (8001ec0 <BSP_LCD_MspInit+0x194>)
 8001e30:	f001 fe42 	bl	8003ab8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001e34:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4820      	ldr	r0, [pc, #128]	; (8001ec4 <BSP_LCD_MspInit+0x198>)
 8001e42:	f001 fe39 	bl	8003ab8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001e46:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	481d      	ldr	r0, [pc, #116]	; (8001ec8 <BSP_LCD_MspInit+0x19c>)
 8001e54:	f001 fe30 	bl	8003ab8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001e58:	2348      	movs	r3, #72	; 0x48
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	481a      	ldr	r0, [pc, #104]	; (8001ecc <BSP_LCD_MspInit+0x1a0>)
 8001e64:	f001 fe28 	bl	8003ab8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	4619      	mov	r1, r3
 8001e74:	4816      	ldr	r0, [pc, #88]	; (8001ed0 <BSP_LCD_MspInit+0x1a4>)
 8001e76:	f001 fe1f 	bl	8003ab8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001e7a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	4813      	ldr	r0, [pc, #76]	; (8001ed4 <BSP_LCD_MspInit+0x1a8>)
 8001e88:	f001 fe16 	bl	8003ab8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001e90:	2309      	movs	r3, #9
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480a      	ldr	r0, [pc, #40]	; (8001ec4 <BSP_LCD_MspInit+0x198>)
 8001e9c:	f001 fe0c 	bl	8003ab8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001ea0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <BSP_LCD_MspInit+0x1a8>)
 8001eae:	f001 fe03 	bl	8003ab8 <HAL_GPIO_Init>
}
 8001eb2:	bf00      	nop
 8001eb4:	3738      	adds	r7, #56	; 0x38
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021400 	.word	0x40021400
 8001ed4:	40021800 	.word	0x40021800

08001ed8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001ed8:	b5b0      	push	{r4, r5, r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	603a      	str	r2, [r7, #0]
 8001ee2:	80fb      	strh	r3, [r7, #6]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <BSP_LCD_DrawPixel+0x44>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <BSP_LCD_DrawPixel+0x48>)
 8001eee:	2134      	movs	r1, #52	; 0x34
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	335c      	adds	r3, #92	; 0x5c
 8001ef8:	681c      	ldr	r4, [r3, #0]
 8001efa:	88bd      	ldrh	r5, [r7, #4]
 8001efc:	f7ff fb0a 	bl	8001514 <BSP_LCD_GetXSize>
 8001f00:	4603      	mov	r3, r0
 8001f02:	fb03 f205 	mul.w	r2, r3, r5
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4423      	add	r3, r4
 8001f0e:	461a      	mov	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1c:	20000140 	.word	0x20000140
 8001f20:	2000056c 	.word	0x2000056c

08001f24 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	603a      	str	r2, [r7, #0]
 8001f2e:	80fb      	strh	r3, [r7, #6]
 8001f30:	460b      	mov	r3, r1
 8001f32:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <DrawChar+0x16c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4953      	ldr	r1, [pc, #332]	; (8002094 <DrawChar+0x170>)
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	3308      	adds	r3, #8
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	88db      	ldrh	r3, [r3, #6]
 8001f56:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001f58:	4b4d      	ldr	r3, [pc, #308]	; (8002090 <DrawChar+0x16c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	494d      	ldr	r1, [pc, #308]	; (8002094 <DrawChar+0x170>)
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3308      	adds	r3, #8
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	889b      	ldrh	r3, [r3, #4]
 8001f6e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8001f70:	8a3b      	ldrh	r3, [r7, #16]
 8001f72:	3307      	adds	r3, #7
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	da00      	bge.n	8001f7a <DrawChar+0x56>
 8001f78:	3307      	adds	r3, #7
 8001f7a:	10db      	asrs	r3, r3, #3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	8a3b      	ldrh	r3, [r7, #16]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	e076      	b.n	800207e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001f90:	8a3b      	ldrh	r3, [r7, #16]
 8001f92:	3307      	adds	r3, #7
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	da00      	bge.n	8001f9a <DrawChar+0x76>
 8001f98:	3307      	adds	r3, #7
 8001f9a:	10db      	asrs	r3, r3, #3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fb03 f302 	mul.w	r3, r3, r2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001faa:	8a3b      	ldrh	r3, [r7, #16]
 8001fac:	3307      	adds	r3, #7
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	da00      	bge.n	8001fb4 <DrawChar+0x90>
 8001fb2:	3307      	adds	r3, #7
 8001fb4:	10db      	asrs	r3, r3, #3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d002      	beq.n	8001fc0 <DrawChar+0x9c>
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d004      	beq.n	8001fc8 <DrawChar+0xa4>
 8001fbe:	e00c      	b.n	8001fda <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
      break;
 8001fc6:	e016      	b.n	8001ff6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	3201      	adds	r2, #1
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
      break;
 8001fd8:	e00d      	b.n	8001ff6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	041a      	lsls	r2, r3, #16
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	3202      	adds	r2, #2
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
      break;
 8001ff4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	e036      	b.n	800206a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001ffc:	8a3a      	ldrh	r2, [r7, #16]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	1ad2      	subs	r2, r2, r3
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	4413      	add	r3, r2
 8002006:	3b01      	subs	r3, #1
 8002008:	2201      	movs	r2, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	461a      	mov	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	b29a      	uxth	r2, r3
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	4413      	add	r3, r2
 8002020:	b298      	uxth	r0, r3
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <DrawChar+0x16c>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	491b      	ldr	r1, [pc, #108]	; (8002094 <DrawChar+0x170>)
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	88bb      	ldrh	r3, [r7, #4]
 8002036:	4619      	mov	r1, r3
 8002038:	f7ff ff4e 	bl	8001ed8 <BSP_LCD_DrawPixel>
 800203c:	e012      	b.n	8002064 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	b29a      	uxth	r2, r3
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	4413      	add	r3, r2
 8002046:	b298      	uxth	r0, r3
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <DrawChar+0x16c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4911      	ldr	r1, [pc, #68]	; (8002094 <DrawChar+0x170>)
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3304      	adds	r3, #4
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	88bb      	ldrh	r3, [r7, #4]
 800205e:	4619      	mov	r1, r3
 8002060:	f7ff ff3a 	bl	8001ed8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	3301      	adds	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	8a3b      	ldrh	r3, [r7, #16]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3c4      	bcc.n	8001ffc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	3301      	adds	r3, #1
 8002076:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	3301      	adds	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	8a7b      	ldrh	r3, [r7, #18]
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	429a      	cmp	r2, r3
 8002084:	d384      	bcc.n	8001f90 <DrawChar+0x6c>
  }
}
 8002086:	bf00      	nop
 8002088:	bf00      	nop
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000140 	.word	0x20000140
 8002094:	20000144 	.word	0x20000144

08002098 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <FillBuffer+0x68>)
 80020a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020ac:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <FillBuffer+0x68>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <FillBuffer+0x68>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <FillBuffer+0x68>)
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <FillBuffer+0x6c>)
 80020be:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80020c0:	480f      	ldr	r0, [pc, #60]	; (8002100 <FillBuffer+0x68>)
 80020c2:	f001 f95d 	bl	8003380 <HAL_DMA2D_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d115      	bne.n	80020f8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	480c      	ldr	r0, [pc, #48]	; (8002100 <FillBuffer+0x68>)
 80020d0:	f001 fbc4 	bl	800385c <HAL_DMA2D_ConfigLayer>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10e      	bne.n	80020f8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69f9      	ldr	r1, [r7, #28]
 80020e4:	4806      	ldr	r0, [pc, #24]	; (8002100 <FillBuffer+0x68>)
 80020e6:	f001 f994 	bl	8003412 <HAL_DMA2D_Start>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80020f0:	210a      	movs	r1, #10
 80020f2:	4803      	ldr	r0, [pc, #12]	; (8002100 <FillBuffer+0x68>)
 80020f4:	f001 f9b8 	bl	8003468 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	200000d0 	.word	0x200000d0
 8002104:	4002b000 	.word	0x4002b000

08002108 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <BSP_SDRAM_Init+0xb0>)
 8002110:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002112:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <BSP_SDRAM_Init+0xb4>)
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <BSP_SDRAM_Init+0xb4>)
 800211a:	2207      	movs	r2, #7
 800211c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <BSP_SDRAM_Init+0xb4>)
 8002120:	2204      	movs	r2, #4
 8002122:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <BSP_SDRAM_Init+0xb4>)
 8002126:	2207      	movs	r2, #7
 8002128:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <BSP_SDRAM_Init+0xb4>)
 800212c:	2202      	movs	r2, #2
 800212e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <BSP_SDRAM_Init+0xb4>)
 8002132:	2202      	movs	r2, #2
 8002134:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <BSP_SDRAM_Init+0xb4>)
 8002138:	2202      	movs	r2, #2
 800213a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 800213e:	2201      	movs	r2, #1
 8002140:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 800214a:	2204      	movs	r2, #4
 800214c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 8002150:	2210      	movs	r2, #16
 8002152:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 800215c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002160:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 8002164:	2200      	movs	r2, #0
 8002166:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 800216a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800216e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 8002178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800217e:	2100      	movs	r1, #0
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 8002182:	f000 f87f 	bl	8002284 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002186:	490d      	ldr	r1, [pc, #52]	; (80021bc <BSP_SDRAM_Init+0xb4>)
 8002188:	480a      	ldr	r0, [pc, #40]	; (80021b4 <BSP_SDRAM_Init+0xac>)
 800218a:	f004 fdad 	bl	8006ce8 <HAL_SDRAM_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <BSP_SDRAM_Init+0xb8>)
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	e002      	b.n	80021a2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <BSP_SDRAM_Init+0xb8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80021a2:	f240 506a 	movw	r0, #1386	; 0x56a
 80021a6:	f000 f80d 	bl	80021c4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <BSP_SDRAM_Init+0xb8>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000015c 	.word	0x2000015c
 80021b8:	a0000140 	.word	0xa0000140
 80021bc:	20000190 	.word	0x20000190
 80021c0:	20000044 	.word	0x20000044

080021c4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021d8:	2208      	movs	r2, #8
 80021da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021de:	2201      	movs	r2, #1
 80021e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80021e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ec:	4923      	ldr	r1, [pc, #140]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021ee:	4824      	ldr	r0, [pc, #144]	; (8002280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80021f0:	f004 fdae 	bl	8006d50 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80021f4:	2001      	movs	r0, #1
 80021f6:	f000 fde3 	bl	8002dc0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80021fc:	2202      	movs	r2, #2
 80021fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002202:	2208      	movs	r2, #8
 8002204:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002208:	2201      	movs	r2, #1
 800220a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002216:	4919      	ldr	r1, [pc, #100]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002218:	4819      	ldr	r0, [pc, #100]	; (8002280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800221a:	f004 fd99 	bl	8006d50 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002220:	2203      	movs	r2, #3
 8002222:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002226:	2208      	movs	r2, #8
 8002228:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800222c:	2204      	movs	r2, #4
 800222e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800223a:	4910      	ldr	r1, [pc, #64]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800223c:	4810      	ldr	r0, [pc, #64]	; (8002280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800223e:	f004 fd87 	bl	8006d50 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002242:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002246:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800224a:	2204      	movs	r2, #4
 800224c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002250:	2208      	movs	r2, #8
 8002252:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002256:	2201      	movs	r2, #1
 8002258:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4a07      	ldr	r2, [pc, #28]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800225e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002264:	4905      	ldr	r1, [pc, #20]	; (800227c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002266:	4806      	ldr	r0, [pc, #24]	; (8002280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002268:	f004 fd72 	bl	8006d50 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4804      	ldr	r0, [pc, #16]	; (8002280 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002270:	f004 fd99 	bl	8006da6 <HAL_SDRAM_ProgramRefreshRate>
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200001ac 	.word	0x200001ac
 8002280:	2000015c 	.word	0x2000015c

08002284 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b090      	sub	sp, #64	; 0x40
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80ec 	beq.w	800246e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
 800229a:	4b77      	ldr	r3, [pc, #476]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	4a76      	ldr	r2, [pc, #472]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6393      	str	r3, [r2, #56]	; 0x38
 80022a6:	4b74      	ldr	r3, [pc, #464]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	4b70      	ldr	r3, [pc, #448]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a6f      	ldr	r2, [pc, #444]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	4b69      	ldr	r3, [pc, #420]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a68      	ldr	r2, [pc, #416]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b66      	ldr	r3, [pc, #408]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	623b      	str	r3, [r7, #32]
 80022e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	4b62      	ldr	r3, [pc, #392]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a61      	ldr	r2, [pc, #388]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	4b5b      	ldr	r3, [pc, #364]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a5a      	ldr	r2, [pc, #360]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 8002310:	f043 0308 	orr.w	r3, r3, #8
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b58      	ldr	r3, [pc, #352]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	4b54      	ldr	r3, [pc, #336]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a53      	ldr	r2, [pc, #332]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 800232c:	f043 0310 	orr.w	r3, r3, #16
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b51      	ldr	r3, [pc, #324]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b46      	ldr	r3, [pc, #280]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a45      	ldr	r2, [pc, #276]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 8002364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <BSP_SDRAM_MspInit+0x1f4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800237a:	2302      	movs	r3, #2
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002382:	230c      	movs	r3, #12
 8002384:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002386:	2360      	movs	r3, #96	; 0x60
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800238a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800238e:	4619      	mov	r1, r3
 8002390:	483a      	ldr	r0, [pc, #232]	; (800247c <BSP_SDRAM_MspInit+0x1f8>)
 8002392:	f001 fb91 	bl	8003ab8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002396:	2301      	movs	r3, #1
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800239a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800239e:	4619      	mov	r1, r3
 80023a0:	4837      	ldr	r0, [pc, #220]	; (8002480 <BSP_SDRAM_MspInit+0x1fc>)
 80023a2:	f001 fb89 	bl	8003ab8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80023a6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80023ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b0:	4619      	mov	r1, r3
 80023b2:	4834      	ldr	r0, [pc, #208]	; (8002484 <BSP_SDRAM_MspInit+0x200>)
 80023b4:	f001 fb80 	bl	8003ab8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80023b8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80023be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c2:	4619      	mov	r1, r3
 80023c4:	4830      	ldr	r0, [pc, #192]	; (8002488 <BSP_SDRAM_MspInit+0x204>)
 80023c6:	f001 fb77 	bl	8003ab8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80023ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80023d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d4:	4619      	mov	r1, r3
 80023d6:	482d      	ldr	r0, [pc, #180]	; (800248c <BSP_SDRAM_MspInit+0x208>)
 80023d8:	f001 fb6e 	bl	8003ab8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80023dc:	f248 1333 	movw	r3, #33075	; 0x8133
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	4829      	ldr	r0, [pc, #164]	; (8002490 <BSP_SDRAM_MspInit+0x20c>)
 80023ea:	f001 fb65 	bl	8003ab8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 80023fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002400:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 8002404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002408:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 800240c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002410:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 8002414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002418:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002420:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 8002422:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002426:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002428:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 800242a:	2200      	movs	r2, #0
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 8002430:	2203      	movs	r2, #3
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002434:	4b17      	ldr	r3, [pc, #92]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 8002436:	2200      	movs	r2, #0
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 8002442:	4a15      	ldr	r2, [pc, #84]	; (8002498 <BSP_SDRAM_MspInit+0x214>)
 8002444:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
 800244c:	4a11      	ldr	r2, [pc, #68]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002452:	4810      	ldr	r0, [pc, #64]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 8002454:	f000 fe84 	bl	8003160 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002458:	480e      	ldr	r0, [pc, #56]	; (8002494 <BSP_SDRAM_MspInit+0x210>)
 800245a:	f000 fdd3 	bl	8003004 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	210f      	movs	r1, #15
 8002462:	2038      	movs	r0, #56	; 0x38
 8002464:	f000 fd88 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002468:	2038      	movs	r0, #56	; 0x38
 800246a:	f000 fda1 	bl	8002fb0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800246e:	bf00      	nop
 8002470:	3740      	adds	r7, #64	; 0x40
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40021000 	.word	0x40021000
 800248c:	40021400 	.word	0x40021400
 8002490:	40021800 	.word	0x40021800
 8002494:	200001bc 	.word	0x200001bc
 8002498:	40026410 	.word	0x40026410

0800249c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_MspInit+0x54>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a11      	ldr	r2, [pc, #68]	; (80024f0 <HAL_MspInit+0x54>)
 80024ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <HAL_MspInit+0x54>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_MspInit+0x54>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <HAL_MspInit+0x54>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_MspInit+0x54>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	210f      	movs	r1, #15
 80024de:	f06f 0001 	mvn.w	r0, #1
 80024e2:	f000 fd49 	bl	8002f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800

080024f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <HAL_CRC_MspInit+0x3c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10d      	bne.n	8002522 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_CRC_MspInit+0x40>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_CRC_MspInit+0x40>)
 8002510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HAL_CRC_MspInit+0x40>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023000 	.word	0x40023000
 8002534:	40023800 	.word	0x40023800

08002538 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_DMA2D_MspInit+0x48>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d115      	bne.n	8002576 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_DMA2D_MspInit+0x4c>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <HAL_DMA2D_MspInit+0x4c>)
 8002554:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_DMA2D_MspInit+0x4c>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2105      	movs	r1, #5
 800256a:	205a      	movs	r0, #90	; 0x5a
 800256c:	f000 fd04 	bl	8002f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002570:	205a      	movs	r0, #90	; 0x5a
 8002572:	f000 fd1d 	bl	8002fb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	4002b000 	.word	0x4002b000
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a29      	ldr	r2, [pc, #164]	; (800264c <HAL_I2C_MspInit+0xc4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d14b      	bne.n	8002642 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	4b28      	ldr	r3, [pc, #160]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a27      	ldr	r2, [pc, #156]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b25      	ldr	r3, [pc, #148]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a20      	ldr	r2, [pc, #128]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80025e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e8:	2312      	movs	r3, #18
 80025ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025f4:	2304      	movs	r3, #4
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	4815      	ldr	r0, [pc, #84]	; (8002654 <HAL_I2C_MspInit+0xcc>)
 8002600:	f001 fa5a 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260a:	2312      	movs	r3, #18
 800260c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260e:	2301      	movs	r3, #1
 8002610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002616:	2304      	movs	r3, #4
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	4619      	mov	r1, r3
 8002620:	480d      	ldr	r0, [pc, #52]	; (8002658 <HAL_I2C_MspInit+0xd0>)
 8002622:	f001 fa49 	bl	8003ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 8002630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_I2C_MspInit+0xc8>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002642:	bf00      	nop
 8002644:	3728      	adds	r7, #40	; 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40005c00 	.word	0x40005c00
 8002650:	40023800 	.word	0x40023800
 8002654:	40020800 	.word	0x40020800
 8002658:	40020000 	.word	0x40020000

0800265c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b09a      	sub	sp, #104	; 0x68
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002678:	2230      	movs	r2, #48	; 0x30
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f007 fe4f 	bl	800a320 <memset>
  if(hltdc->Instance==LTDC)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a85      	ldr	r2, [pc, #532]	; (800289c <HAL_LTDC_MspInit+0x240>)
 8002688:	4293      	cmp	r3, r2
 800268a:	f040 8103 	bne.w	8002894 <HAL_LTDC_MspInit+0x238>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800268e:	2308      	movs	r3, #8
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002692:	2332      	movs	r3, #50	; 0x32
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002696:	2305      	movs	r3, #5
 8002698:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800269a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f004 f961 	bl	800696c <HAL_RCCEx_PeriphCLKConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80026b0:	f7fe fd08 	bl	80010c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	4b79      	ldr	r3, [pc, #484]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	4a78      	ldr	r2, [pc, #480]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 80026be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026c2:	6453      	str	r3, [r2, #68]	; 0x44
 80026c4:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	4b72      	ldr	r3, [pc, #456]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	4a71      	ldr	r2, [pc, #452]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 80026da:	f043 0320 	orr.w	r3, r3, #32
 80026de:	6313      	str	r3, [r2, #48]	; 0x30
 80026e0:	4b6f      	ldr	r3, [pc, #444]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	4b6b      	ldr	r3, [pc, #428]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	4a6a      	ldr	r2, [pc, #424]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6313      	str	r3, [r2, #48]	; 0x30
 80026fc:	4b68      	ldr	r3, [pc, #416]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	4b64      	ldr	r3, [pc, #400]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	4a63      	ldr	r2, [pc, #396]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	6313      	str	r3, [r2, #48]	; 0x30
 8002718:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	4a5c      	ldr	r2, [pc, #368]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 800272e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002732:	6313      	str	r3, [r2, #48]	; 0x30
 8002734:	4b5a      	ldr	r3, [pc, #360]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	4b56      	ldr	r3, [pc, #344]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4a55      	ldr	r2, [pc, #340]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6313      	str	r3, [r2, #48]	; 0x30
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	4b4f      	ldr	r3, [pc, #316]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	4a4e      	ldr	r2, [pc, #312]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 8002766:	f043 0308 	orr.w	r3, r3, #8
 800276a:	6313      	str	r3, [r2, #48]	; 0x30
 800276c:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <HAL_LTDC_MspInit+0x244>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800278a:	230e      	movs	r3, #14
 800278c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002792:	4619      	mov	r1, r3
 8002794:	4843      	ldr	r0, [pc, #268]	; (80028a4 <HAL_LTDC_MspInit+0x248>)
 8002796:	f001 f98f 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800279a:	f641 0358 	movw	r3, #6232	; 0x1858
 800279e:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027ac:	230e      	movs	r3, #14
 80027ae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027b4:	4619      	mov	r1, r3
 80027b6:	483c      	ldr	r0, [pc, #240]	; (80028a8 <HAL_LTDC_MspInit+0x24c>)
 80027b8:	f001 f97e 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80027bc:	2303      	movs	r3, #3
 80027be:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80027cc:	2309      	movs	r3, #9
 80027ce:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027d4:	4619      	mov	r1, r3
 80027d6:	4835      	ldr	r0, [pc, #212]	; (80028ac <HAL_LTDC_MspInit+0x250>)
 80027d8:	f001 f96e 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80027dc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80027e0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ea:	2300      	movs	r3, #0
 80027ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027ee:	230e      	movs	r3, #14
 80027f0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027f6:	4619      	mov	r1, r3
 80027f8:	482c      	ldr	r0, [pc, #176]	; (80028ac <HAL_LTDC_MspInit+0x250>)
 80027fa:	f001 f95d 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80027fe:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002802:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002810:	230e      	movs	r3, #14
 8002812:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002814:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002818:	4619      	mov	r1, r3
 800281a:	4825      	ldr	r0, [pc, #148]	; (80028b0 <HAL_LTDC_MspInit+0x254>)
 800281c:	f001 f94c 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002820:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002824:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002832:	230e      	movs	r3, #14
 8002834:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002836:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800283a:	4619      	mov	r1, r3
 800283c:	481d      	ldr	r0, [pc, #116]	; (80028b4 <HAL_LTDC_MspInit+0x258>)
 800283e:	f001 f93b 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002842:	2348      	movs	r3, #72	; 0x48
 8002844:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002852:	230e      	movs	r3, #14
 8002854:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002856:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800285a:	4619      	mov	r1, r3
 800285c:	4816      	ldr	r0, [pc, #88]	; (80028b8 <HAL_LTDC_MspInit+0x25c>)
 800285e:	f001 f92b 	bl	8003ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002862:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002866:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002874:	2309      	movs	r3, #9
 8002876:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002878:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800287c:	4619      	mov	r1, r3
 800287e:	480c      	ldr	r0, [pc, #48]	; (80028b0 <HAL_LTDC_MspInit+0x254>)
 8002880:	f001 f91a 	bl	8003ab8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002884:	2200      	movs	r2, #0
 8002886:	2105      	movs	r1, #5
 8002888:	2058      	movs	r0, #88	; 0x58
 800288a:	f000 fb75 	bl	8002f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800288e:	2058      	movs	r0, #88	; 0x58
 8002890:	f000 fb8e 	bl	8002fb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002894:	bf00      	nop
 8002896:	3768      	adds	r7, #104	; 0x68
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40016800 	.word	0x40016800
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40021400 	.word	0x40021400
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40021800 	.word	0x40021800
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00

080028bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <HAL_SPI_MspInit+0x84>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d12c      	bne.n	8002938 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_SPI_MspInit+0x88>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a17      	ldr	r2, [pc, #92]	; (8002944 <HAL_SPI_MspInit+0x88>)
 80028e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_SPI_MspInit+0x88>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_SPI_MspInit+0x88>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a10      	ldr	r2, [pc, #64]	; (8002944 <HAL_SPI_MspInit+0x88>)
 8002904:	f043 0320 	orr.w	r3, r3, #32
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_SPI_MspInit+0x88>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002916:	f44f 7360 	mov.w	r3, #896	; 0x380
 800291a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002928:	2305      	movs	r3, #5
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <HAL_SPI_MspInit+0x8c>)
 8002934:	f001 f8c0 	bl	8003ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002938:	bf00      	nop
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40015000 	.word	0x40015000
 8002944:	40023800 	.word	0x40023800
 8002948:	40021400 	.word	0x40021400

0800294c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a08      	ldr	r2, [pc, #32]	; (800297c <HAL_SPI_MspDeInit+0x30>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10a      	bne.n	8002974 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <HAL_SPI_MspDeInit+0x34>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_SPI_MspDeInit+0x34>)
 8002964:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002968:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800296a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <HAL_SPI_MspDeInit+0x38>)
 8002970:	f001 fa4e 	bl	8003e10 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40015000 	.word	0x40015000
 8002980:	40023800 	.word	0x40023800
 8002984:	40021400 	.word	0x40021400

08002988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <HAL_TIM_Base_MspInit+0x3c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10d      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_TIM_Base_MspInit+0x40>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_TIM_Base_MspInit+0x40>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6453      	str	r3, [r2, #68]	; 0x44
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_TIM_Base_MspInit+0x40>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_UART_MspInit+0x84>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d12c      	bne.n	8002a48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_UART_MspInit+0x88>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_UART_MspInit+0x88>)
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_UART_MspInit+0x88>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_UART_MspInit+0x88>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_UART_MspInit+0x88>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_UART_MspInit+0x88>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a38:	2307      	movs	r3, #7
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4619      	mov	r1, r3
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <HAL_UART_MspInit+0x8c>)
 8002a44:	f001 f838 	bl	8003ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a48:	bf00      	nop
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40011000 	.word	0x40011000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020000 	.word	0x40020000

08002a5c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a70:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_FMC_MspInit+0x104>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d16f      	bne.n	8002b58 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002a78:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <HAL_FMC_MspInit+0x104>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_FMC_MspInit+0x108>)
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	4a37      	ldr	r2, [pc, #220]	; (8002b64 <HAL_FMC_MspInit+0x108>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6393      	str	r3, [r2, #56]	; 0x38
 8002a8e:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_FMC_MspInit+0x108>)
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002a9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a9e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aac:	230c      	movs	r3, #12
 8002aae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	482c      	ldr	r0, [pc, #176]	; (8002b68 <HAL_FMC_MspInit+0x10c>)
 8002ab6:	f000 ffff 	bl	8003ab8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002aba:	2301      	movs	r3, #1
 8002abc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aca:	230c      	movs	r3, #12
 8002acc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4826      	ldr	r0, [pc, #152]	; (8002b6c <HAL_FMC_MspInit+0x110>)
 8002ad4:	f000 fff0 	bl	8003ab8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002ad8:	f248 1333 	movw	r3, #33075	; 0x8133
 8002adc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aea:	230c      	movs	r3, #12
 8002aec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	481f      	ldr	r0, [pc, #124]	; (8002b70 <HAL_FMC_MspInit+0x114>)
 8002af4:	f000 ffe0 	bl	8003ab8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002af8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002afc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b06:	2303      	movs	r3, #3
 8002b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4818      	ldr	r0, [pc, #96]	; (8002b74 <HAL_FMC_MspInit+0x118>)
 8002b14:	f000 ffd0 	bl	8003ab8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002b18:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b1c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b2a:	230c      	movs	r3, #12
 8002b2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4811      	ldr	r0, [pc, #68]	; (8002b78 <HAL_FMC_MspInit+0x11c>)
 8002b34:	f000 ffc0 	bl	8003ab8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002b38:	2360      	movs	r3, #96	; 0x60
 8002b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b44:	2303      	movs	r3, #3
 8002b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b48:	230c      	movs	r3, #12
 8002b4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480a      	ldr	r0, [pc, #40]	; (8002b7c <HAL_FMC_MspInit+0x120>)
 8002b52:	f000 ffb1 	bl	8003ab8 <HAL_GPIO_Init>
 8002b56:	e000      	b.n	8002b5a <HAL_FMC_MspInit+0xfe>
    return;
 8002b58:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	2000021c 	.word	0x2000021c
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40021400 	.word	0x40021400
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40021800 	.word	0x40021800
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40020c00 	.word	0x40020c00
 8002b7c:	40020400 	.word	0x40020400

08002b80 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b88:	f7ff ff68 	bl	8002a5c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	2036      	movs	r0, #54	; 0x36
 8002baa:	f000 f9e5 	bl	8002f78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bae:	2036      	movs	r0, #54	; 0x36
 8002bb0:	f000 f9fe 	bl	8002fb0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <HAL_InitTick+0xa4>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <HAL_InitTick+0xa4>)
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc4:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <HAL_InitTick+0xa4>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bd0:	f107 0210 	add.w	r2, r7, #16
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fe94 	bl	8006908 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002be0:	f003 fe6a 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 8002be4:	4603      	mov	r3, r0
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <HAL_InitTick+0xa8>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0c9b      	lsrs	r3, r3, #18
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_InitTick+0xac>)
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <HAL_InitTick+0xb0>)
 8002bfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_InitTick+0xac>)
 8002c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c06:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_InitTick+0xac>)
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_InitTick+0xac>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_InitTick+0xac>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c18:	4809      	ldr	r0, [pc, #36]	; (8002c40 <HAL_InitTick+0xac>)
 8002c1a:	f004 fec3 	bl	80079a4 <HAL_TIM_Base_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c24:	4806      	ldr	r0, [pc, #24]	; (8002c40 <HAL_InitTick+0xac>)
 8002c26:	f004 ff0d 	bl	8007a44 <HAL_TIM_Base_Start_IT>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	e000      	b.n	8002c30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3730      	adds	r7, #48	; 0x30
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	431bde83 	.word	0x431bde83
 8002c40:	20000618 	.word	0x20000618
 8002c44:	40001000 	.word	0x40001000

08002c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <NMI_Handler+0x4>

08002c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c52:	e7fe      	b.n	8002c52 <HardFault_Handler+0x4>

08002c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c58:	e7fe      	b.n	8002c58 <MemManage_Handler+0x4>

08002c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c5e:	e7fe      	b.n	8002c5e <BusFault_Handler+0x4>

08002c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <UsageFault_Handler+0x4>

08002c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <TIM6_DAC_IRQHandler+0x10>)
 8002c7a:	f004 ff53 	bl	8007b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000618 	.word	0x20000618

08002c88 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <OTG_HS_IRQHandler+0x10>)
 8002c8e:	f001 f9e4 	bl	800405a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000664 	.word	0x20000664

08002c9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <LTDC_IRQHandler+0x10>)
 8002ca2:	f002 fefb 	bl	8005a9c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200003c4 	.word	0x200003c4

08002cb0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <DMA2D_IRQHandler+0x10>)
 8002cb6:	f000 fcc0 	bl	800363a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200004f8 	.word	0x200004f8

08002cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <SystemInit+0x20>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <SystemInit+0x20>)
 8002cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d20 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cee:	490e      	ldr	r1, [pc, #56]	; (8002d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d04:	4c0b      	ldr	r4, [pc, #44]	; (8002d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d12:	f7ff ffd7 	bl	8002cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d16:	f007 fad1 	bl	800a2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d1a:	f7fd fd93 	bl	8000844 <main>
  bx  lr    
 8002d1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d28:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8002d2c:	0800be50 	.word	0x0800be50
  ldr r2, =_sbss
 8002d30:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8002d34:	20000968 	.word	0x20000968

08002d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC_IRQHandler>
	...

08002d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_Init+0x40>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <HAL_Init+0x40>)
 8002d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_Init+0x40>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <HAL_Init+0x40>)
 8002d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_Init+0x40>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <HAL_Init+0x40>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d64:	2003      	movs	r0, #3
 8002d66:	f000 f8fc 	bl	8002f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f7ff ff12 	bl	8002b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d70:	f7ff fb94 	bl	800249c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00

08002d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_IncTick+0x20>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_IncTick+0x24>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_IncTick+0x24>)
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000050 	.word	0x20000050
 8002da4:	20000660 	.word	0x20000660

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_GetTick+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000660 	.word	0x20000660

08002dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff ffee 	bl	8002da8 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d005      	beq.n	8002de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_Delay+0x44>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002de6:	bf00      	nop
 8002de8:	f7ff ffde 	bl	8002da8 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d8f7      	bhi.n	8002de8 <HAL_Delay+0x28>
  {
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000050 	.word	0x20000050

08002e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e24:	4013      	ands	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3a:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	60d3      	str	r3, [r2, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <__NVIC_GetPriorityGrouping+0x18>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f003 0307 	and.w	r3, r3, #7
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	db0b      	blt.n	8002e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <__NVIC_EnableIRQ+0x38>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db0a      	blt.n	8002ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	490c      	ldr	r1, [pc, #48]	; (8002ef4 <__NVIC_SetPriority+0x4c>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed0:	e00a      	b.n	8002ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4908      	ldr	r1, [pc, #32]	; (8002ef8 <__NVIC_SetPriority+0x50>)
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	3b04      	subs	r3, #4
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	761a      	strb	r2, [r3, #24]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000e100 	.word	0xe000e100
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f1c3 0307 	rsb	r3, r3, #7
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	bf28      	it	cs
 8002f1a:	2304      	movcs	r3, #4
 8002f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d902      	bls.n	8002f2c <NVIC_EncodePriority+0x30>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3b03      	subs	r3, #3
 8002f2a:	e000      	b.n	8002f2e <NVIC_EncodePriority+0x32>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	401a      	ands	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43d9      	mvns	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	4313      	orrs	r3, r2
         );
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	; 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ff4c 	bl	8002e08 <__NVIC_SetPriorityGrouping>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f8a:	f7ff ff61 	bl	8002e50 <__NVIC_GetPriorityGrouping>
 8002f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	6978      	ldr	r0, [r7, #20]
 8002f96:	f7ff ffb1 	bl	8002efc <NVIC_EncodePriority>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff ff80 	bl	8002ea8 <__NVIC_SetPriority>
}
 8002fa8:	bf00      	nop
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff ff54 	bl	8002e6c <__NVIC_EnableIRQ>
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00e      	b.n	8002ffc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	795b      	ldrb	r3, [r3, #5]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff fa80 	bl	80024f4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003010:	f7ff feca 	bl	8002da8 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e099      	b.n	8003154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003040:	e00f      	b.n	8003062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003042:	f7ff feb1 	bl	8002da8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b05      	cmp	r3, #5
 800304e:	d908      	bls.n	8003062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e078      	b.n	8003154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e8      	bne.n	8003042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_DMA_Init+0x158>)
 800307c:	4013      	ands	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d107      	bne.n	80030cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	4313      	orrs	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0307 	bic.w	r3, r3, #7
 80030e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d117      	bne.n	8003126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8bd 	bl	8003288 <DMA_CheckFifoParam>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003122:	2301      	movs	r3, #1
 8003124:	e016      	b.n	8003154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f874 	bl	800321c <DMA_CalcBaseAndBitshift>
 8003134:	4603      	mov	r3, r0
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	223f      	movs	r2, #63	; 0x3f
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	f010803f 	.word	0xf010803f

08003160 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e050      	b.n	8003214 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d101      	bne.n	8003182 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	e048      	b.n	8003214 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2221      	movs	r2, #33	; 0x21
 80031c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f82a 	bl	800321c <DMA_CalcBaseAndBitshift>
 80031c8:	4603      	mov	r3, r0
 80031ca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	223f      	movs	r2, #63	; 0x3f
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	3b10      	subs	r3, #16
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <DMA_CalcBaseAndBitshift+0x64>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003236:	4a13      	ldr	r2, [pc, #76]	; (8003284 <DMA_CalcBaseAndBitshift+0x68>)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d909      	bls.n	800325e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	1d1a      	adds	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	659a      	str	r2, [r3, #88]	; 0x58
 800325c:	e007      	b.n	800326e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	aaaaaaab 	.word	0xaaaaaaab
 8003284:	0800be38 	.word	0x0800be38

08003288 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d11f      	bne.n	80032e2 <DMA_CheckFifoParam+0x5a>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d856      	bhi.n	8003356 <DMA_CheckFifoParam+0xce>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <DMA_CheckFifoParam+0x28>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032d3 	.word	0x080032d3
 80032b8:	080032c1 	.word	0x080032c1
 80032bc:	08003357 	.word	0x08003357
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d046      	beq.n	800335a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d0:	e043      	b.n	800335a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032da:	d140      	bne.n	800335e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e0:	e03d      	b.n	800335e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ea:	d121      	bne.n	8003330 <DMA_CheckFifoParam+0xa8>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d837      	bhi.n	8003362 <DMA_CheckFifoParam+0xda>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <DMA_CheckFifoParam+0x70>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003309 	.word	0x08003309
 80032fc:	0800330f 	.word	0x0800330f
 8003300:	08003309 	.word	0x08003309
 8003304:	08003321 	.word	0x08003321
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      break;
 800330c:	e030      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d025      	beq.n	8003366 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331e:	e022      	b.n	8003366 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003328:	d11f      	bne.n	800336a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800332e:	e01c      	b.n	800336a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d903      	bls.n	800333e <DMA_CheckFifoParam+0xb6>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d003      	beq.n	8003344 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800333c:	e018      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      break;
 8003342:	e015      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00e      	beq.n	800336e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e00b      	b.n	800336e <DMA_CheckFifoParam+0xe6>
      break;
 8003356:	bf00      	nop
 8003358:	e00a      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 800335a:	bf00      	nop
 800335c:	e008      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 800335e:	bf00      	nop
 8003360:	e006      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 8003362:	bf00      	nop
 8003364:	e004      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e002      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;   
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
    }
  } 
  
  return status; 
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop

08003380 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e03b      	b.n	800340a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff f8c6 	bl	8002538 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	f023 0107 	bic.w	r1, r3, #7
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68d1      	ldr	r1, [r2, #12]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	430b      	orrs	r3, r1
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af02      	add	r7, sp, #8
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_DMA2D_Start+0x1c>
 800342a:	2302      	movs	r3, #2
 800342c:	e018      	b.n	8003460 <HAL_DMA2D_Start+0x4e>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2202      	movs	r2, #2
 800343a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fa99 	bl	8003980 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d056      	beq.n	8003532 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003484:	f7ff fc90 	bl	8002da8 <HAL_GetTick>
 8003488:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800348a:	e04b      	b.n	8003524 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800349a:	2b00      	cmp	r3, #0
 800349c:	d023      	beq.n	80034e6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	f043 0202 	orr.w	r2, r3, #2
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	f043 0201 	orr.w	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2221      	movs	r2, #33	; 0x21
 80034d0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2204      	movs	r2, #4
 80034d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0a5      	b.n	8003632 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ec:	d01a      	beq.n	8003524 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7ff fc5b 	bl	8002da8 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <HAL_DMA2D_PollForTransfer+0x9c>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10f      	bne.n	8003524 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2203      	movs	r2, #3
 8003514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e086      	b.n	8003632 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ac      	beq.n	800348c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d061      	beq.n	8003618 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003554:	f7ff fc28 	bl	8002da8 <HAL_GetTick>
 8003558:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800355a:	e056      	b.n	800360a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02e      	beq.n	80035cc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	f043 0202 	orr.w	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2229      	movs	r2, #41	; 0x29
 80035b6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2204      	movs	r2, #4
 80035bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e032      	b.n	8003632 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d2:	d01a      	beq.n	800360a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035d4:	f7ff fbe8 	bl	8002da8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <HAL_DMA2D_PollForTransfer+0x182>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e013      	b.n	8003632 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0a1      	beq.n	800355c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2212      	movs	r2, #18
 800361e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d026      	beq.n	80036aa <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d021      	beq.n	80036aa <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2201      	movs	r2, #1
 8003688:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2204      	movs	r2, #4
 800368e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d026      	beq.n	8003702 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d021      	beq.n	8003702 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036cc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2220      	movs	r2, #32
 80036d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036da:	f043 0202 	orr.w	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2204      	movs	r2, #4
 80036e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d026      	beq.n	800375a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003712:	2b00      	cmp	r3, #0
 8003714:	d021      	beq.n	800375a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003724:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2208      	movs	r2, #8
 800372c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003732:	f043 0204 	orr.w	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d013      	beq.n	800378c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2204      	movs	r2, #4
 8003784:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f853 	bl	8003832 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d024      	beq.n	80037e0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01f      	beq.n	80037e0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2202      	movs	r2, #2
 80037b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01f      	beq.n	800382a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01a      	beq.n	800382a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003802:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2210      	movs	r2, #16
 800380a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f80e 	bl	8003846 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_DMA2D_ConfigLayer+0x20>
 8003878:	2302      	movs	r3, #2
 800387a:	e079      	b.n	8003970 <HAL_DMA2D_ConfigLayer+0x114>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	3318      	adds	r3, #24
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4413      	add	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	041b      	lsls	r3, r3, #16
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80038a6:	4b35      	ldr	r3, [pc, #212]	; (800397c <HAL_DMA2D_ConfigLayer+0x120>)
 80038a8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b0a      	cmp	r3, #10
 80038b0:	d003      	beq.n	80038ba <HAL_DMA2D_ConfigLayer+0x5e>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b09      	cmp	r3, #9
 80038b8:	d107      	bne.n	80038ca <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e005      	b.n	80038d6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d120      	bne.n	800391e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	ea02 0103 	and.w	r1, r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b0a      	cmp	r3, #10
 8003904:	d003      	beq.n	800390e <HAL_DMA2D_ConfigLayer+0xb2>
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b09      	cmp	r3, #9
 800390c:	d127      	bne.n	800395e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
 800391c:	e01f      	b.n	800395e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43db      	mvns	r3, r3
 8003928:	ea02 0103 	and.w	r1, r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	430a      	orrs	r2, r1
 8003934:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b0a      	cmp	r3, #10
 8003946:	d003      	beq.n	8003950 <HAL_DMA2D_ConfigLayer+0xf4>
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b09      	cmp	r3, #9
 800394e:	d106      	bne.n	800395e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800395c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	ff03000f 	.word	0xff03000f

08003980 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003980:	b480      	push	{r7}
 8003982:	b08b      	sub	sp, #44	; 0x2c
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	041a      	lsls	r2, r3, #16
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	431a      	orrs	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039b8:	d174      	bne.n	8003aa4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039c0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039c8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039d0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d108      	bne.n	80039f2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
 80039f0:	e053      	b.n	8003a9a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d106      	bne.n	8003a08 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
 8003a06:	e048      	b.n	8003a9a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d111      	bne.n	8003a34 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	0cdb      	lsrs	r3, r3, #19
 8003a14:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	0a9b      	lsrs	r3, r3, #10
 8003a1a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	08db      	lsrs	r3, r3, #3
 8003a20:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	02db      	lsls	r3, r3, #11
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	e032      	b.n	8003a9a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d117      	bne.n	8003a6c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	0fdb      	lsrs	r3, r3, #31
 8003a40:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	0cdb      	lsrs	r3, r3, #19
 8003a46:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	0adb      	lsrs	r3, r3, #11
 8003a4c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	08db      	lsrs	r3, r3, #3
 8003a52:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	029b      	lsls	r3, r3, #10
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	03db      	lsls	r3, r3, #15
 8003a62:	4313      	orrs	r3, r2
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6a:	e016      	b.n	8003a9a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	0f1b      	lsrs	r3, r3, #28
 8003a70:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	0d1b      	lsrs	r3, r3, #20
 8003a76:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	0b1b      	lsrs	r3, r3, #12
 8003a7c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	011a      	lsls	r2, r3, #4
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	031b      	lsls	r3, r3, #12
 8003a92:	4313      	orrs	r3, r2
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003aa2:	e003      	b.n	8003aac <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	60da      	str	r2, [r3, #12]
}
 8003aac:	bf00      	nop
 8003aae:	372c      	adds	r7, #44	; 0x2c
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	e177      	b.n	8003dc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	f040 8166 	bne.w	8003dbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d005      	beq.n	8003b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d130      	bne.n	8003b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	2203      	movs	r2, #3
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b40:	2201      	movs	r2, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 0201 	and.w	r2, r3, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d017      	beq.n	8003ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2203      	movs	r2, #3
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d123      	bne.n	8003bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	08da      	lsrs	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3208      	adds	r2, #8
 8003bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	220f      	movs	r2, #15
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	08da      	lsrs	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3208      	adds	r2, #8
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0203 	and.w	r2, r3, #3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80c0 	beq.w	8003dbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	4b66      	ldr	r3, [pc, #408]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	4a65      	ldr	r2, [pc, #404]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4e:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <HAL_GPIO_Init+0x324>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c5a:	4a61      	ldr	r2, [pc, #388]	; (8003de0 <HAL_GPIO_Init+0x328>)
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	3302      	adds	r3, #2
 8003c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	220f      	movs	r2, #15
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a58      	ldr	r2, [pc, #352]	; (8003de4 <HAL_GPIO_Init+0x32c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d037      	beq.n	8003cf6 <HAL_GPIO_Init+0x23e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a57      	ldr	r2, [pc, #348]	; (8003de8 <HAL_GPIO_Init+0x330>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d031      	beq.n	8003cf2 <HAL_GPIO_Init+0x23a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a56      	ldr	r2, [pc, #344]	; (8003dec <HAL_GPIO_Init+0x334>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02b      	beq.n	8003cee <HAL_GPIO_Init+0x236>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a55      	ldr	r2, [pc, #340]	; (8003df0 <HAL_GPIO_Init+0x338>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d025      	beq.n	8003cea <HAL_GPIO_Init+0x232>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a54      	ldr	r2, [pc, #336]	; (8003df4 <HAL_GPIO_Init+0x33c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01f      	beq.n	8003ce6 <HAL_GPIO_Init+0x22e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a53      	ldr	r2, [pc, #332]	; (8003df8 <HAL_GPIO_Init+0x340>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d019      	beq.n	8003ce2 <HAL_GPIO_Init+0x22a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a52      	ldr	r2, [pc, #328]	; (8003dfc <HAL_GPIO_Init+0x344>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_GPIO_Init+0x226>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a51      	ldr	r2, [pc, #324]	; (8003e00 <HAL_GPIO_Init+0x348>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00d      	beq.n	8003cda <HAL_GPIO_Init+0x222>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a50      	ldr	r2, [pc, #320]	; (8003e04 <HAL_GPIO_Init+0x34c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <HAL_GPIO_Init+0x21e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <HAL_GPIO_Init+0x350>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <HAL_GPIO_Init+0x21a>
 8003cce:	2309      	movs	r3, #9
 8003cd0:	e012      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	e010      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	e00e      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003cda:	2307      	movs	r3, #7
 8003cdc:	e00c      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003cde:	2306      	movs	r3, #6
 8003ce0:	e00a      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	e008      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	e006      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003cea:	2303      	movs	r3, #3
 8003cec:	e004      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e002      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_GPIO_Init+0x240>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f002 0203 	and.w	r2, r2, #3
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	4093      	lsls	r3, r2
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d08:	4935      	ldr	r1, [pc, #212]	; (8003de0 <HAL_GPIO_Init+0x328>)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	3302      	adds	r3, #2
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d16:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <HAL_GPIO_Init+0x354>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d3a:	4a34      	ldr	r2, [pc, #208]	; (8003e0c <HAL_GPIO_Init+0x354>)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d40:	4b32      	ldr	r3, [pc, #200]	; (8003e0c <HAL_GPIO_Init+0x354>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d64:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <HAL_GPIO_Init+0x354>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d6a:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <HAL_GPIO_Init+0x354>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d8e:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <HAL_GPIO_Init+0x354>)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_GPIO_Init+0x354>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003db8:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <HAL_GPIO_Init+0x354>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	f67f ae84 	bls.w	8003ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3724      	adds	r7, #36	; 0x24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40013800 	.word	0x40013800
 8003de4:	40020000 	.word	0x40020000
 8003de8:	40020400 	.word	0x40020400
 8003dec:	40020800 	.word	0x40020800
 8003df0:	40020c00 	.word	0x40020c00
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40021400 	.word	0x40021400
 8003dfc:	40021800 	.word	0x40021800
 8003e00:	40021c00 	.word	0x40021c00
 8003e04:	40022000 	.word	0x40022000
 8003e08:	40022400 	.word	0x40022400
 8003e0c:	40013c00 	.word	0x40013c00

08003e10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e0d9      	b.n	8003fe0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	f040 80c9 	bne.w	8003fda <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e48:	4a6b      	ldr	r2, [pc, #428]	; (8003ff8 <HAL_GPIO_DeInit+0x1e8>)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	3302      	adds	r3, #2
 8003e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e54:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	220f      	movs	r2, #15
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a63      	ldr	r2, [pc, #396]	; (8003ffc <HAL_GPIO_DeInit+0x1ec>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d037      	beq.n	8003ee2 <HAL_GPIO_DeInit+0xd2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a62      	ldr	r2, [pc, #392]	; (8004000 <HAL_GPIO_DeInit+0x1f0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d031      	beq.n	8003ede <HAL_GPIO_DeInit+0xce>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a61      	ldr	r2, [pc, #388]	; (8004004 <HAL_GPIO_DeInit+0x1f4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02b      	beq.n	8003eda <HAL_GPIO_DeInit+0xca>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a60      	ldr	r2, [pc, #384]	; (8004008 <HAL_GPIO_DeInit+0x1f8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d025      	beq.n	8003ed6 <HAL_GPIO_DeInit+0xc6>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a5f      	ldr	r2, [pc, #380]	; (800400c <HAL_GPIO_DeInit+0x1fc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01f      	beq.n	8003ed2 <HAL_GPIO_DeInit+0xc2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a5e      	ldr	r2, [pc, #376]	; (8004010 <HAL_GPIO_DeInit+0x200>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d019      	beq.n	8003ece <HAL_GPIO_DeInit+0xbe>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a5d      	ldr	r2, [pc, #372]	; (8004014 <HAL_GPIO_DeInit+0x204>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_GPIO_DeInit+0xba>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a5c      	ldr	r2, [pc, #368]	; (8004018 <HAL_GPIO_DeInit+0x208>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_GPIO_DeInit+0xb6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a5b      	ldr	r2, [pc, #364]	; (800401c <HAL_GPIO_DeInit+0x20c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <HAL_GPIO_DeInit+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a5a      	ldr	r2, [pc, #360]	; (8004020 <HAL_GPIO_DeInit+0x210>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_GPIO_DeInit+0xae>
 8003eba:	2309      	movs	r3, #9
 8003ebc:	e012      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	e010      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	e00e      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003ec6:	2307      	movs	r3, #7
 8003ec8:	e00c      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003eca:	2306      	movs	r3, #6
 8003ecc:	e00a      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003ece:	2305      	movs	r3, #5
 8003ed0:	e008      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	e006      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e004      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_DeInit+0xd4>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	f002 0203 	and.w	r2, r2, #3
 8003eea:	0092      	lsls	r2, r2, #2
 8003eec:	4093      	lsls	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d132      	bne.n	8003f5a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ef4:	4b4b      	ldr	r3, [pc, #300]	; (8004024 <HAL_GPIO_DeInit+0x214>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	4949      	ldr	r1, [pc, #292]	; (8004024 <HAL_GPIO_DeInit+0x214>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f02:	4b48      	ldr	r3, [pc, #288]	; (8004024 <HAL_GPIO_DeInit+0x214>)
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	4946      	ldr	r1, [pc, #280]	; (8004024 <HAL_GPIO_DeInit+0x214>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f10:	4b44      	ldr	r3, [pc, #272]	; (8004024 <HAL_GPIO_DeInit+0x214>)
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	4942      	ldr	r1, [pc, #264]	; (8004024 <HAL_GPIO_DeInit+0x214>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <HAL_GPIO_DeInit+0x214>)
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	493f      	ldr	r1, [pc, #252]	; (8004024 <HAL_GPIO_DeInit+0x214>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	220f      	movs	r2, #15
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f3c:	4a2e      	ldr	r2, [pc, #184]	; (8003ff8 <HAL_GPIO_DeInit+0x1e8>)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	3302      	adds	r3, #2
 8003f44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	482a      	ldr	r0, [pc, #168]	; (8003ff8 <HAL_GPIO_DeInit+0x1e8>)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	400a      	ands	r2, r1
 8003f54:	3302      	adds	r3, #2
 8003f56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2103      	movs	r1, #3
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	220f      	movs	r2, #15
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	08d2      	lsrs	r2, r2, #3
 8003f90:	4019      	ands	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3208      	adds	r2, #8
 8003f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	2103      	movs	r1, #3
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	f67f af22 	bls.w	8003e2c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40013800 	.word	0x40013800
 8003ffc:	40020000 	.word	0x40020000
 8004000:	40020400 	.word	0x40020400
 8004004:	40020800 	.word	0x40020800
 8004008:	40020c00 	.word	0x40020c00
 800400c:	40021000 	.word	0x40021000
 8004010:	40021400 	.word	0x40021400
 8004014:	40021800 	.word	0x40021800
 8004018:	40021c00 	.word	0x40021c00
 800401c:	40022000 	.word	0x40022000
 8004020:	40022400 	.word	0x40022400
 8004024:	40013c00 	.word	0x40013c00

08004028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
 8004034:	4613      	mov	r3, r2
 8004036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004038:	787b      	ldrb	r3, [r7, #1]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004044:	e003      	b.n	800404e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004046:	887b      	ldrh	r3, [r7, #2]
 8004048:	041a      	lsls	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	619a      	str	r2, [r3, #24]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f004 fd42 	bl	8008afa <USB_GetMode>
 8004076:	4603      	mov	r3, r0
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 80f6 	bne.w	800426a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f004 fd26 	bl	8008ad4 <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80ec 	beq.w	8004268 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f004 fd1d 	bl	8008ad4 <USB_ReadInterrupts>
 800409a:	4603      	mov	r3, r0
 800409c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a4:	d104      	bne.n	80040b0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80040ae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f004 fd0d 	bl	8008ad4 <USB_ReadInterrupts>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040c4:	d104      	bne.n	80040d0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040ce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f004 fcfd 	bl	8008ad4 <USB_ReadInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040e4:	d104      	bne.n	80040f0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80040ee:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f004 fced 	bl	8008ad4 <USB_ReadInterrupts>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d103      	bne.n	800410c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2202      	movs	r2, #2
 800410a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f004 fcdf 	bl	8008ad4 <USB_ReadInterrupts>
 8004116:	4603      	mov	r3, r0
 8004118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004120:	d11c      	bne.n	800415c <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800412a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10f      	bne.n	800415c <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800413c:	2110      	movs	r1, #16
 800413e:	6938      	ldr	r0, [r7, #16]
 8004140:	f004 fc2c 	bl	800899c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004144:	6938      	ldr	r0, [r7, #16]
 8004146:	f004 fc4d 	bl	80089e4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f004 fce0 	bl	8008b16 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f006 f82c 	bl	800a1b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f004 fcb7 	bl	8008ad4 <USB_ReadInterrupts>
 8004166:	4603      	mov	r3, r0
 8004168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004170:	d102      	bne.n	8004178 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f001 f98e 	bl	8005494 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f004 fca9 	bl	8008ad4 <USB_ReadInterrupts>
 8004182:	4603      	mov	r3, r0
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b08      	cmp	r3, #8
 800418a:	d106      	bne.n	800419a <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f005 fff5 	bl	800a17c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2208      	movs	r2, #8
 8004198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f004 fc98 	bl	8008ad4 <USB_ReadInterrupts>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d101      	bne.n	80041b2 <HAL_HCD_IRQHandler+0x158>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_HCD_IRQHandler+0x15a>
 80041b2:	2300      	movs	r3, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d012      	beq.n	80041de <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0210 	bic.w	r2, r2, #16
 80041c6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f001 f891 	bl	80052f0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0210 	orr.w	r2, r2, #16
 80041dc:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 fc76 	bl	8008ad4 <USB_ReadInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041f2:	d13a      	bne.n	800426a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f004 fcc6 	bl	8008b8a <USB_HC_ReadInterrupt>
 80041fe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e025      	b.n	8004252 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	fa22 f303 	lsr.w	r3, r2, r3
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d018      	beq.n	800424c <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800422c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004230:	d106      	bne.n	8004240 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f836 	bl	80042aa <HCD_HC_IN_IRQHandler>
 800423e:	e005      	b.n	800424c <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fc51 	bl	8004aee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	3301      	adds	r3, #1
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	429a      	cmp	r2, r3
 800425a:	d3d4      	bcc.n	8004206 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004264:	615a      	str	r2, [r3, #20]
 8004266:	e000      	b.n	800426a <HAL_HCD_IRQHandler+0x210>
      return;
 8004268:	bf00      	nop
    }
  }
}
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_HCD_Stop+0x16>
 8004282:	2302      	movs	r3, #2
 8004284:	e00d      	b.n	80042a2 <HAL_HCD_Stop+0x32>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f004 fda6 	bl	8008de4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d119      	bne.n	800430e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e6:	461a      	mov	r2, r3
 80042e8:	2304      	movs	r3, #4
 80042ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	0151      	lsls	r1, r2, #5
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	440a      	add	r2, r1
 8004302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004306:	f043 0302 	orr.w	r3, r3, #2
 800430a:	60d3      	str	r3, [r2, #12]
 800430c:	e101      	b.n	8004512 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004324:	d12b      	bne.n	800437e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004332:	461a      	mov	r2, r3
 8004334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004338:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	3361      	adds	r3, #97	; 0x61
 8004348:	2207      	movs	r2, #7
 800434a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4413      	add	r3, r2
 8004354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	0151      	lsls	r1, r2, #5
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	440a      	add	r2, r1
 8004362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004366:	f043 0302 	orr.w	r3, r3, #2
 800436a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f004 fc18 	bl	8008bac <USB_HC_Halt>
 800437c:	e0c9      	b.n	8004512 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b20      	cmp	r3, #32
 8004392:	d109      	bne.n	80043a8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a0:	461a      	mov	r2, r3
 80043a2:	2320      	movs	r3, #32
 80043a4:	6093      	str	r3, [r2, #8]
 80043a6:	e0b4      	b.n	8004512 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d133      	bne.n	8004426 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043d8:	f043 0302 	orr.w	r3, r3, #2
 80043dc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	3361      	adds	r3, #97	; 0x61
 80043ec:	2205      	movs	r2, #5
 80043ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	461a      	mov	r2, r3
 80043fe:	2310      	movs	r3, #16
 8004400:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	461a      	mov	r2, r3
 8004410:	2308      	movs	r3, #8
 8004412:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f004 fbc4 	bl	8008bac <USB_HC_Halt>
 8004424:	e075      	b.n	8004512 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4413      	add	r3, r2
 800442e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443c:	d134      	bne.n	80044a8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	0151      	lsls	r1, r2, #5
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	440a      	add	r2, r1
 8004454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	212c      	movs	r1, #44	; 0x2c
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	4413      	add	r3, r2
 800446a:	3361      	adds	r3, #97	; 0x61
 800446c:	2208      	movs	r2, #8
 800446e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447c:	461a      	mov	r2, r3
 800447e:	2310      	movs	r3, #16
 8004480:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	461a      	mov	r2, r3
 8004490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004494:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f004 fb83 	bl	8008bac <USB_HC_Halt>
 80044a6:	e034      	b.n	8004512 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b80      	cmp	r3, #128	; 0x80
 80044bc:	d129      	bne.n	8004512 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	3361      	adds	r3, #97	; 0x61
 80044ec:	2206      	movs	r2, #6
 80044ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f004 fb56 	bl	8008bac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450c:	461a      	mov	r2, r3
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4413      	add	r3, r2
 800451a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004528:	d122      	bne.n	8004570 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4413      	add	r3, r2
 8004532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	440a      	add	r2, r1
 8004540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	4611      	mov	r1, r2
 8004554:	4618      	mov	r0, r3
 8004556:	f004 fb29 	bl	8008bac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	461a      	mov	r2, r3
 8004568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800456c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800456e:	e2ba      	b.n	8004ae6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	f040 811b 	bne.w	80047be <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d019      	beq.n	80045c4 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3348      	adds	r3, #72	; 0x48
 800459e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	0159      	lsls	r1, r3, #5
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	440b      	add	r3, r1
 80045a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	202c      	movs	r0, #44	; 0x2c
 80045ba:	fb00 f303 	mul.w	r3, r0, r3
 80045be:	440b      	add	r3, r1
 80045c0:	3350      	adds	r3, #80	; 0x50
 80045c2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3361      	adds	r3, #97	; 0x61
 80045d2:	2201      	movs	r2, #1
 80045d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	212c      	movs	r1, #44	; 0x2c
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	335c      	adds	r3, #92	; 0x5c
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	461a      	mov	r2, r3
 80045f6:	2301      	movs	r3, #1
 80045f8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	212c      	movs	r1, #44	; 0x2c
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	4413      	add	r3, r2
 8004606:	333f      	adds	r3, #63	; 0x3f
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	212c      	movs	r1, #44	; 0x2c
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	4413      	add	r3, r2
 800461a:	333f      	adds	r3, #63	; 0x3f
 800461c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800461e:	2b02      	cmp	r3, #2
 8004620:	d121      	bne.n	8004666 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	440a      	add	r2, r1
 8004638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f004 faad 	bl	8008bac <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465e:	461a      	mov	r2, r3
 8004660:	2310      	movs	r3, #16
 8004662:	6093      	str	r3, [r2, #8]
 8004664:	e066      	b.n	8004734 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	212c      	movs	r1, #44	; 0x2c
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	333f      	adds	r3, #63	; 0x3f
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d127      	bne.n	80046ca <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	440a      	add	r2, r1
 8004690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004698:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	212c      	movs	r1, #44	; 0x2c
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	3360      	adds	r3, #96	; 0x60
 80046a8:	2201      	movs	r2, #1
 80046aa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	b2d9      	uxtb	r1, r3
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	202c      	movs	r0, #44	; 0x2c
 80046b6:	fb00 f303 	mul.w	r3, r0, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	3360      	adds	r3, #96	; 0x60
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f005 fd84 	bl	800a1d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046c8:	e034      	b.n	8004734 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	333f      	adds	r3, #63	; 0x3f
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d12a      	bne.n	8004734 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	3360      	adds	r3, #96	; 0x60
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	212c      	movs	r1, #44	; 0x2c
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	3354      	adds	r3, #84	; 0x54
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f083 0301 	eor.w	r3, r3, #1
 8004704:	b2d8      	uxtb	r0, r3
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	212c      	movs	r1, #44	; 0x2c
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	4413      	add	r3, r2
 8004712:	3354      	adds	r3, #84	; 0x54
 8004714:	4602      	mov	r2, r0
 8004716:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	b2d9      	uxtb	r1, r3
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	202c      	movs	r0, #44	; 0x2c
 8004722:	fb00 f303 	mul.w	r3, r0, r3
 8004726:	4413      	add	r3, r2
 8004728:	3360      	adds	r3, #96	; 0x60
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f005 fd4e 	bl	800a1d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d12b      	bne.n	8004794 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	3348      	adds	r3, #72	; 0x48
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	202c      	movs	r0, #44	; 0x2c
 8004752:	fb00 f202 	mul.w	r2, r0, r2
 8004756:	440a      	add	r2, r1
 8004758:	3240      	adds	r2, #64	; 0x40
 800475a:	8812      	ldrh	r2, [r2, #0]
 800475c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 81be 	beq.w	8004ae6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	212c      	movs	r1, #44	; 0x2c
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	4413      	add	r3, r2
 8004776:	3354      	adds	r3, #84	; 0x54
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f083 0301 	eor.w	r3, r3, #1
 800477e:	b2d8      	uxtb	r0, r3
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	212c      	movs	r1, #44	; 0x2c
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	3354      	adds	r3, #84	; 0x54
 800478e:	4602      	mov	r2, r0
 8004790:	701a      	strb	r2, [r3, #0]
}
 8004792:	e1a8      	b.n	8004ae6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	212c      	movs	r1, #44	; 0x2c
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	4413      	add	r3, r2
 80047a0:	3354      	adds	r3, #84	; 0x54
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f083 0301 	eor.w	r3, r3, #1
 80047a8:	b2d8      	uxtb	r0, r3
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	212c      	movs	r1, #44	; 0x2c
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	3354      	adds	r3, #84	; 0x54
 80047b8:	4602      	mov	r2, r0
 80047ba:	701a      	strb	r2, [r3, #0]
}
 80047bc:	e193      	b.n	8004ae6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	f040 8106 	bne.w	80049e2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047f0:	f023 0302 	bic.w	r3, r3, #2
 80047f4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	212c      	movs	r1, #44	; 0x2c
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	3361      	adds	r3, #97	; 0x61
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d109      	bne.n	800481e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	212c      	movs	r1, #44	; 0x2c
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	3360      	adds	r3, #96	; 0x60
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	e0c9      	b.n	80049b2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	212c      	movs	r1, #44	; 0x2c
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	3361      	adds	r3, #97	; 0x61
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b05      	cmp	r3, #5
 8004830:	d109      	bne.n	8004846 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	212c      	movs	r1, #44	; 0x2c
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	3360      	adds	r3, #96	; 0x60
 8004840:	2205      	movs	r2, #5
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e0b5      	b.n	80049b2 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	212c      	movs	r1, #44	; 0x2c
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	3361      	adds	r3, #97	; 0x61
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b06      	cmp	r3, #6
 8004858:	d009      	beq.n	800486e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	212c      	movs	r1, #44	; 0x2c
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	4413      	add	r3, r2
 8004866:	3361      	adds	r3, #97	; 0x61
 8004868:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800486a:	2b08      	cmp	r3, #8
 800486c:	d150      	bne.n	8004910 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	212c      	movs	r1, #44	; 0x2c
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	4413      	add	r3, r2
 800487a:	335c      	adds	r3, #92	; 0x5c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	202c      	movs	r0, #44	; 0x2c
 8004886:	fb00 f303 	mul.w	r3, r0, r3
 800488a:	440b      	add	r3, r1
 800488c:	335c      	adds	r3, #92	; 0x5c
 800488e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	335c      	adds	r3, #92	; 0x5c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d912      	bls.n	80048ca <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	335c      	adds	r3, #92	; 0x5c
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	212c      	movs	r1, #44	; 0x2c
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	3360      	adds	r3, #96	; 0x60
 80048c4:	2204      	movs	r2, #4
 80048c6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048c8:	e073      	b.n	80049b2 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	212c      	movs	r1, #44	; 0x2c
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	4413      	add	r3, r2
 80048d6:	3360      	adds	r3, #96	; 0x60
 80048d8:	2202      	movs	r2, #2
 80048da:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048f2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048fa:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004908:	461a      	mov	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800490e:	e050      	b.n	80049b2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	212c      	movs	r1, #44	; 0x2c
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	4413      	add	r3, r2
 800491c:	3361      	adds	r3, #97	; 0x61
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d122      	bne.n	800496a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	3360      	adds	r3, #96	; 0x60
 8004932:	2202      	movs	r2, #2
 8004934:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4413      	add	r3, r2
 800493e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800494c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004954:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004962:	461a      	mov	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	e023      	b.n	80049b2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	212c      	movs	r1, #44	; 0x2c
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	4413      	add	r3, r2
 8004976:	3361      	adds	r3, #97	; 0x61
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b07      	cmp	r3, #7
 800497c:	d119      	bne.n	80049b2 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	335c      	adds	r3, #92	; 0x5c
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	202c      	movs	r0, #44	; 0x2c
 8004996:	fb00 f303 	mul.w	r3, r0, r3
 800499a:	440b      	add	r3, r1
 800499c:	335c      	adds	r3, #92	; 0x5c
 800499e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	212c      	movs	r1, #44	; 0x2c
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	3360      	adds	r3, #96	; 0x60
 80049ae:	2204      	movs	r2, #4
 80049b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049be:	461a      	mov	r2, r3
 80049c0:	2302      	movs	r3, #2
 80049c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	b2d9      	uxtb	r1, r3
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	202c      	movs	r0, #44	; 0x2c
 80049ce:	fb00 f303 	mul.w	r3, r0, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	3360      	adds	r3, #96	; 0x60
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f005 fbf8 	bl	800a1d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80049e0:	e081      	b.n	8004ae6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d176      	bne.n	8004ae6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	212c      	movs	r1, #44	; 0x2c
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	333f      	adds	r3, #63	; 0x3f
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d121      	bne.n	8004a50 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	212c      	movs	r1, #44	; 0x2c
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	335c      	adds	r3, #92	; 0x5c
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a38:	f043 0302 	orr.w	r3, r3, #2
 8004a3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f004 f8af 	bl	8008bac <USB_HC_Halt>
 8004a4e:	e041      	b.n	8004ad4 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	212c      	movs	r1, #44	; 0x2c
 8004a56:	fb01 f303 	mul.w	r3, r1, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	333f      	adds	r3, #63	; 0x3f
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d009      	beq.n	8004a78 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	333f      	adds	r3, #63	; 0x3f
 8004a72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d12d      	bne.n	8004ad4 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	212c      	movs	r1, #44	; 0x2c
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	335c      	adds	r3, #92	; 0x5c
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d120      	bne.n	8004ad4 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3361      	adds	r3, #97	; 0x61
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004abe:	f043 0302 	orr.w	r3, r3, #2
 8004ac2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	4611      	mov	r1, r2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f004 f86c 	bl	8008bac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	6093      	str	r3, [r2, #8]
}
 8004ae6:	bf00      	nop
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b088      	sub	sp, #32
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d119      	bne.n	8004b52 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b4a:	f043 0302 	orr.w	r3, r3, #2
 8004b4e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004b50:	e3ca      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d13e      	bne.n	8004be6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b74:	461a      	mov	r2, r3
 8004b76:	2320      	movs	r3, #32
 8004b78:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	212c      	movs	r1, #44	; 0x2c
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	4413      	add	r3, r2
 8004b86:	333d      	adds	r3, #61	; 0x3d
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	f040 83ac 	bne.w	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	212c      	movs	r1, #44	; 0x2c
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	333d      	adds	r3, #61	; 0x3d
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	3360      	adds	r3, #96	; 0x60
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bce:	f043 0302 	orr.w	r3, r3, #2
 8004bd2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f003 ffe4 	bl	8008bac <USB_HC_Halt>
}
 8004be4:	e380      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfc:	d122      	bne.n	8004c44 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f003 ffbf 	bl	8008bac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c40:	6093      	str	r3, [r2, #8]
}
 8004c42:	e351      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d150      	bne.n	8004cfc <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	335c      	adds	r3, #92	; 0x5c
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d111      	bne.n	8004ca6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	333d      	adds	r3, #61	; 0x3d
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2340      	movs	r3, #64	; 0x40
 8004ca4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f003 ff6b 	bl	8008bac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	212c      	movs	r1, #44	; 0x2c
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3361      	adds	r3, #97	; 0x61
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	701a      	strb	r2, [r3, #0]
}
 8004cfa:	e2f5      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d13c      	bne.n	8004d8c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	212c      	movs	r1, #44	; 0x2c
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3361      	adds	r3, #97	; 0x61
 8004d20:	2204      	movs	r2, #4
 8004d22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	212c      	movs	r1, #44	; 0x2c
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	333d      	adds	r3, #61	; 0x3d
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	212c      	movs	r1, #44	; 0x2c
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	4413      	add	r3, r2
 8004d42:	335c      	adds	r3, #92	; 0x5c
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f003 ff1a 	bl	8008bac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d84:	461a      	mov	r2, r3
 8004d86:	2340      	movs	r3, #64	; 0x40
 8004d88:	6093      	str	r3, [r2, #8]
}
 8004d8a:	e2ad      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d12a      	bne.n	8004df8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dae:	461a      	mov	r2, r3
 8004db0:	2308      	movs	r3, #8
 8004db2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dce:	f043 0302 	orr.w	r3, r3, #2
 8004dd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f003 fee4 	bl	8008bac <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	212c      	movs	r1, #44	; 0x2c
 8004dea:	fb01 f303 	mul.w	r3, r1, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	3361      	adds	r3, #97	; 0x61
 8004df2:	2205      	movs	r2, #5
 8004df4:	701a      	strb	r2, [r3, #0]
}
 8004df6:	e277      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d150      	bne.n	8004eb0 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	212c      	movs	r1, #44	; 0x2c
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	335c      	adds	r3, #92	; 0x5c
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3361      	adds	r3, #97	; 0x61
 8004e2e:	2203      	movs	r2, #3
 8004e30:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	212c      	movs	r1, #44	; 0x2c
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	333d      	adds	r3, #61	; 0x3d
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d112      	bne.n	8004e6c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	212c      	movs	r1, #44	; 0x2c
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	4413      	add	r3, r2
 8004e52:	333c      	adds	r3, #60	; 0x3c
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d108      	bne.n	8004e6c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	212c      	movs	r1, #44	; 0x2c
 8004e60:	fb01 f303 	mul.w	r3, r1, r3
 8004e64:	4413      	add	r3, r2
 8004e66:	333d      	adds	r3, #61	; 0x3d
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e86:	f043 0302 	orr.w	r3, r3, #2
 8004e8a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	4611      	mov	r1, r2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f003 fe88 	bl	8008bac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2310      	movs	r3, #16
 8004eac:	6093      	str	r3, [r2, #8]
}
 8004eae:	e21b      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d174      	bne.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d121      	bne.n	8004f12 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	212c      	movs	r1, #44	; 0x2c
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	3361      	adds	r3, #97	; 0x61
 8004edc:	2206      	movs	r2, #6
 8004ede:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004efa:	f043 0302 	orr.w	r3, r3, #2
 8004efe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f003 fe4e 	bl	8008bac <USB_HC_Halt>
 8004f10:	e044      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	212c      	movs	r1, #44	; 0x2c
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	335c      	adds	r3, #92	; 0x5c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	202c      	movs	r0, #44	; 0x2c
 8004f2a:	fb00 f303 	mul.w	r3, r0, r3
 8004f2e:	440b      	add	r3, r1
 8004f30:	335c      	adds	r3, #92	; 0x5c
 8004f32:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	212c      	movs	r1, #44	; 0x2c
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	335c      	adds	r3, #92	; 0x5c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d920      	bls.n	8004f8a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	212c      	movs	r1, #44	; 0x2c
 8004f4e:	fb01 f303 	mul.w	r3, r1, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	335c      	adds	r3, #92	; 0x5c
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	3360      	adds	r3, #96	; 0x60
 8004f68:	2204      	movs	r2, #4
 8004f6a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	b2d9      	uxtb	r1, r3
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	202c      	movs	r0, #44	; 0x2c
 8004f76:	fb00 f303 	mul.w	r3, r0, r3
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3360      	adds	r3, #96	; 0x60
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f005 f924 	bl	800a1d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f88:	e008      	b.n	8004f9c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	212c      	movs	r1, #44	; 0x2c
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	3360      	adds	r3, #96	; 0x60
 8004f98:	2202      	movs	r2, #2
 8004f9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2380      	movs	r3, #128	; 0x80
 8004fac:	6093      	str	r3, [r2, #8]
}
 8004fae:	e19b      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d134      	bne.n	8005032 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fe2:	f043 0302 	orr.w	r3, r3, #2
 8004fe6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f003 fdda 	bl	8008bac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005004:	461a      	mov	r2, r3
 8005006:	2310      	movs	r3, #16
 8005008:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	4413      	add	r3, r2
 8005012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005016:	461a      	mov	r2, r3
 8005018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800501c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	212c      	movs	r1, #44	; 0x2c
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	4413      	add	r3, r2
 800502a:	3361      	adds	r3, #97	; 0x61
 800502c:	2208      	movs	r2, #8
 800502e:	701a      	strb	r2, [r3, #0]
}
 8005030:	e15a      	b.n	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b02      	cmp	r3, #2
 8005046:	f040 814f 	bne.w	80052e8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	4413      	add	r3, r2
 8005052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	440a      	add	r2, r1
 8005060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005064:	f023 0302 	bic.w	r3, r3, #2
 8005068:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	212c      	movs	r1, #44	; 0x2c
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	4413      	add	r3, r2
 8005076:	3361      	adds	r3, #97	; 0x61
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d17d      	bne.n	800517a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	212c      	movs	r1, #44	; 0x2c
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	4413      	add	r3, r2
 800508a:	3360      	adds	r3, #96	; 0x60
 800508c:	2201      	movs	r2, #1
 800508e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	212c      	movs	r1, #44	; 0x2c
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	4413      	add	r3, r2
 800509c:	333f      	adds	r3, #63	; 0x3f
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d00a      	beq.n	80050ba <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	212c      	movs	r1, #44	; 0x2c
 80050aa:	fb01 f303 	mul.w	r3, r1, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	333f      	adds	r3, #63	; 0x3f
 80050b2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	f040 8100 	bne.w	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d113      	bne.n	80050ea <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	212c      	movs	r1, #44	; 0x2c
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	4413      	add	r3, r2
 80050ce:	3355      	adds	r3, #85	; 0x55
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	f083 0301 	eor.w	r3, r3, #1
 80050d6:	b2d8      	uxtb	r0, r3
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	212c      	movs	r1, #44	; 0x2c
 80050de:	fb01 f303 	mul.w	r3, r1, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	3355      	adds	r3, #85	; 0x55
 80050e6:	4602      	mov	r2, r0
 80050e8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	f040 80e3 	bne.w	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	212c      	movs	r1, #44	; 0x2c
 80050fa:	fb01 f303 	mul.w	r3, r1, r3
 80050fe:	4413      	add	r3, r2
 8005100:	334c      	adds	r3, #76	; 0x4c
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80d8 	beq.w	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	212c      	movs	r1, #44	; 0x2c
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	4413      	add	r3, r2
 8005116:	334c      	adds	r3, #76	; 0x4c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	202c      	movs	r0, #44	; 0x2c
 8005120:	fb00 f202 	mul.w	r2, r0, r2
 8005124:	440a      	add	r2, r1
 8005126:	3240      	adds	r2, #64	; 0x40
 8005128:	8812      	ldrh	r2, [r2, #0]
 800512a:	4413      	add	r3, r2
 800512c:	3b01      	subs	r3, #1
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	202c      	movs	r0, #44	; 0x2c
 8005134:	fb00 f202 	mul.w	r2, r0, r2
 8005138:	440a      	add	r2, r1
 800513a:	3240      	adds	r2, #64	; 0x40
 800513c:	8812      	ldrh	r2, [r2, #0]
 800513e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80b5 	beq.w	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	212c      	movs	r1, #44	; 0x2c
 8005156:	fb01 f303 	mul.w	r3, r1, r3
 800515a:	4413      	add	r3, r2
 800515c:	3355      	adds	r3, #85	; 0x55
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	f083 0301 	eor.w	r3, r3, #1
 8005164:	b2d8      	uxtb	r0, r3
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	212c      	movs	r1, #44	; 0x2c
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	4413      	add	r3, r2
 8005172:	3355      	adds	r3, #85	; 0x55
 8005174:	4602      	mov	r2, r0
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e09f      	b.n	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	212c      	movs	r1, #44	; 0x2c
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	4413      	add	r3, r2
 8005186:	3361      	adds	r3, #97	; 0x61
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d109      	bne.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	212c      	movs	r1, #44	; 0x2c
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	3360      	adds	r3, #96	; 0x60
 800519c:	2202      	movs	r2, #2
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	e08b      	b.n	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	212c      	movs	r1, #44	; 0x2c
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	4413      	add	r3, r2
 80051ae:	3361      	adds	r3, #97	; 0x61
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d109      	bne.n	80051ca <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	212c      	movs	r1, #44	; 0x2c
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	4413      	add	r3, r2
 80051c2:	3360      	adds	r3, #96	; 0x60
 80051c4:	2202      	movs	r2, #2
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e077      	b.n	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	212c      	movs	r1, #44	; 0x2c
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	4413      	add	r3, r2
 80051d6:	3361      	adds	r3, #97	; 0x61
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d109      	bne.n	80051f2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	212c      	movs	r1, #44	; 0x2c
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	4413      	add	r3, r2
 80051ea:	3360      	adds	r3, #96	; 0x60
 80051ec:	2205      	movs	r2, #5
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e063      	b.n	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	212c      	movs	r1, #44	; 0x2c
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	4413      	add	r3, r2
 80051fe:	3361      	adds	r3, #97	; 0x61
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b06      	cmp	r3, #6
 8005204:	d009      	beq.n	800521a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	212c      	movs	r1, #44	; 0x2c
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	4413      	add	r3, r2
 8005212:	3361      	adds	r3, #97	; 0x61
 8005214:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005216:	2b08      	cmp	r3, #8
 8005218:	d14f      	bne.n	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	212c      	movs	r1, #44	; 0x2c
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	4413      	add	r3, r2
 8005226:	335c      	adds	r3, #92	; 0x5c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	202c      	movs	r0, #44	; 0x2c
 8005232:	fb00 f303 	mul.w	r3, r0, r3
 8005236:	440b      	add	r3, r1
 8005238:	335c      	adds	r3, #92	; 0x5c
 800523a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	212c      	movs	r1, #44	; 0x2c
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	335c      	adds	r3, #92	; 0x5c
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d912      	bls.n	8005276 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	212c      	movs	r1, #44	; 0x2c
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	4413      	add	r3, r2
 800525c:	335c      	adds	r3, #92	; 0x5c
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	212c      	movs	r1, #44	; 0x2c
 8005268:	fb01 f303 	mul.w	r3, r1, r3
 800526c:	4413      	add	r3, r2
 800526e:	3360      	adds	r3, #96	; 0x60
 8005270:	2204      	movs	r2, #4
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e021      	b.n	80052ba <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	212c      	movs	r1, #44	; 0x2c
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	4413      	add	r3, r2
 8005282:	3360      	adds	r3, #96	; 0x60
 8005284:	2202      	movs	r2, #2
 8005286:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	4413      	add	r3, r2
 8005290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800529e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	461a      	mov	r2, r3
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c6:	461a      	mov	r2, r3
 80052c8:	2302      	movs	r3, #2
 80052ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	b2d9      	uxtb	r1, r3
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	202c      	movs	r0, #44	; 0x2c
 80052d6:	fb00 f303 	mul.w	r3, r0, r3
 80052da:	4413      	add	r3, r2
 80052dc:	3360      	adds	r3, #96	; 0x60
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f004 ff74 	bl	800a1d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80052e8:	bf00      	nop
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	; 0x28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	0c5b      	lsrs	r3, r3, #17
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005324:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d004      	beq.n	8005336 <HCD_RXQLVL_IRQHandler+0x46>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b05      	cmp	r3, #5
 8005330:	f000 80a9 	beq.w	8005486 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005334:	e0aa      	b.n	800548c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80a6 	beq.w	800548a <HCD_RXQLVL_IRQHandler+0x19a>
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	212c      	movs	r1, #44	; 0x2c
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	4413      	add	r3, r2
 800534a:	3344      	adds	r3, #68	; 0x44
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 809b 	beq.w	800548a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	212c      	movs	r1, #44	; 0x2c
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	4413      	add	r3, r2
 8005360:	3350      	adds	r3, #80	; 0x50
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	441a      	add	r2, r3
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	202c      	movs	r0, #44	; 0x2c
 800536e:	fb00 f303 	mul.w	r3, r0, r3
 8005372:	440b      	add	r3, r1
 8005374:	334c      	adds	r3, #76	; 0x4c
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d87a      	bhi.n	8005472 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	212c      	movs	r1, #44	; 0x2c
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	4413      	add	r3, r2
 800538c:	3344      	adds	r3, #68	; 0x44
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	b292      	uxth	r2, r2
 8005394:	4619      	mov	r1, r3
 8005396:	f003 fb45 	bl	8008a24 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	212c      	movs	r1, #44	; 0x2c
 80053a0:	fb01 f303 	mul.w	r3, r1, r3
 80053a4:	4413      	add	r3, r2
 80053a6:	3344      	adds	r3, #68	; 0x44
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	441a      	add	r2, r3
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	202c      	movs	r0, #44	; 0x2c
 80053b4:	fb00 f303 	mul.w	r3, r0, r3
 80053b8:	440b      	add	r3, r1
 80053ba:	3344      	adds	r3, #68	; 0x44
 80053bc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	212c      	movs	r1, #44	; 0x2c
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	3350      	adds	r3, #80	; 0x50
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	441a      	add	r2, r3
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	202c      	movs	r0, #44	; 0x2c
 80053d8:	fb00 f303 	mul.w	r3, r0, r3
 80053dc:	440b      	add	r3, r1
 80053de:	3350      	adds	r3, #80	; 0x50
 80053e0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	0cdb      	lsrs	r3, r3, #19
 80053f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	212c      	movs	r1, #44	; 0x2c
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	4413      	add	r3, r2
 8005404:	3340      	adds	r3, #64	; 0x40
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4293      	cmp	r3, r2
 800540e:	d13c      	bne.n	800548a <HCD_RXQLVL_IRQHandler+0x19a>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d039      	beq.n	800548a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800542c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005434:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	4413      	add	r3, r2
 800543e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	212c      	movs	r1, #44	; 0x2c
 800544e:	fb01 f303 	mul.w	r3, r1, r3
 8005452:	4413      	add	r3, r2
 8005454:	3354      	adds	r3, #84	; 0x54
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f083 0301 	eor.w	r3, r3, #1
 800545c:	b2d8      	uxtb	r0, r3
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	212c      	movs	r1, #44	; 0x2c
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	4413      	add	r3, r2
 800546a:	3354      	adds	r3, #84	; 0x54
 800546c:	4602      	mov	r2, r0
 800546e:	701a      	strb	r2, [r3, #0]
      break;
 8005470:	e00b      	b.n	800548a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	212c      	movs	r1, #44	; 0x2c
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	3360      	adds	r3, #96	; 0x60
 8005480:	2204      	movs	r2, #4
 8005482:	701a      	strb	r2, [r3, #0]
      break;
 8005484:	e001      	b.n	800548a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005486:	bf00      	nop
 8005488:	e000      	b.n	800548c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800548a:	bf00      	nop
  }
}
 800548c:	bf00      	nop
 800548e:	3728      	adds	r7, #40	; 0x28
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d10b      	bne.n	80054e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d102      	bne.n	80054dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f004 fe5e 	bl	800a198 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f043 0302 	orr.w	r3, r3, #2
 80054e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d132      	bne.n	8005554 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f043 0308 	orr.w	r3, r3, #8
 80054f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d126      	bne.n	800554e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d113      	bne.n	8005530 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800550e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005512:	d106      	bne.n	8005522 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2102      	movs	r1, #2
 800551a:	4618      	mov	r0, r3
 800551c:	f003 fafb 	bl	8008b16 <USB_InitFSLSPClkSel>
 8005520:	e011      	b.n	8005546 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2101      	movs	r1, #1
 8005528:	4618      	mov	r0, r3
 800552a:	f003 faf4 	bl	8008b16 <USB_InitFSLSPClkSel>
 800552e:	e00a      	b.n	8005546 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553e:	461a      	mov	r2, r3
 8005540:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005544:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f004 fe54 	bl	800a1f4 <HAL_HCD_PortEnabled_Callback>
 800554c:	e002      	b.n	8005554 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f004 fe5e 	bl	800a210 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b20      	cmp	r3, #32
 800555c:	d103      	bne.n	8005566 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f043 0320 	orr.w	r3, r3, #32
 8005564:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800556c:	461a      	mov	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	6013      	str	r3, [r2, #0]
}
 8005572:	bf00      	nop
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e12b      	b.n	80057e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fc fff0 	bl	8002588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055e0:	f001 f96a 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 80055e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	4a81      	ldr	r2, [pc, #516]	; (80057f0 <HAL_I2C_Init+0x274>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d807      	bhi.n	8005600 <HAL_I2C_Init+0x84>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a80      	ldr	r2, [pc, #512]	; (80057f4 <HAL_I2C_Init+0x278>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	bf94      	ite	ls
 80055f8:	2301      	movls	r3, #1
 80055fa:	2300      	movhi	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	e006      	b.n	800560e <HAL_I2C_Init+0x92>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4a7d      	ldr	r2, [pc, #500]	; (80057f8 <HAL_I2C_Init+0x27c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	bf94      	ite	ls
 8005608:	2301      	movls	r3, #1
 800560a:	2300      	movhi	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0e7      	b.n	80057e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4a78      	ldr	r2, [pc, #480]	; (80057fc <HAL_I2C_Init+0x280>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	0c9b      	lsrs	r3, r3, #18
 8005620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	4a6a      	ldr	r2, [pc, #424]	; (80057f0 <HAL_I2C_Init+0x274>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d802      	bhi.n	8005650 <HAL_I2C_Init+0xd4>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	3301      	adds	r3, #1
 800564e:	e009      	b.n	8005664 <HAL_I2C_Init+0xe8>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005656:	fb02 f303 	mul.w	r3, r2, r3
 800565a:	4a69      	ldr	r2, [pc, #420]	; (8005800 <HAL_I2C_Init+0x284>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	099b      	lsrs	r3, r3, #6
 8005662:	3301      	adds	r3, #1
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	430b      	orrs	r3, r1
 800566a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	495c      	ldr	r1, [pc, #368]	; (80057f0 <HAL_I2C_Init+0x274>)
 8005680:	428b      	cmp	r3, r1
 8005682:	d819      	bhi.n	80056b8 <HAL_I2C_Init+0x13c>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1e59      	subs	r1, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005692:	1c59      	adds	r1, r3, #1
 8005694:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005698:	400b      	ands	r3, r1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_I2C_Init+0x138>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1e59      	subs	r1, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ac:	3301      	adds	r3, #1
 80056ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b2:	e051      	b.n	8005758 <HAL_I2C_Init+0x1dc>
 80056b4:	2304      	movs	r3, #4
 80056b6:	e04f      	b.n	8005758 <HAL_I2C_Init+0x1dc>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d111      	bne.n	80056e4 <HAL_I2C_Init+0x168>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1e58      	subs	r0, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6859      	ldr	r1, [r3, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	440b      	add	r3, r1
 80056ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80056d2:	3301      	adds	r3, #1
 80056d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	e012      	b.n	800570a <HAL_I2C_Init+0x18e>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	1e58      	subs	r0, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6859      	ldr	r1, [r3, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	0099      	lsls	r1, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_Init+0x196>
 800570e:	2301      	movs	r3, #1
 8005710:	e022      	b.n	8005758 <HAL_I2C_Init+0x1dc>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10e      	bne.n	8005738 <HAL_I2C_Init+0x1bc>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1e58      	subs	r0, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	440b      	add	r3, r1
 8005728:	fbb0 f3f3 	udiv	r3, r0, r3
 800572c:	3301      	adds	r3, #1
 800572e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005736:	e00f      	b.n	8005758 <HAL_I2C_Init+0x1dc>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	1e58      	subs	r0, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6859      	ldr	r1, [r3, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	0099      	lsls	r1, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	fbb0 f3f3 	udiv	r3, r0, r3
 800574e:	3301      	adds	r3, #1
 8005750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	6809      	ldr	r1, [r1, #0]
 800575c:	4313      	orrs	r3, r2
 800575e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69da      	ldr	r2, [r3, #28]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005786:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6911      	ldr	r1, [r2, #16]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	68d2      	ldr	r2, [r2, #12]
 8005792:	4311      	orrs	r1, r2
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	430b      	orrs	r3, r1
 800579a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	000186a0 	.word	0x000186a0
 80057f4:	001e847f 	.word	0x001e847f
 80057f8:	003d08ff 	.word	0x003d08ff
 80057fc:	431bde83 	.word	0x431bde83
 8005800:	10624dd3 	.word	0x10624dd3

08005804 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b20      	cmp	r3, #32
 8005818:	d129      	bne.n	800586e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2224      	movs	r2, #36	; 0x24
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0201 	bic.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0210 	bic.w	r2, r2, #16
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0201 	orr.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
  }
}
 8005870:	4618      	mov	r0, r3
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b20      	cmp	r3, #32
 8005894:	d12a      	bne.n	80058ec <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2224      	movs	r2, #36	; 0x24
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80058b6:	89fb      	ldrh	r3, [r7, #14]
 80058b8:	f023 030f 	bic.w	r3, r3, #15
 80058bc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	89fb      	ldrh	r3, [r7, #14]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	89fa      	ldrh	r2, [r7, #14]
 80058ce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e0bf      	b.n	8005a8e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc fe9a 	bl	800265c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800593e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6999      	ldr	r1, [r3, #24]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005954:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6899      	ldr	r1, [r3, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_LTDC_Init+0x19c>)
 8005970:	400b      	ands	r3, r1
 8005972:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	041b      	lsls	r3, r3, #16
 800597a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6899      	ldr	r1, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68d9      	ldr	r1, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <HAL_LTDC_Init+0x19c>)
 800599e:	400b      	ands	r3, r1
 80059a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68d9      	ldr	r1, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1a      	ldr	r2, [r3, #32]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6919      	ldr	r1, [r3, #16]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <HAL_LTDC_Init+0x19c>)
 80059cc:	400b      	ands	r3, r1
 80059ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	041b      	lsls	r3, r3, #16
 80059d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6919      	ldr	r1, [r3, #16]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6959      	ldr	r1, [r3, #20]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <HAL_LTDC_Init+0x19c>)
 80059fa:	400b      	ands	r3, r1
 80059fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	041b      	lsls	r3, r3, #16
 8005a04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6959      	ldr	r1, [r3, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005a2c:	041b      	lsls	r3, r3, #16
 8005a2e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0206 	orr.w	r2, r2, #6
 8005a6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	f000f800 	.word	0xf000f800

08005a9c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d023      	beq.n	8005b06 <HAL_LTDC_IRQHandler+0x6a>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01e      	beq.n	8005b06 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0204 	bic.w	r2, r2, #4
 8005ad6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2204      	movs	r2, #4
 8005ade:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ae6:	f043 0201 	orr.w	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2204      	movs	r2, #4
 8005af4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f86f 	bl	8005be4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d023      	beq.n	8005b58 <HAL_LTDC_IRQHandler+0xbc>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01e      	beq.n	8005b58 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0202 	bic.w	r2, r2, #2
 8005b28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b38:	f043 0202 	orr.w	r2, r3, #2
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2204      	movs	r2, #4
 8005b46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f846 	bl	8005be4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01b      	beq.n	8005b9a <HAL_LTDC_IRQHandler+0xfe>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d016      	beq.n	8005b9a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2201      	movs	r2, #1
 8005b82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f82f 	bl	8005bf8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01b      	beq.n	8005bdc <HAL_LTDC_IRQHandler+0x140>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d016      	beq.n	8005bdc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0208 	bic.w	r2, r2, #8
 8005bbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f818 	bl	8005c0c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c20:	b5b0      	push	{r4, r5, r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_LTDC_ConfigLayer+0x1a>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e02c      	b.n	8005c94 <HAL_LTDC_ConfigLayer+0x74>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2134      	movs	r1, #52	; 0x34
 8005c50:	fb01 f303 	mul.w	r3, r1, r3
 8005c54:	4413      	add	r3, r2
 8005c56:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	461d      	mov	r5, r3
 8005c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f83b 	bl	8005cf0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bdb0      	pop	{r4, r5, r7, pc}

08005c9c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_LTDC_EnableDither+0x16>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e016      	b.n	8005ce0 <HAL_LTDC_EnableDither+0x44>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005cc2:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <HAL_LTDC_EnableDither+0x50>)
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	4a09      	ldr	r2, [pc, #36]	; (8005cec <HAL_LTDC_EnableDither+0x50>)
 8005cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ccc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40016800 	.word	0x40016800

08005cf0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0c:	4413      	add	r3, r2
 8005d0e:	041b      	lsls	r3, r3, #16
 8005d10:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	01db      	lsls	r3, r3, #7
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3384      	adds	r3, #132	; 0x84
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	4611      	mov	r1, r2
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	01d2      	lsls	r2, r2, #7
 8005d2c:	440a      	add	r2, r1
 8005d2e:	3284      	adds	r2, #132	; 0x84
 8005d30:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d34:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d46:	4413      	add	r3, r2
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	01db      	lsls	r3, r3, #7
 8005d54:	440b      	add	r3, r1
 8005d56:	3384      	adds	r3, #132	; 0x84
 8005d58:	4619      	mov	r1, r3
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d6e:	4413      	add	r3, r2
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	01db      	lsls	r3, r3, #7
 8005d7e:	4413      	add	r3, r2
 8005d80:	3384      	adds	r3, #132	; 0x84
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	01d2      	lsls	r2, r2, #7
 8005d8e:	440a      	add	r2, r1
 8005d90:	3284      	adds	r2, #132	; 0x84
 8005d92:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d96:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005da6:	4413      	add	r3, r2
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4619      	mov	r1, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	01db      	lsls	r3, r3, #7
 8005db4:	440b      	add	r3, r1
 8005db6:	3384      	adds	r3, #132	; 0x84
 8005db8:	4619      	mov	r1, r3
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	01db      	lsls	r3, r3, #7
 8005dca:	4413      	add	r3, r2
 8005dcc:	3384      	adds	r3, #132	; 0x84
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	01d2      	lsls	r2, r2, #7
 8005dda:	440a      	add	r2, r1
 8005ddc:	3284      	adds	r2, #132	; 0x84
 8005dde:	f023 0307 	bic.w	r3, r3, #7
 8005de2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	01db      	lsls	r3, r3, #7
 8005dee:	4413      	add	r3, r2
 8005df0:	3384      	adds	r3, #132	; 0x84
 8005df2:	461a      	mov	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e00:	021b      	lsls	r3, r3, #8
 8005e02:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005e0a:	041b      	lsls	r3, r3, #16
 8005e0c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	061b      	lsls	r3, r3, #24
 8005e14:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	01db      	lsls	r3, r3, #7
 8005e20:	4413      	add	r3, r2
 8005e22:	3384      	adds	r3, #132	; 0x84
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	01db      	lsls	r3, r3, #7
 8005e30:	4413      	add	r3, r2
 8005e32:	3384      	adds	r3, #132	; 0x84
 8005e34:	461a      	mov	r2, r3
 8005e36:	2300      	movs	r3, #0
 8005e38:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e40:	461a      	mov	r2, r3
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	431a      	orrs	r2, r3
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	01db      	lsls	r3, r3, #7
 8005e54:	440b      	add	r3, r1
 8005e56:	3384      	adds	r3, #132	; 0x84
 8005e58:	4619      	mov	r1, r3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3384      	adds	r3, #132	; 0x84
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	4611      	mov	r1, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	01d2      	lsls	r2, r2, #7
 8005e7a:	440a      	add	r2, r1
 8005e7c:	3284      	adds	r2, #132	; 0x84
 8005e7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e82:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	01db      	lsls	r3, r3, #7
 8005e8e:	4413      	add	r3, r2
 8005e90:	3384      	adds	r3, #132	; 0x84
 8005e92:	461a      	mov	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	01db      	lsls	r3, r3, #7
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3384      	adds	r3, #132	; 0x84
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	4611      	mov	r1, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	01d2      	lsls	r2, r2, #7
 8005eb4:	440a      	add	r2, r1
 8005eb6:	3284      	adds	r2, #132	; 0x84
 8005eb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005ebc:	f023 0307 	bic.w	r3, r3, #7
 8005ec0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	69da      	ldr	r2, [r3, #28]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	68f9      	ldr	r1, [r7, #12]
 8005ecc:	6809      	ldr	r1, [r1, #0]
 8005ece:	4608      	mov	r0, r1
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	01c9      	lsls	r1, r1, #7
 8005ed4:	4401      	add	r1, r0
 8005ed6:	3184      	adds	r1, #132	; 0x84
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	01db      	lsls	r3, r3, #7
 8005ee6:	4413      	add	r3, r2
 8005ee8:	3384      	adds	r3, #132	; 0x84
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	01db      	lsls	r3, r3, #7
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3384      	adds	r3, #132	; 0x84
 8005efa:	461a      	mov	r2, r3
 8005efc:	2300      	movs	r3, #0
 8005efe:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	01db      	lsls	r3, r3, #7
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3384      	adds	r3, #132	; 0x84
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d102      	bne.n	8005f24 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005f1e:	2304      	movs	r3, #4
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	e01b      	b.n	8005f5c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d102      	bne.n	8005f32 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	e014      	b.n	8005f5c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d00b      	beq.n	8005f52 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d007      	beq.n	8005f52 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d003      	beq.n	8005f52 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f4e:	2b07      	cmp	r3, #7
 8005f50:	d102      	bne.n	8005f58 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005f52:	2302      	movs	r3, #2
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	e001      	b.n	8005f5c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	01db      	lsls	r3, r3, #7
 8005f66:	4413      	add	r3, r2
 8005f68:	3384      	adds	r3, #132	; 0x84
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	4611      	mov	r1, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	01d2      	lsls	r2, r2, #7
 8005f76:	440a      	add	r2, r1
 8005f78:	3284      	adds	r2, #132	; 0x84
 8005f7a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	041a      	lsls	r2, r3, #16
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	6859      	ldr	r1, [r3, #4]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	1acb      	subs	r3, r1, r3
 8005f96:	69f9      	ldr	r1, [r7, #28]
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	3303      	adds	r3, #3
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	6809      	ldr	r1, [r1, #0]
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	01c9      	lsls	r1, r1, #7
 8005fa8:	4401      	add	r1, r0
 8005faa:	3184      	adds	r1, #132	; 0x84
 8005fac:	4313      	orrs	r3, r2
 8005fae:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	01db      	lsls	r3, r3, #7
 8005fba:	4413      	add	r3, r2
 8005fbc:	3384      	adds	r3, #132	; 0x84
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	01d2      	lsls	r2, r2, #7
 8005fca:	440a      	add	r2, r1
 8005fcc:	3284      	adds	r2, #132	; 0x84
 8005fce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fd2:	f023 0307 	bic.w	r3, r3, #7
 8005fd6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	01db      	lsls	r3, r3, #7
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3384      	adds	r3, #132	; 0x84
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	01db      	lsls	r3, r3, #7
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3384      	adds	r3, #132	; 0x84
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6812      	ldr	r2, [r2, #0]
 8006002:	4611      	mov	r1, r2
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	01d2      	lsls	r2, r2, #7
 8006008:	440a      	add	r2, r1
 800600a:	3284      	adds	r2, #132	; 0x84
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	6013      	str	r3, [r2, #0]
}
 8006012:	bf00      	nop
 8006014:	3724      	adds	r7, #36	; 0x24
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e264      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d075      	beq.n	800612a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800603e:	4ba3      	ldr	r3, [pc, #652]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 030c 	and.w	r3, r3, #12
 8006046:	2b04      	cmp	r3, #4
 8006048:	d00c      	beq.n	8006064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800604a:	4ba0      	ldr	r3, [pc, #640]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006052:	2b08      	cmp	r3, #8
 8006054:	d112      	bne.n	800607c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006056:	4b9d      	ldr	r3, [pc, #628]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006062:	d10b      	bne.n	800607c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006064:	4b99      	ldr	r3, [pc, #612]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d05b      	beq.n	8006128 <HAL_RCC_OscConfig+0x108>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d157      	bne.n	8006128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e23f      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d106      	bne.n	8006094 <HAL_RCC_OscConfig+0x74>
 8006086:	4b91      	ldr	r3, [pc, #580]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a90      	ldr	r2, [pc, #576]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 800608c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	e01d      	b.n	80060d0 <HAL_RCC_OscConfig+0xb0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800609c:	d10c      	bne.n	80060b8 <HAL_RCC_OscConfig+0x98>
 800609e:	4b8b      	ldr	r3, [pc, #556]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a8a      	ldr	r2, [pc, #552]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	4b88      	ldr	r3, [pc, #544]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a87      	ldr	r2, [pc, #540]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	e00b      	b.n	80060d0 <HAL_RCC_OscConfig+0xb0>
 80060b8:	4b84      	ldr	r3, [pc, #528]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a83      	ldr	r2, [pc, #524]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80060be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	4b81      	ldr	r3, [pc, #516]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a80      	ldr	r2, [pc, #512]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80060ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d013      	beq.n	8006100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d8:	f7fc fe66 	bl	8002da8 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e0:	f7fc fe62 	bl	8002da8 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b64      	cmp	r3, #100	; 0x64
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e204      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060f2:	4b76      	ldr	r3, [pc, #472]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f0      	beq.n	80060e0 <HAL_RCC_OscConfig+0xc0>
 80060fe:	e014      	b.n	800612a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006100:	f7fc fe52 	bl	8002da8 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006108:	f7fc fe4e 	bl	8002da8 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b64      	cmp	r3, #100	; 0x64
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e1f0      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800611a:	4b6c      	ldr	r3, [pc, #432]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f0      	bne.n	8006108 <HAL_RCC_OscConfig+0xe8>
 8006126:	e000      	b.n	800612a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d063      	beq.n	80061fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006136:	4b65      	ldr	r3, [pc, #404]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006142:	4b62      	ldr	r3, [pc, #392]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800614a:	2b08      	cmp	r3, #8
 800614c:	d11c      	bne.n	8006188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800614e:	4b5f      	ldr	r3, [pc, #380]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d116      	bne.n	8006188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615a:	4b5c      	ldr	r3, [pc, #368]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_RCC_OscConfig+0x152>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d001      	beq.n	8006172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e1c4      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006172:	4b56      	ldr	r3, [pc, #344]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	4952      	ldr	r1, [pc, #328]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006182:	4313      	orrs	r3, r2
 8006184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006186:	e03a      	b.n	80061fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d020      	beq.n	80061d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006190:	4b4f      	ldr	r3, [pc, #316]	; (80062d0 <HAL_RCC_OscConfig+0x2b0>)
 8006192:	2201      	movs	r2, #1
 8006194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006196:	f7fc fe07 	bl	8002da8 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800619e:	f7fc fe03 	bl	8002da8 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e1a5      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b0:	4b46      	ldr	r3, [pc, #280]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0f0      	beq.n	800619e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061bc:	4b43      	ldr	r3, [pc, #268]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4940      	ldr	r1, [pc, #256]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	600b      	str	r3, [r1, #0]
 80061d0:	e015      	b.n	80061fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061d2:	4b3f      	ldr	r3, [pc, #252]	; (80062d0 <HAL_RCC_OscConfig+0x2b0>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d8:	f7fc fde6 	bl	8002da8 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061e0:	f7fc fde2 	bl	8002da8 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e184      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061f2:	4b36      	ldr	r3, [pc, #216]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d030      	beq.n	800626c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d016      	beq.n	8006240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006212:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <HAL_RCC_OscConfig+0x2b4>)
 8006214:	2201      	movs	r2, #1
 8006216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006218:	f7fc fdc6 	bl	8002da8 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006220:	f7fc fdc2 	bl	8002da8 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e164      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006232:	4b26      	ldr	r3, [pc, #152]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCC_OscConfig+0x200>
 800623e:	e015      	b.n	800626c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006240:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <HAL_RCC_OscConfig+0x2b4>)
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006246:	f7fc fdaf 	bl	8002da8 <HAL_GetTick>
 800624a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800624e:	f7fc fdab 	bl	8002da8 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e14d      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006260:	4b1a      	ldr	r3, [pc, #104]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f0      	bne.n	800624e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80a0 	beq.w	80063ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800627a:	2300      	movs	r3, #0
 800627c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10f      	bne.n	80062aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800628a:	2300      	movs	r3, #0
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	4a0e      	ldr	r2, [pc, #56]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 8006294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006298:	6413      	str	r3, [r2, #64]	; 0x40
 800629a:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <HAL_RCC_OscConfig+0x2ac>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d121      	bne.n	80062fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062b6:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <HAL_RCC_OscConfig+0x2b8>)
 80062bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062c2:	f7fc fd71 	bl	8002da8 <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c8:	e011      	b.n	80062ee <HAL_RCC_OscConfig+0x2ce>
 80062ca:	bf00      	nop
 80062cc:	40023800 	.word	0x40023800
 80062d0:	42470000 	.word	0x42470000
 80062d4:	42470e80 	.word	0x42470e80
 80062d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062dc:	f7fc fd64 	bl	8002da8 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e106      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ee:	4b85      	ldr	r3, [pc, #532]	; (8006504 <HAL_RCC_OscConfig+0x4e4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d106      	bne.n	8006310 <HAL_RCC_OscConfig+0x2f0>
 8006302:	4b81      	ldr	r3, [pc, #516]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006306:	4a80      	ldr	r2, [pc, #512]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006308:	f043 0301 	orr.w	r3, r3, #1
 800630c:	6713      	str	r3, [r2, #112]	; 0x70
 800630e:	e01c      	b.n	800634a <HAL_RCC_OscConfig+0x32a>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b05      	cmp	r3, #5
 8006316:	d10c      	bne.n	8006332 <HAL_RCC_OscConfig+0x312>
 8006318:	4b7b      	ldr	r3, [pc, #492]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631c:	4a7a      	ldr	r2, [pc, #488]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 800631e:	f043 0304 	orr.w	r3, r3, #4
 8006322:	6713      	str	r3, [r2, #112]	; 0x70
 8006324:	4b78      	ldr	r3, [pc, #480]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006328:	4a77      	ldr	r2, [pc, #476]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 800632a:	f043 0301 	orr.w	r3, r3, #1
 800632e:	6713      	str	r3, [r2, #112]	; 0x70
 8006330:	e00b      	b.n	800634a <HAL_RCC_OscConfig+0x32a>
 8006332:	4b75      	ldr	r3, [pc, #468]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006336:	4a74      	ldr	r2, [pc, #464]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	6713      	str	r3, [r2, #112]	; 0x70
 800633e:	4b72      	ldr	r3, [pc, #456]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	4a71      	ldr	r2, [pc, #452]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006344:	f023 0304 	bic.w	r3, r3, #4
 8006348:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d015      	beq.n	800637e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006352:	f7fc fd29 	bl	8002da8 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006358:	e00a      	b.n	8006370 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800635a:	f7fc fd25 	bl	8002da8 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f241 3288 	movw	r2, #5000	; 0x1388
 8006368:	4293      	cmp	r3, r2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e0c5      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006370:	4b65      	ldr	r3, [pc, #404]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0ee      	beq.n	800635a <HAL_RCC_OscConfig+0x33a>
 800637c:	e014      	b.n	80063a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800637e:	f7fc fd13 	bl	8002da8 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006384:	e00a      	b.n	800639c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006386:	f7fc fd0f 	bl	8002da8 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	f241 3288 	movw	r2, #5000	; 0x1388
 8006394:	4293      	cmp	r3, r2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e0af      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800639c:	4b5a      	ldr	r3, [pc, #360]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 800639e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1ee      	bne.n	8006386 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d105      	bne.n	80063ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ae:	4b56      	ldr	r3, [pc, #344]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	4a55      	ldr	r2, [pc, #340]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 80063b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 809b 	beq.w	80064fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063c4:	4b50      	ldr	r3, [pc, #320]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f003 030c 	and.w	r3, r3, #12
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d05c      	beq.n	800648a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d141      	bne.n	800645c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d8:	4b4c      	ldr	r3, [pc, #304]	; (800650c <HAL_RCC_OscConfig+0x4ec>)
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063de:	f7fc fce3 	bl	8002da8 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e6:	f7fc fcdf 	bl	8002da8 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e081      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f8:	4b43      	ldr	r3, [pc, #268]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f0      	bne.n	80063e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69da      	ldr	r2, [r3, #28]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	019b      	lsls	r3, r3, #6
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	3b01      	subs	r3, #1
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	431a      	orrs	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	061b      	lsls	r3, r3, #24
 8006428:	4937      	ldr	r1, [pc, #220]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 800642a:	4313      	orrs	r3, r2
 800642c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800642e:	4b37      	ldr	r3, [pc, #220]	; (800650c <HAL_RCC_OscConfig+0x4ec>)
 8006430:	2201      	movs	r2, #1
 8006432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006434:	f7fc fcb8 	bl	8002da8 <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800643c:	f7fc fcb4 	bl	8002da8 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e056      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644e:	4b2e      	ldr	r3, [pc, #184]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f0      	beq.n	800643c <HAL_RCC_OscConfig+0x41c>
 800645a:	e04e      	b.n	80064fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800645c:	4b2b      	ldr	r3, [pc, #172]	; (800650c <HAL_RCC_OscConfig+0x4ec>)
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006462:	f7fc fca1 	bl	8002da8 <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800646a:	f7fc fc9d 	bl	8002da8 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e03f      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800647c:	4b22      	ldr	r3, [pc, #136]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1f0      	bne.n	800646a <HAL_RCC_OscConfig+0x44a>
 8006488:	e037      	b.n	80064fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e032      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006496:	4b1c      	ldr	r3, [pc, #112]	; (8006508 <HAL_RCC_OscConfig+0x4e8>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d028      	beq.n	80064f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d121      	bne.n	80064f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064bc:	429a      	cmp	r2, r3
 80064be:	d11a      	bne.n	80064f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064c6:	4013      	ands	r3, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d111      	bne.n	80064f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	3b01      	subs	r3, #1
 80064e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d107      	bne.n	80064f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d001      	beq.n	80064fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40007000 	.word	0x40007000
 8006508:	40023800 	.word	0x40023800
 800650c:	42470060 	.word	0x42470060

08006510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e0cc      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006524:	4b68      	ldr	r3, [pc, #416]	; (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d90c      	bls.n	800654c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006532:	4b65      	ldr	r3, [pc, #404]	; (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b63      	ldr	r3, [pc, #396]	; (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0b8      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d020      	beq.n	800659a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006564:	4b59      	ldr	r3, [pc, #356]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4a58      	ldr	r2, [pc, #352]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800656e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800657c:	4b53      	ldr	r3, [pc, #332]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	4a52      	ldr	r2, [pc, #328]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006588:	4b50      	ldr	r3, [pc, #320]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	494d      	ldr	r1, [pc, #308]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d044      	beq.n	8006630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d107      	bne.n	80065be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ae:	4b47      	ldr	r3, [pc, #284]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d119      	bne.n	80065ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e07f      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d003      	beq.n	80065ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d107      	bne.n	80065de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ce:	4b3f      	ldr	r3, [pc, #252]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e06f      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065de:	4b3b      	ldr	r3, [pc, #236]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e067      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ee:	4b37      	ldr	r3, [pc, #220]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f023 0203 	bic.w	r2, r3, #3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4934      	ldr	r1, [pc, #208]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006600:	f7fc fbd2 	bl	8002da8 <HAL_GetTick>
 8006604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006606:	e00a      	b.n	800661e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006608:	f7fc fbce 	bl	8002da8 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	f241 3288 	movw	r2, #5000	; 0x1388
 8006616:	4293      	cmp	r3, r2
 8006618:	d901      	bls.n	800661e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e04f      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800661e:	4b2b      	ldr	r3, [pc, #172]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 020c 	and.w	r2, r3, #12
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	429a      	cmp	r2, r3
 800662e:	d1eb      	bne.n	8006608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006630:	4b25      	ldr	r3, [pc, #148]	; (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d20c      	bcs.n	8006658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663e:	4b22      	ldr	r3, [pc, #136]	; (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b20      	ldr	r3, [pc, #128]	; (80066c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e032      	b.n	80066be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006664:	4b19      	ldr	r3, [pc, #100]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4916      	ldr	r1, [pc, #88]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	4313      	orrs	r3, r2
 8006674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006682:	4b12      	ldr	r3, [pc, #72]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	490e      	ldr	r1, [pc, #56]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006696:	f000 f821 	bl	80066dc <HAL_RCC_GetSysClockFreq>
 800669a:	4602      	mov	r2, r0
 800669c:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	490a      	ldr	r1, [pc, #40]	; (80066d0 <HAL_RCC_ClockConfig+0x1c0>)
 80066a8:	5ccb      	ldrb	r3, [r1, r3]
 80066aa:	fa22 f303 	lsr.w	r3, r2, r3
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <HAL_RCC_ClockConfig+0x1c4>)
 80066b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066b2:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <HAL_RCC_ClockConfig+0x1c8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fc fa6c 	bl	8002b94 <HAL_InitTick>

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40023c00 	.word	0x40023c00
 80066cc:	40023800 	.word	0x40023800
 80066d0:	0800be20 	.word	0x0800be20
 80066d4:	20000048 	.word	0x20000048
 80066d8:	2000004c 	.word	0x2000004c

080066dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	2300      	movs	r3, #0
 80066ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066f4:	4b67      	ldr	r3, [pc, #412]	; (8006894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 030c 	and.w	r3, r3, #12
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d00d      	beq.n	800671c <HAL_RCC_GetSysClockFreq+0x40>
 8006700:	2b08      	cmp	r3, #8
 8006702:	f200 80bd 	bhi.w	8006880 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_RCC_GetSysClockFreq+0x34>
 800670a:	2b04      	cmp	r3, #4
 800670c:	d003      	beq.n	8006716 <HAL_RCC_GetSysClockFreq+0x3a>
 800670e:	e0b7      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006710:	4b61      	ldr	r3, [pc, #388]	; (8006898 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006712:	60bb      	str	r3, [r7, #8]
       break;
 8006714:	e0b7      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006716:	4b61      	ldr	r3, [pc, #388]	; (800689c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006718:	60bb      	str	r3, [r7, #8]
      break;
 800671a:	e0b4      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800671c:	4b5d      	ldr	r3, [pc, #372]	; (8006894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006724:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006726:	4b5b      	ldr	r3, [pc, #364]	; (8006894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d04d      	beq.n	80067ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006732:	4b58      	ldr	r3, [pc, #352]	; (8006894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	461a      	mov	r2, r3
 800673a:	f04f 0300 	mov.w	r3, #0
 800673e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006742:	f04f 0100 	mov.w	r1, #0
 8006746:	ea02 0800 	and.w	r8, r2, r0
 800674a:	ea03 0901 	and.w	r9, r3, r1
 800674e:	4640      	mov	r0, r8
 8006750:	4649      	mov	r1, r9
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	014b      	lsls	r3, r1, #5
 800675c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006760:	0142      	lsls	r2, r0, #5
 8006762:	4610      	mov	r0, r2
 8006764:	4619      	mov	r1, r3
 8006766:	ebb0 0008 	subs.w	r0, r0, r8
 800676a:	eb61 0109 	sbc.w	r1, r1, r9
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	018b      	lsls	r3, r1, #6
 8006778:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800677c:	0182      	lsls	r2, r0, #6
 800677e:	1a12      	subs	r2, r2, r0
 8006780:	eb63 0301 	sbc.w	r3, r3, r1
 8006784:	f04f 0000 	mov.w	r0, #0
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	00d9      	lsls	r1, r3, #3
 800678e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006792:	00d0      	lsls	r0, r2, #3
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	eb12 0208 	adds.w	r2, r2, r8
 800679c:	eb43 0309 	adc.w	r3, r3, r9
 80067a0:	f04f 0000 	mov.w	r0, #0
 80067a4:	f04f 0100 	mov.w	r1, #0
 80067a8:	0259      	lsls	r1, r3, #9
 80067aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80067ae:	0250      	lsls	r0, r2, #9
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4610      	mov	r0, r2
 80067b6:	4619      	mov	r1, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	f7f9 fd16 	bl	80001f0 <__aeabi_uldivmod>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4613      	mov	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	e04a      	b.n	8006864 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ce:	4b31      	ldr	r3, [pc, #196]	; (8006894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	099b      	lsrs	r3, r3, #6
 80067d4:	461a      	mov	r2, r3
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067de:	f04f 0100 	mov.w	r1, #0
 80067e2:	ea02 0400 	and.w	r4, r2, r0
 80067e6:	ea03 0501 	and.w	r5, r3, r1
 80067ea:	4620      	mov	r0, r4
 80067ec:	4629      	mov	r1, r5
 80067ee:	f04f 0200 	mov.w	r2, #0
 80067f2:	f04f 0300 	mov.w	r3, #0
 80067f6:	014b      	lsls	r3, r1, #5
 80067f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067fc:	0142      	lsls	r2, r0, #5
 80067fe:	4610      	mov	r0, r2
 8006800:	4619      	mov	r1, r3
 8006802:	1b00      	subs	r0, r0, r4
 8006804:	eb61 0105 	sbc.w	r1, r1, r5
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	018b      	lsls	r3, r1, #6
 8006812:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006816:	0182      	lsls	r2, r0, #6
 8006818:	1a12      	subs	r2, r2, r0
 800681a:	eb63 0301 	sbc.w	r3, r3, r1
 800681e:	f04f 0000 	mov.w	r0, #0
 8006822:	f04f 0100 	mov.w	r1, #0
 8006826:	00d9      	lsls	r1, r3, #3
 8006828:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800682c:	00d0      	lsls	r0, r2, #3
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	1912      	adds	r2, r2, r4
 8006834:	eb45 0303 	adc.w	r3, r5, r3
 8006838:	f04f 0000 	mov.w	r0, #0
 800683c:	f04f 0100 	mov.w	r1, #0
 8006840:	0299      	lsls	r1, r3, #10
 8006842:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006846:	0290      	lsls	r0, r2, #10
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4610      	mov	r0, r2
 800684e:	4619      	mov	r1, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	461a      	mov	r2, r3
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	f7f9 fcca 	bl	80001f0 <__aeabi_uldivmod>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4613      	mov	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	3301      	adds	r3, #1
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	fbb2 f3f3 	udiv	r3, r2, r3
 800687c:	60bb      	str	r3, [r7, #8]
      break;
 800687e:	e002      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006882:	60bb      	str	r3, [r7, #8]
      break;
 8006884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006886:	68bb      	ldr	r3, [r7, #8]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006892:	bf00      	nop
 8006894:	40023800 	.word	0x40023800
 8006898:	00f42400 	.word	0x00f42400
 800689c:	007a1200 	.word	0x007a1200

080068a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068a4:	4b03      	ldr	r3, [pc, #12]	; (80068b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000048 	.word	0x20000048

080068b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068bc:	f7ff fff0 	bl	80068a0 <HAL_RCC_GetHCLKFreq>
 80068c0:	4602      	mov	r2, r0
 80068c2:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	0a9b      	lsrs	r3, r3, #10
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	4903      	ldr	r1, [pc, #12]	; (80068dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ce:	5ccb      	ldrb	r3, [r1, r3]
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40023800 	.word	0x40023800
 80068dc:	0800be30 	.word	0x0800be30

080068e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80068e4:	f7ff ffdc 	bl	80068a0 <HAL_RCC_GetHCLKFreq>
 80068e8:	4602      	mov	r2, r0
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	0b5b      	lsrs	r3, r3, #13
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	4903      	ldr	r1, [pc, #12]	; (8006904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068f6:	5ccb      	ldrb	r3, [r1, r3]
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40023800 	.word	0x40023800
 8006904:	0800be30 	.word	0x0800be30

08006908 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	220f      	movs	r2, #15
 8006916:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006918:	4b12      	ldr	r3, [pc, #72]	; (8006964 <HAL_RCC_GetClockConfig+0x5c>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0203 	and.w	r2, r3, #3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006924:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <HAL_RCC_GetClockConfig+0x5c>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006930:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <HAL_RCC_GetClockConfig+0x5c>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <HAL_RCC_GetClockConfig+0x5c>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	08db      	lsrs	r3, r3, #3
 8006942:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <HAL_RCC_GetClockConfig+0x60>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 020f 	and.w	r2, r3, #15
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	601a      	str	r2, [r3, #0]
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40023800 	.word	0x40023800
 8006968:	40023c00 	.word	0x40023c00

0800696c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10b      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800699c:	2b00      	cmp	r3, #0
 800699e:	d075      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069a0:	4bad      	ldr	r3, [pc, #692]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069a6:	f7fc f9ff 	bl	8002da8 <HAL_GetTick>
 80069aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069ac:	e008      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069ae:	f7fc f9fb 	bl	8002da8 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d901      	bls.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e18b      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069c0:	4ba6      	ldr	r3, [pc, #664]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f0      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	019a      	lsls	r2, r3, #6
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	071b      	lsls	r3, r3, #28
 80069e4:	499d      	ldr	r1, [pc, #628]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01f      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069f8:	4b98      	ldr	r3, [pc, #608]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069fe:	0f1b      	lsrs	r3, r3, #28
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	019a      	lsls	r2, r3, #6
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	061b      	lsls	r3, r3, #24
 8006a12:	431a      	orrs	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	071b      	lsls	r3, r3, #28
 8006a18:	4990      	ldr	r1, [pc, #576]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a20:	4b8e      	ldr	r3, [pc, #568]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a26:	f023 021f 	bic.w	r2, r3, #31
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	498a      	ldr	r1, [pc, #552]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00d      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	019a      	lsls	r2, r3, #6
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	061b      	lsls	r3, r3, #24
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	071b      	lsls	r3, r3, #28
 8006a58:	4980      	ldr	r1, [pc, #512]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a60:	4b7d      	ldr	r3, [pc, #500]	; (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a66:	f7fc f99f 	bl	8002da8 <HAL_GetTick>
 8006a6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a6e:	f7fc f99b 	bl	8002da8 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e12b      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a80:	4b76      	ldr	r3, [pc, #472]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d079      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006aa4:	4b6e      	ldr	r3, [pc, #440]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006aaa:	f7fc f97d 	bl	8002da8 <HAL_GetTick>
 8006aae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ab2:	f7fc f979 	bl	8002da8 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e109      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ac4:	4b65      	ldr	r3, [pc, #404]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad0:	d0ef      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d020      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ade:	4b5f      	ldr	r3, [pc, #380]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae4:	0f1b      	lsrs	r3, r3, #28
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	019a      	lsls	r2, r3, #6
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	061b      	lsls	r3, r3, #24
 8006af8:	431a      	orrs	r2, r3
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	071b      	lsls	r3, r3, #28
 8006afe:	4957      	ldr	r1, [pc, #348]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b06:	4b55      	ldr	r3, [pc, #340]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	4950      	ldr	r1, [pc, #320]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d01e      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b2c:	4b4b      	ldr	r3, [pc, #300]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b32:	0e1b      	lsrs	r3, r3, #24
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	019a      	lsls	r2, r3, #6
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	061b      	lsls	r3, r3, #24
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	071b      	lsls	r3, r3, #28
 8006b4c:	4943      	ldr	r1, [pc, #268]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b54:	4b41      	ldr	r3, [pc, #260]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	493e      	ldr	r1, [pc, #248]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b6a:	4b3d      	ldr	r3, [pc, #244]	; (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b70:	f7fc f91a 	bl	8002da8 <HAL_GetTick>
 8006b74:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b78:	f7fc f916 	bl	8002da8 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e0a6      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b8a:	4b34      	ldr	r3, [pc, #208]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b96:	d1ef      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 808d 	beq.w	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	4b2c      	ldr	r3, [pc, #176]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb6:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bc2:	4b28      	ldr	r3, [pc, #160]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bcc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bce:	f7fc f8eb 	bl	8002da8 <HAL_GetTick>
 8006bd2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bd6:	f7fc f8e7 	bl	8002da8 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e077      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006be8:	4b1e      	ldr	r3, [pc, #120]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0f0      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bf4:	4b19      	ldr	r3, [pc, #100]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d039      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d032      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c12:	4b12      	ldr	r3, [pc, #72]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c22:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c28:	4a0c      	ldr	r2, [pc, #48]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c2e:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d11e      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c3a:	f7fc f8b5 	bl	8002da8 <HAL_GetTick>
 8006c3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c40:	e014      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c42:	f7fc f8b1 	bl	8002da8 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d90b      	bls.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e03f      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006c58:	42470068 	.word	0x42470068
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	42470070 	.word	0x42470070
 8006c64:	40007000 	.word	0x40007000
 8006c68:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c6c:	4b1c      	ldr	r3, [pc, #112]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0e4      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c84:	d10d      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006c86:	4b16      	ldr	r3, [pc, #88]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c9a:	4911      	ldr	r1, [pc, #68]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	608b      	str	r3, [r1, #8]
 8006ca0:	e005      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006ca2:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	4a0e      	ldr	r2, [pc, #56]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ca8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cac:	6093      	str	r3, [r2, #8]
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cba:	4909      	ldr	r1, [pc, #36]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006cd2:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006cd4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	424711e0 	.word	0x424711e0

08006ce8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e025      	b.n	8006d48 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7fb ff35 	bl	8002b80 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3304      	adds	r3, #4
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f001 fcd3 	bl	80086d4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	461a      	mov	r2, r3
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	f001 fd3e 	bl	80087ba <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d101      	bne.n	8006d6c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e018      	b.n	8006d9e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 fd9b 	bl	80088b8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d104      	bne.n	8006d94 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2205      	movs	r2, #5
 8006d8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006d92:	e003      	b.n	8006d9c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d101      	bne.n	8006dc0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e00e      	b.n	8006dde <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 fdae 	bl	8008930 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e07b      	b.n	8006ef0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d108      	bne.n	8006e12 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e08:	d009      	beq.n	8006e1e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	61da      	str	r2, [r3, #28]
 8006e10:	e005      	b.n	8006e1e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fb fd3f 	bl	80028bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea2:	ea42 0103 	orr.w	r1, r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	f003 0104 	and.w	r1, r3, #4
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	f003 0210 	and.w	r2, r3, #16
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69da      	ldr	r2, [r3, #28]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ede:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e01a      	b.n	8006f40 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f20:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fb fd12 	bl	800294c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <HAL_SPI_Transmit+0x22>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e126      	b.n	80071b8 <HAL_SPI_Transmit+0x270>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f72:	f7fb ff19 	bl	8002da8 <HAL_GetTick>
 8006f76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d002      	beq.n	8006f8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f8c:	e10b      	b.n	80071a6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <HAL_SPI_Transmit+0x52>
 8006f94:	88fb      	ldrh	r3, [r7, #6]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f9e:	e102      	b.n	80071a6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe6:	d10f      	bne.n	8007008 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007006:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007012:	2b40      	cmp	r3, #64	; 0x40
 8007014:	d007      	beq.n	8007026 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800702e:	d14b      	bne.n	80070c8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <HAL_SPI_Transmit+0xf6>
 8007038:	8afb      	ldrh	r3, [r7, #22]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d13e      	bne.n	80070bc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007042:	881a      	ldrh	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	1c9a      	adds	r2, r3, #2
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007062:	e02b      	b.n	80070bc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b02      	cmp	r3, #2
 8007070:	d112      	bne.n	8007098 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	881a      	ldrh	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	1c9a      	adds	r2, r3, #2
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	86da      	strh	r2, [r3, #54]	; 0x36
 8007096:	e011      	b.n	80070bc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007098:	f7fb fe86 	bl	8002da8 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d803      	bhi.n	80070b0 <HAL_SPI_Transmit+0x168>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ae:	d102      	bne.n	80070b6 <HAL_SPI_Transmit+0x16e>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d102      	bne.n	80070bc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070ba:	e074      	b.n	80071a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1ce      	bne.n	8007064 <HAL_SPI_Transmit+0x11c>
 80070c6:	e04c      	b.n	8007162 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <HAL_SPI_Transmit+0x18e>
 80070d0:	8afb      	ldrh	r3, [r7, #22]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d140      	bne.n	8007158 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	7812      	ldrb	r2, [r2, #0]
 80070e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070fc:	e02c      	b.n	8007158 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b02      	cmp	r3, #2
 800710a:	d113      	bne.n	8007134 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	7812      	ldrb	r2, [r2, #0]
 8007118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	86da      	strh	r2, [r3, #54]	; 0x36
 8007132:	e011      	b.n	8007158 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007134:	f7fb fe38 	bl	8002da8 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	429a      	cmp	r2, r3
 8007142:	d803      	bhi.n	800714c <HAL_SPI_Transmit+0x204>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800714a:	d102      	bne.n	8007152 <HAL_SPI_Transmit+0x20a>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007156:	e026      	b.n	80071a6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1cd      	bne.n	80070fe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 fbda 	bl	8007920 <SPI_EndRxTxTransaction>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2220      	movs	r2, #32
 8007176:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007180:	2300      	movs	r3, #0
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	613b      	str	r3, [r7, #16]
 8007194:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	77fb      	strb	r3, [r7, #31]
 80071a2:	e000      	b.n	80071a6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80071a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	4613      	mov	r3, r2
 80071ce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071dc:	d112      	bne.n	8007204 <HAL_SPI_Receive+0x44>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10e      	bne.n	8007204 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2204      	movs	r2, #4
 80071ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	4613      	mov	r3, r2
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f8f1 	bl	80073e2 <HAL_SPI_TransmitReceive>
 8007200:	4603      	mov	r3, r0
 8007202:	e0ea      	b.n	80073da <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_SPI_Receive+0x52>
 800720e:	2302      	movs	r3, #2
 8007210:	e0e3      	b.n	80073da <HAL_SPI_Receive+0x21a>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800721a:	f7fb fdc5 	bl	8002da8 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b01      	cmp	r3, #1
 800722a:	d002      	beq.n	8007232 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800722c:	2302      	movs	r3, #2
 800722e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007230:	e0ca      	b.n	80073c8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_SPI_Receive+0x7e>
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d102      	bne.n	8007244 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007242:	e0c1      	b.n	80073c8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2204      	movs	r2, #4
 8007248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	88fa      	ldrh	r2, [r7, #6]
 800725c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800728a:	d10f      	bne.n	80072ac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800729a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b40      	cmp	r3, #64	; 0x40
 80072b8:	d007      	beq.n	80072ca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d162      	bne.n	8007398 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80072d2:	e02e      	b.n	8007332 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d115      	bne.n	800730e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f103 020c 	add.w	r2, r3, #12
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	7812      	ldrb	r2, [r2, #0]
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800730c:	e011      	b.n	8007332 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800730e:	f7fb fd4b 	bl	8002da8 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d803      	bhi.n	8007326 <HAL_SPI_Receive+0x166>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007324:	d102      	bne.n	800732c <HAL_SPI_Receive+0x16c>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007330:	e04a      	b.n	80073c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1cb      	bne.n	80072d4 <HAL_SPI_Receive+0x114>
 800733c:	e031      	b.n	80073a2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d113      	bne.n	8007374 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	b292      	uxth	r2, r2
 8007358:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	1c9a      	adds	r2, r3, #2
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007372:	e011      	b.n	8007398 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007374:	f7fb fd18 	bl	8002da8 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d803      	bhi.n	800738c <HAL_SPI_Receive+0x1cc>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800738a:	d102      	bne.n	8007392 <HAL_SPI_Receive+0x1d2>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007396:	e017      	b.n	80073c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1cd      	bne.n	800733e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fa54 	bl	8007854 <SPI_EndRxTransaction>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	75fb      	strb	r3, [r7, #23]
 80073c4:	e000      	b.n	80073c8 <HAL_SPI_Receive+0x208>
  }

error :
 80073c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b08c      	sub	sp, #48	; 0x30
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	607a      	str	r2, [r7, #4]
 80073ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073f0:	2301      	movs	r3, #1
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_SPI_TransmitReceive+0x26>
 8007404:	2302      	movs	r3, #2
 8007406:	e18a      	b.n	800771e <HAL_SPI_TransmitReceive+0x33c>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007410:	f7fb fcca 	bl	8002da8 <HAL_GetTick>
 8007414:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800741c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007426:	887b      	ldrh	r3, [r7, #2]
 8007428:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800742a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800742e:	2b01      	cmp	r3, #1
 8007430:	d00f      	beq.n	8007452 <HAL_SPI_TransmitReceive+0x70>
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007438:	d107      	bne.n	800744a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d103      	bne.n	800744a <HAL_SPI_TransmitReceive+0x68>
 8007442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007446:	2b04      	cmp	r3, #4
 8007448:	d003      	beq.n	8007452 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800744a:	2302      	movs	r3, #2
 800744c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007450:	e15b      	b.n	800770a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d005      	beq.n	8007464 <HAL_SPI_TransmitReceive+0x82>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_SPI_TransmitReceive+0x82>
 800745e:	887b      	ldrh	r3, [r7, #2]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800746a:	e14e      	b.n	800770a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b04      	cmp	r3, #4
 8007476:	d003      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2205      	movs	r2, #5
 800747c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	887a      	ldrh	r2, [r7, #2]
 8007490:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	887a      	ldrh	r2, [r7, #2]
 8007496:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	887a      	ldrh	r2, [r7, #2]
 80074a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	887a      	ldrh	r2, [r7, #2]
 80074a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d007      	beq.n	80074d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074dc:	d178      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <HAL_SPI_TransmitReceive+0x10a>
 80074e6:	8b7b      	ldrh	r3, [r7, #26]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d166      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	881a      	ldrh	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007510:	e053      	b.n	80075ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b02      	cmp	r3, #2
 800751e:	d11b      	bne.n	8007558 <HAL_SPI_TransmitReceive+0x176>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d016      	beq.n	8007558 <HAL_SPI_TransmitReceive+0x176>
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d113      	bne.n	8007558 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	881a      	ldrh	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	1c9a      	adds	r2, r3, #2
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800754a:	b29b      	uxth	r3, r3
 800754c:	3b01      	subs	r3, #1
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b01      	cmp	r3, #1
 8007564:	d119      	bne.n	800759a <HAL_SPI_TransmitReceive+0x1b8>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d014      	beq.n	800759a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	b292      	uxth	r2, r2
 800757c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	1c9a      	adds	r2, r3, #2
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007596:	2301      	movs	r3, #1
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800759a:	f7fb fc05 	bl	8002da8 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d807      	bhi.n	80075ba <HAL_SPI_TransmitReceive+0x1d8>
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075b0:	d003      	beq.n	80075ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075b8:	e0a7      	b.n	800770a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1a6      	bne.n	8007512 <HAL_SPI_TransmitReceive+0x130>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1a1      	bne.n	8007512 <HAL_SPI_TransmitReceive+0x130>
 80075ce:	e07c      	b.n	80076ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <HAL_SPI_TransmitReceive+0x1fc>
 80075d8:	8b7b      	ldrh	r3, [r7, #26]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d16b      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b01      	subs	r3, #1
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007604:	e057      	b.n	80076b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b02      	cmp	r3, #2
 8007612:	d11c      	bne.n	800764e <HAL_SPI_TransmitReceive+0x26c>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d017      	beq.n	800764e <HAL_SPI_TransmitReceive+0x26c>
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d114      	bne.n	800764e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	7812      	ldrb	r2, [r2, #0]
 8007630:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b01      	cmp	r3, #1
 800765a:	d119      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x2ae>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d014      	beq.n	8007690 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800768c:	2301      	movs	r3, #1
 800768e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007690:	f7fb fb8a 	bl	8002da8 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800769c:	429a      	cmp	r2, r3
 800769e:	d803      	bhi.n	80076a8 <HAL_SPI_TransmitReceive+0x2c6>
 80076a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076a6:	d102      	bne.n	80076ae <HAL_SPI_TransmitReceive+0x2cc>
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80076b4:	e029      	b.n	800770a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1a2      	bne.n	8007606 <HAL_SPI_TransmitReceive+0x224>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d19d      	bne.n	8007606 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 f926 	bl	8007920 <SPI_EndRxTxTransaction>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d006      	beq.n	80076e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80076e6:	e010      	b.n	800770a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	e000      	b.n	800770a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007708:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800771a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800771e:	4618      	mov	r0, r3
 8007720:	3730      	adds	r7, #48	; 0x30
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007734:	b2db      	uxtb	r3, r3
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007754:	f7fb fb28 	bl	8002da8 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	4413      	add	r3, r2
 8007762:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007764:	f7fb fb20 	bl	8002da8 <HAL_GetTick>
 8007768:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800776a:	4b39      	ldr	r3, [pc, #228]	; (8007850 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	015b      	lsls	r3, r3, #5
 8007770:	0d1b      	lsrs	r3, r3, #20
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	fb02 f303 	mul.w	r3, r2, r3
 8007778:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800777a:	e054      	b.n	8007826 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007782:	d050      	beq.n	8007826 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007784:	f7fb fb10 	bl	8002da8 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	429a      	cmp	r2, r3
 8007792:	d902      	bls.n	800779a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d13d      	bne.n	8007816 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077b2:	d111      	bne.n	80077d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077bc:	d004      	beq.n	80077c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c6:	d107      	bne.n	80077d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e0:	d10f      	bne.n	8007802 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007800:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e017      	b.n	8007846 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	3b01      	subs	r3, #1
 8007824:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4013      	ands	r3, r2
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	429a      	cmp	r2, r3
 8007834:	bf0c      	ite	eq
 8007836:	2301      	moveq	r3, #1
 8007838:	2300      	movne	r3, #0
 800783a:	b2db      	uxtb	r3, r3
 800783c:	461a      	mov	r2, r3
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	429a      	cmp	r2, r3
 8007842:	d19b      	bne.n	800777c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000048 	.word	0x20000048

08007854 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007868:	d111      	bne.n	800788e <SPI_EndRxTransaction+0x3a>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007872:	d004      	beq.n	800787e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800787c:	d107      	bne.n	800788e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800788c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007896:	d12a      	bne.n	80078ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a0:	d012      	beq.n	80078c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2200      	movs	r2, #0
 80078aa:	2180      	movs	r1, #128	; 0x80
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f7ff ff49 	bl	8007744 <SPI_WaitFlagStateUntilTimeout>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d02d      	beq.n	8007914 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078bc:	f043 0220 	orr.w	r2, r3, #32
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e026      	b.n	8007916 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2200      	movs	r2, #0
 80078d0:	2101      	movs	r1, #1
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff ff36 	bl	8007744 <SPI_WaitFlagStateUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01a      	beq.n	8007914 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e2:	f043 0220 	orr.w	r2, r3, #32
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e013      	b.n	8007916 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2200      	movs	r2, #0
 80078f6:	2101      	movs	r1, #1
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff ff23 	bl	8007744 <SPI_WaitFlagStateUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007908:	f043 0220 	orr.w	r2, r3, #32
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e000      	b.n	8007916 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800792c:	4b1b      	ldr	r3, [pc, #108]	; (800799c <SPI_EndRxTxTransaction+0x7c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a1b      	ldr	r2, [pc, #108]	; (80079a0 <SPI_EndRxTxTransaction+0x80>)
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	0d5b      	lsrs	r3, r3, #21
 8007938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800793c:	fb02 f303 	mul.w	r3, r2, r3
 8007940:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800794a:	d112      	bne.n	8007972 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2200      	movs	r2, #0
 8007954:	2180      	movs	r1, #128	; 0x80
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff fef4 	bl	8007744 <SPI_WaitFlagStateUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d016      	beq.n	8007990 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007966:	f043 0220 	orr.w	r2, r3, #32
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e00f      	b.n	8007992 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	3b01      	subs	r3, #1
 800797c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007988:	2b80      	cmp	r3, #128	; 0x80
 800798a:	d0f2      	beq.n	8007972 <SPI_EndRxTxTransaction+0x52>
 800798c:	e000      	b.n	8007990 <SPI_EndRxTxTransaction+0x70>
        break;
 800798e:	bf00      	nop
  }

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000048 	.word	0x20000048
 80079a0:	165e9f81 	.word	0x165e9f81

080079a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e041      	b.n	8007a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fa ffdc 	bl	8002988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3304      	adds	r3, #4
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f000 fa96 	bl	8007f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d001      	beq.n	8007a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e04e      	b.n	8007afa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a23      	ldr	r2, [pc, #140]	; (8007b08 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d022      	beq.n	8007ac4 <HAL_TIM_Base_Start_IT+0x80>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a86:	d01d      	beq.n	8007ac4 <HAL_TIM_Base_Start_IT+0x80>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1f      	ldr	r2, [pc, #124]	; (8007b0c <HAL_TIM_Base_Start_IT+0xc8>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d018      	beq.n	8007ac4 <HAL_TIM_Base_Start_IT+0x80>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1e      	ldr	r2, [pc, #120]	; (8007b10 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d013      	beq.n	8007ac4 <HAL_TIM_Base_Start_IT+0x80>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1c      	ldr	r2, [pc, #112]	; (8007b14 <HAL_TIM_Base_Start_IT+0xd0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00e      	beq.n	8007ac4 <HAL_TIM_Base_Start_IT+0x80>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1b      	ldr	r2, [pc, #108]	; (8007b18 <HAL_TIM_Base_Start_IT+0xd4>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d009      	beq.n	8007ac4 <HAL_TIM_Base_Start_IT+0x80>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a19      	ldr	r2, [pc, #100]	; (8007b1c <HAL_TIM_Base_Start_IT+0xd8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d004      	beq.n	8007ac4 <HAL_TIM_Base_Start_IT+0x80>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a18      	ldr	r2, [pc, #96]	; (8007b20 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d111      	bne.n	8007ae8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b06      	cmp	r3, #6
 8007ad4:	d010      	beq.n	8007af8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f042 0201 	orr.w	r2, r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae6:	e007      	b.n	8007af8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00
 8007b18:	40010400 	.word	0x40010400
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40001800 	.word	0x40001800

08007b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d122      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d11b      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f06f 0202 	mvn.w	r2, #2
 8007b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f9b5 	bl	8007ed6 <HAL_TIM_IC_CaptureCallback>
 8007b6c:	e005      	b.n	8007b7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9a7 	bl	8007ec2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f9b8 	bl	8007eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d122      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	d11b      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 0204 	mvn.w	r2, #4
 8007ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f98b 	bl	8007ed6 <HAL_TIM_IC_CaptureCallback>
 8007bc0:	e005      	b.n	8007bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f97d 	bl	8007ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f98e 	bl	8007eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d122      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d11b      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f06f 0208 	mvn.w	r2, #8
 8007bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f961 	bl	8007ed6 <HAL_TIM_IC_CaptureCallback>
 8007c14:	e005      	b.n	8007c22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f953 	bl	8007ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f964 	bl	8007eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b10      	cmp	r3, #16
 8007c34:	d122      	bne.n	8007c7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f003 0310 	and.w	r3, r3, #16
 8007c40:	2b10      	cmp	r3, #16
 8007c42:	d11b      	bne.n	8007c7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f06f 0210 	mvn.w	r2, #16
 8007c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2208      	movs	r2, #8
 8007c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f937 	bl	8007ed6 <HAL_TIM_IC_CaptureCallback>
 8007c68:	e005      	b.n	8007c76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f929 	bl	8007ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f93a 	bl	8007eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d10e      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d107      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f06f 0201 	mvn.w	r2, #1
 8007ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7f9 f9fc 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb2:	2b80      	cmp	r3, #128	; 0x80
 8007cb4:	d10e      	bne.n	8007cd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc0:	2b80      	cmp	r3, #128	; 0x80
 8007cc2:	d107      	bne.n	8007cd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fae0 	bl	8008294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cde:	2b40      	cmp	r3, #64	; 0x40
 8007ce0:	d10e      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cec:	2b40      	cmp	r3, #64	; 0x40
 8007cee:	d107      	bne.n	8007d00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f8ff 	bl	8007efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d10e      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f003 0320 	and.w	r3, r3, #32
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d107      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0220 	mvn.w	r2, #32
 8007d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 faaa 	bl	8008280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_TIM_ConfigClockSource+0x1c>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e0b4      	b.n	8007eba <HAL_TIM_ConfigClockSource+0x186>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d88:	d03e      	beq.n	8007e08 <HAL_TIM_ConfigClockSource+0xd4>
 8007d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d8e:	f200 8087 	bhi.w	8007ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8007d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d96:	f000 8086 	beq.w	8007ea6 <HAL_TIM_ConfigClockSource+0x172>
 8007d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d9e:	d87f      	bhi.n	8007ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8007da0:	2b70      	cmp	r3, #112	; 0x70
 8007da2:	d01a      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0xa6>
 8007da4:	2b70      	cmp	r3, #112	; 0x70
 8007da6:	d87b      	bhi.n	8007ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8007da8:	2b60      	cmp	r3, #96	; 0x60
 8007daa:	d050      	beq.n	8007e4e <HAL_TIM_ConfigClockSource+0x11a>
 8007dac:	2b60      	cmp	r3, #96	; 0x60
 8007dae:	d877      	bhi.n	8007ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8007db0:	2b50      	cmp	r3, #80	; 0x50
 8007db2:	d03c      	beq.n	8007e2e <HAL_TIM_ConfigClockSource+0xfa>
 8007db4:	2b50      	cmp	r3, #80	; 0x50
 8007db6:	d873      	bhi.n	8007ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b40      	cmp	r3, #64	; 0x40
 8007dba:	d058      	beq.n	8007e6e <HAL_TIM_ConfigClockSource+0x13a>
 8007dbc:	2b40      	cmp	r3, #64	; 0x40
 8007dbe:	d86f      	bhi.n	8007ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc0:	2b30      	cmp	r3, #48	; 0x30
 8007dc2:	d064      	beq.n	8007e8e <HAL_TIM_ConfigClockSource+0x15a>
 8007dc4:	2b30      	cmp	r3, #48	; 0x30
 8007dc6:	d86b      	bhi.n	8007ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	d060      	beq.n	8007e8e <HAL_TIM_ConfigClockSource+0x15a>
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d867      	bhi.n	8007ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d05c      	beq.n	8007e8e <HAL_TIM_ConfigClockSource+0x15a>
 8007dd4:	2b10      	cmp	r3, #16
 8007dd6:	d05a      	beq.n	8007e8e <HAL_TIM_ConfigClockSource+0x15a>
 8007dd8:	e062      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6899      	ldr	r1, [r3, #8]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f000 f9ad 	bl	8008148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	609a      	str	r2, [r3, #8]
      break;
 8007e06:	e04f      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	6899      	ldr	r1, [r3, #8]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f000 f996 	bl	8008148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e2a:	609a      	str	r2, [r3, #8]
      break;
 8007e2c:	e03c      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	6859      	ldr	r1, [r3, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f000 f90a 	bl	8008054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2150      	movs	r1, #80	; 0x50
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 f963 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 8007e4c:	e02c      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	6859      	ldr	r1, [r3, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f000 f929 	bl	80080b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2160      	movs	r1, #96	; 0x60
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f953 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 8007e6c:	e01c      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	6859      	ldr	r1, [r3, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f000 f8ea 	bl	8008054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2140      	movs	r1, #64	; 0x40
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f943 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 8007e8c:	e00c      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f000 f93a 	bl	8008112 <TIM_ITRx_SetConfig>
      break;
 8007e9e:	e003      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea4:	e000      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ef2:	bf00      	nop
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a40      	ldr	r2, [pc, #256]	; (8008028 <TIM_Base_SetConfig+0x114>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d013      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f32:	d00f      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a3d      	ldr	r2, [pc, #244]	; (800802c <TIM_Base_SetConfig+0x118>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d00b      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a3c      	ldr	r2, [pc, #240]	; (8008030 <TIM_Base_SetConfig+0x11c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d007      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a3b      	ldr	r2, [pc, #236]	; (8008034 <TIM_Base_SetConfig+0x120>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d003      	beq.n	8007f54 <TIM_Base_SetConfig+0x40>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a3a      	ldr	r2, [pc, #232]	; (8008038 <TIM_Base_SetConfig+0x124>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d108      	bne.n	8007f66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2f      	ldr	r2, [pc, #188]	; (8008028 <TIM_Base_SetConfig+0x114>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d02b      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f74:	d027      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a2c      	ldr	r2, [pc, #176]	; (800802c <TIM_Base_SetConfig+0x118>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d023      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a2b      	ldr	r2, [pc, #172]	; (8008030 <TIM_Base_SetConfig+0x11c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d01f      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a2a      	ldr	r2, [pc, #168]	; (8008034 <TIM_Base_SetConfig+0x120>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d01b      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a29      	ldr	r2, [pc, #164]	; (8008038 <TIM_Base_SetConfig+0x124>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d017      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a28      	ldr	r2, [pc, #160]	; (800803c <TIM_Base_SetConfig+0x128>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d013      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a27      	ldr	r2, [pc, #156]	; (8008040 <TIM_Base_SetConfig+0x12c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d00f      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a26      	ldr	r2, [pc, #152]	; (8008044 <TIM_Base_SetConfig+0x130>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00b      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a25      	ldr	r2, [pc, #148]	; (8008048 <TIM_Base_SetConfig+0x134>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d007      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a24      	ldr	r2, [pc, #144]	; (800804c <TIM_Base_SetConfig+0x138>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d003      	beq.n	8007fc6 <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a23      	ldr	r2, [pc, #140]	; (8008050 <TIM_Base_SetConfig+0x13c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d108      	bne.n	8007fd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a0a      	ldr	r2, [pc, #40]	; (8008028 <TIM_Base_SetConfig+0x114>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d003      	beq.n	800800c <TIM_Base_SetConfig+0xf8>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a0c      	ldr	r2, [pc, #48]	; (8008038 <TIM_Base_SetConfig+0x124>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d103      	bne.n	8008014 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	691a      	ldr	r2, [r3, #16]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	615a      	str	r2, [r3, #20]
}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40010000 	.word	0x40010000
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	40010400 	.word	0x40010400
 800803c:	40014000 	.word	0x40014000
 8008040:	40014400 	.word	0x40014400
 8008044:	40014800 	.word	0x40014800
 8008048:	40001800 	.word	0x40001800
 800804c:	40001c00 	.word	0x40001c00
 8008050:	40002000 	.word	0x40002000

08008054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	f023 0201 	bic.w	r2, r3, #1
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800807e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f023 030a 	bic.w	r3, r3, #10
 8008090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	621a      	str	r2, [r3, #32]
}
 80080a6:	bf00      	nop
 80080a8:	371c      	adds	r7, #28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b087      	sub	sp, #28
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0210 	bic.w	r2, r3, #16
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	031b      	lsls	r3, r3, #12
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	f043 0307 	orr.w	r3, r3, #7
 8008134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	609a      	str	r2, [r3, #8]
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	021a      	lsls	r2, r3, #8
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	431a      	orrs	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800819c:	2302      	movs	r3, #2
 800819e:	e05a      	b.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a21      	ldr	r2, [pc, #132]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d022      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ec:	d01d      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1d      	ldr	r2, [pc, #116]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d018      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a1b      	ldr	r2, [pc, #108]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d013      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a1a      	ldr	r2, [pc, #104]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00e      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a18      	ldr	r2, [pc, #96]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d009      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a17      	ldr	r2, [pc, #92]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d004      	beq.n	800822a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a15      	ldr	r2, [pc, #84]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d10c      	bne.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	4313      	orrs	r3, r2
 800823a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40010000 	.word	0x40010000
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40010400 	.word	0x40010400
 8008278:	40014000 	.word	0x40014000
 800827c:	40001800 	.word	0x40001800

08008280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e03f      	b.n	800833a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7fa fb7c 	bl	80029cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2224      	movs	r2, #36	; 0x24
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f829 	bl	8008344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	691a      	ldr	r2, [r3, #16]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695a      	ldr	r2, [r3, #20]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68da      	ldr	r2, [r3, #12]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	b09f      	sub	sp, #124	; 0x7c
 800834a:	af00      	add	r7, sp, #0
 800834c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800834e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835a:	68d9      	ldr	r1, [r3, #12]
 800835c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	ea40 0301 	orr.w	r3, r0, r1
 8008364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008368:	689a      	ldr	r2, [r3, #8]
 800836a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	431a      	orrs	r2, r3
 8008370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	431a      	orrs	r2, r3
 8008376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	4313      	orrs	r3, r2
 800837c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800837e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008388:	f021 010c 	bic.w	r1, r1, #12
 800838c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008392:	430b      	orrs	r3, r1
 8008394:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80083a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a2:	6999      	ldr	r1, [r3, #24]
 80083a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	ea40 0301 	orr.w	r3, r0, r1
 80083ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	4bc5      	ldr	r3, [pc, #788]	; (80086c8 <UART_SetConfig+0x384>)
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d004      	beq.n	80083c2 <UART_SetConfig+0x7e>
 80083b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	4bc3      	ldr	r3, [pc, #780]	; (80086cc <UART_SetConfig+0x388>)
 80083be:	429a      	cmp	r2, r3
 80083c0:	d103      	bne.n	80083ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083c2:	f7fe fa8d 	bl	80068e0 <HAL_RCC_GetPCLK2Freq>
 80083c6:	6778      	str	r0, [r7, #116]	; 0x74
 80083c8:	e002      	b.n	80083d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083ca:	f7fe fa75 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 80083ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d8:	f040 80b6 	bne.w	8008548 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083de:	461c      	mov	r4, r3
 80083e0:	f04f 0500 	mov.w	r5, #0
 80083e4:	4622      	mov	r2, r4
 80083e6:	462b      	mov	r3, r5
 80083e8:	1891      	adds	r1, r2, r2
 80083ea:	6439      	str	r1, [r7, #64]	; 0x40
 80083ec:	415b      	adcs	r3, r3
 80083ee:	647b      	str	r3, [r7, #68]	; 0x44
 80083f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083f4:	1912      	adds	r2, r2, r4
 80083f6:	eb45 0303 	adc.w	r3, r5, r3
 80083fa:	f04f 0000 	mov.w	r0, #0
 80083fe:	f04f 0100 	mov.w	r1, #0
 8008402:	00d9      	lsls	r1, r3, #3
 8008404:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008408:	00d0      	lsls	r0, r2, #3
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	1911      	adds	r1, r2, r4
 8008410:	6639      	str	r1, [r7, #96]	; 0x60
 8008412:	416b      	adcs	r3, r5
 8008414:	667b      	str	r3, [r7, #100]	; 0x64
 8008416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	461a      	mov	r2, r3
 800841c:	f04f 0300 	mov.w	r3, #0
 8008420:	1891      	adds	r1, r2, r2
 8008422:	63b9      	str	r1, [r7, #56]	; 0x38
 8008424:	415b      	adcs	r3, r3
 8008426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800842c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008430:	f7f7 fede 	bl	80001f0 <__aeabi_uldivmod>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4ba5      	ldr	r3, [pc, #660]	; (80086d0 <UART_SetConfig+0x38c>)
 800843a:	fba3 2302 	umull	r2, r3, r3, r2
 800843e:	095b      	lsrs	r3, r3, #5
 8008440:	011e      	lsls	r6, r3, #4
 8008442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008444:	461c      	mov	r4, r3
 8008446:	f04f 0500 	mov.w	r5, #0
 800844a:	4622      	mov	r2, r4
 800844c:	462b      	mov	r3, r5
 800844e:	1891      	adds	r1, r2, r2
 8008450:	6339      	str	r1, [r7, #48]	; 0x30
 8008452:	415b      	adcs	r3, r3
 8008454:	637b      	str	r3, [r7, #52]	; 0x34
 8008456:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800845a:	1912      	adds	r2, r2, r4
 800845c:	eb45 0303 	adc.w	r3, r5, r3
 8008460:	f04f 0000 	mov.w	r0, #0
 8008464:	f04f 0100 	mov.w	r1, #0
 8008468:	00d9      	lsls	r1, r3, #3
 800846a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800846e:	00d0      	lsls	r0, r2, #3
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	1911      	adds	r1, r2, r4
 8008476:	65b9      	str	r1, [r7, #88]	; 0x58
 8008478:	416b      	adcs	r3, r5
 800847a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800847c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	461a      	mov	r2, r3
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	1891      	adds	r1, r2, r2
 8008488:	62b9      	str	r1, [r7, #40]	; 0x28
 800848a:	415b      	adcs	r3, r3
 800848c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800848e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008492:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008496:	f7f7 feab 	bl	80001f0 <__aeabi_uldivmod>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4b8c      	ldr	r3, [pc, #560]	; (80086d0 <UART_SetConfig+0x38c>)
 80084a0:	fba3 1302 	umull	r1, r3, r3, r2
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	2164      	movs	r1, #100	; 0x64
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	3332      	adds	r3, #50	; 0x32
 80084b2:	4a87      	ldr	r2, [pc, #540]	; (80086d0 <UART_SetConfig+0x38c>)
 80084b4:	fba2 2303 	umull	r2, r3, r2, r3
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084c0:	441e      	add	r6, r3
 80084c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084c4:	4618      	mov	r0, r3
 80084c6:	f04f 0100 	mov.w	r1, #0
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	1894      	adds	r4, r2, r2
 80084d0:	623c      	str	r4, [r7, #32]
 80084d2:	415b      	adcs	r3, r3
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24
 80084d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084da:	1812      	adds	r2, r2, r0
 80084dc:	eb41 0303 	adc.w	r3, r1, r3
 80084e0:	f04f 0400 	mov.w	r4, #0
 80084e4:	f04f 0500 	mov.w	r5, #0
 80084e8:	00dd      	lsls	r5, r3, #3
 80084ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084ee:	00d4      	lsls	r4, r2, #3
 80084f0:	4622      	mov	r2, r4
 80084f2:	462b      	mov	r3, r5
 80084f4:	1814      	adds	r4, r2, r0
 80084f6:	653c      	str	r4, [r7, #80]	; 0x50
 80084f8:	414b      	adcs	r3, r1
 80084fa:	657b      	str	r3, [r7, #84]	; 0x54
 80084fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	461a      	mov	r2, r3
 8008502:	f04f 0300 	mov.w	r3, #0
 8008506:	1891      	adds	r1, r2, r2
 8008508:	61b9      	str	r1, [r7, #24]
 800850a:	415b      	adcs	r3, r3
 800850c:	61fb      	str	r3, [r7, #28]
 800850e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008512:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008516:	f7f7 fe6b 	bl	80001f0 <__aeabi_uldivmod>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4b6c      	ldr	r3, [pc, #432]	; (80086d0 <UART_SetConfig+0x38c>)
 8008520:	fba3 1302 	umull	r1, r3, r3, r2
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	2164      	movs	r1, #100	; 0x64
 8008528:	fb01 f303 	mul.w	r3, r1, r3
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	3332      	adds	r3, #50	; 0x32
 8008532:	4a67      	ldr	r2, [pc, #412]	; (80086d0 <UART_SetConfig+0x38c>)
 8008534:	fba2 2303 	umull	r2, r3, r2, r3
 8008538:	095b      	lsrs	r3, r3, #5
 800853a:	f003 0207 	and.w	r2, r3, #7
 800853e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4432      	add	r2, r6
 8008544:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008546:	e0b9      	b.n	80086bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800854a:	461c      	mov	r4, r3
 800854c:	f04f 0500 	mov.w	r5, #0
 8008550:	4622      	mov	r2, r4
 8008552:	462b      	mov	r3, r5
 8008554:	1891      	adds	r1, r2, r2
 8008556:	6139      	str	r1, [r7, #16]
 8008558:	415b      	adcs	r3, r3
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008560:	1912      	adds	r2, r2, r4
 8008562:	eb45 0303 	adc.w	r3, r5, r3
 8008566:	f04f 0000 	mov.w	r0, #0
 800856a:	f04f 0100 	mov.w	r1, #0
 800856e:	00d9      	lsls	r1, r3, #3
 8008570:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008574:	00d0      	lsls	r0, r2, #3
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	eb12 0804 	adds.w	r8, r2, r4
 800857e:	eb43 0905 	adc.w	r9, r3, r5
 8008582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	4618      	mov	r0, r3
 8008588:	f04f 0100 	mov.w	r1, #0
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	008b      	lsls	r3, r1, #2
 8008596:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800859a:	0082      	lsls	r2, r0, #2
 800859c:	4640      	mov	r0, r8
 800859e:	4649      	mov	r1, r9
 80085a0:	f7f7 fe26 	bl	80001f0 <__aeabi_uldivmod>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4b49      	ldr	r3, [pc, #292]	; (80086d0 <UART_SetConfig+0x38c>)
 80085aa:	fba3 2302 	umull	r2, r3, r3, r2
 80085ae:	095b      	lsrs	r3, r3, #5
 80085b0:	011e      	lsls	r6, r3, #4
 80085b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b4:	4618      	mov	r0, r3
 80085b6:	f04f 0100 	mov.w	r1, #0
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	1894      	adds	r4, r2, r2
 80085c0:	60bc      	str	r4, [r7, #8]
 80085c2:	415b      	adcs	r3, r3
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085ca:	1812      	adds	r2, r2, r0
 80085cc:	eb41 0303 	adc.w	r3, r1, r3
 80085d0:	f04f 0400 	mov.w	r4, #0
 80085d4:	f04f 0500 	mov.w	r5, #0
 80085d8:	00dd      	lsls	r5, r3, #3
 80085da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085de:	00d4      	lsls	r4, r2, #3
 80085e0:	4622      	mov	r2, r4
 80085e2:	462b      	mov	r3, r5
 80085e4:	1814      	adds	r4, r2, r0
 80085e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80085e8:	414b      	adcs	r3, r1
 80085ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f04f 0100 	mov.w	r1, #0
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	f04f 0300 	mov.w	r3, #0
 80085fe:	008b      	lsls	r3, r1, #2
 8008600:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008604:	0082      	lsls	r2, r0, #2
 8008606:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800860a:	f7f7 fdf1 	bl	80001f0 <__aeabi_uldivmod>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4b2f      	ldr	r3, [pc, #188]	; (80086d0 <UART_SetConfig+0x38c>)
 8008614:	fba3 1302 	umull	r1, r3, r3, r2
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	2164      	movs	r1, #100	; 0x64
 800861c:	fb01 f303 	mul.w	r3, r1, r3
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	3332      	adds	r3, #50	; 0x32
 8008626:	4a2a      	ldr	r2, [pc, #168]	; (80086d0 <UART_SetConfig+0x38c>)
 8008628:	fba2 2303 	umull	r2, r3, r2, r3
 800862c:	095b      	lsrs	r3, r3, #5
 800862e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008632:	441e      	add	r6, r3
 8008634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008636:	4618      	mov	r0, r3
 8008638:	f04f 0100 	mov.w	r1, #0
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	1894      	adds	r4, r2, r2
 8008642:	603c      	str	r4, [r7, #0]
 8008644:	415b      	adcs	r3, r3
 8008646:	607b      	str	r3, [r7, #4]
 8008648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800864c:	1812      	adds	r2, r2, r0
 800864e:	eb41 0303 	adc.w	r3, r1, r3
 8008652:	f04f 0400 	mov.w	r4, #0
 8008656:	f04f 0500 	mov.w	r5, #0
 800865a:	00dd      	lsls	r5, r3, #3
 800865c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008660:	00d4      	lsls	r4, r2, #3
 8008662:	4622      	mov	r2, r4
 8008664:	462b      	mov	r3, r5
 8008666:	eb12 0a00 	adds.w	sl, r2, r0
 800866a:	eb43 0b01 	adc.w	fp, r3, r1
 800866e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	4618      	mov	r0, r3
 8008674:	f04f 0100 	mov.w	r1, #0
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	008b      	lsls	r3, r1, #2
 8008682:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008686:	0082      	lsls	r2, r0, #2
 8008688:	4650      	mov	r0, sl
 800868a:	4659      	mov	r1, fp
 800868c:	f7f7 fdb0 	bl	80001f0 <__aeabi_uldivmod>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <UART_SetConfig+0x38c>)
 8008696:	fba3 1302 	umull	r1, r3, r3, r2
 800869a:	095b      	lsrs	r3, r3, #5
 800869c:	2164      	movs	r1, #100	; 0x64
 800869e:	fb01 f303 	mul.w	r3, r1, r3
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	3332      	adds	r3, #50	; 0x32
 80086a8:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <UART_SetConfig+0x38c>)
 80086aa:	fba2 2303 	umull	r2, r3, r2, r3
 80086ae:	095b      	lsrs	r3, r3, #5
 80086b0:	f003 020f 	and.w	r2, r3, #15
 80086b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4432      	add	r2, r6
 80086ba:	609a      	str	r2, [r3, #8]
}
 80086bc:	bf00      	nop
 80086be:	377c      	adds	r7, #124	; 0x7c
 80086c0:	46bd      	mov	sp, r7
 80086c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c6:	bf00      	nop
 80086c8:	40011000 	.word	0x40011000
 80086cc:	40011400 	.word	0x40011400
 80086d0:	51eb851f 	.word	0x51eb851f

080086d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d029      	beq.n	8008742 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80086fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086fe:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008708:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800870e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008714:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800871a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008720:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008726:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800872c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008732:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e034      	b.n	80087ac <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800874e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008758:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800875e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008772:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008776:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008780:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008786:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800878c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008792:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008798:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	4313      	orrs	r3, r2
 800879e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b087      	sub	sp, #28
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80087c6:	2300      	movs	r3, #0
 80087c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d02e      	beq.n	8008832 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087e0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80087f0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80087fa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	3b01      	subs	r3, #1
 8008802:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008804:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	3b01      	subs	r3, #1
 800880c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800880e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	3b01      	subs	r3, #1
 8008816:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008818:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	3b01      	subs	r3, #1
 8008820:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008822:	4313      	orrs	r3, r2
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	e03b      	b.n	80088aa <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800883e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008842:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	3b01      	subs	r3, #1
 800884a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	3b01      	subs	r3, #1
 8008852:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008854:	4313      	orrs	r3, r2
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008868:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	3b01      	subs	r3, #1
 8008876:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008878:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	3b01      	subs	r3, #1
 8008880:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008882:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	3b01      	subs	r3, #1
 800888a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800888c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	3b01      	subs	r3, #1
 8008894:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008896:	4313      	orrs	r3, r2
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80088d4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	3b01      	subs	r3, #1
 80088dc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80088de:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80088f0:	f7fa fa5a 	bl	8002da8 <HAL_GetTick>
 80088f4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80088f6:	e010      	b.n	800891a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088fe:	d00c      	beq.n	800891a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d007      	beq.n	8008916 <FMC_SDRAM_SendCommand+0x5e>
 8008906:	f7fa fa4f 	bl	8002da8 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	429a      	cmp	r2, r3
 8008914:	d201      	bcs.n	800891a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e006      	b.n	8008928 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b20      	cmp	r3, #32
 8008924:	d0e8      	beq.n	80088f8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695a      	ldr	r2, [r3, #20]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f043 0201 	orr.w	r2, r3, #1
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f023 0201 	bic.w	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
	...

0800899c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	019b      	lsls	r3, r3, #6
 80089ae:	f043 0220 	orr.w	r2, r3, #32
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3301      	adds	r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	4a08      	ldr	r2, [pc, #32]	; (80089e0 <USB_FlushTxFifo+0x44>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d901      	bls.n	80089c6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e006      	b.n	80089d4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f003 0320 	and.w	r3, r3, #32
 80089ce:	2b20      	cmp	r3, #32
 80089d0:	d0f1      	beq.n	80089b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	00030d40 	.word	0x00030d40

080089e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2210      	movs	r2, #16
 80089f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	4a08      	ldr	r2, [pc, #32]	; (8008a20 <USB_FlushRxFifo+0x3c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d901      	bls.n	8008a06 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e006      	b.n	8008a14 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	f003 0310 	and.w	r3, r3, #16
 8008a0e:	2b10      	cmp	r3, #16
 8008a10:	d0f1      	beq.n	80089f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	00030d40 	.word	0x00030d40

08008a24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b08b      	sub	sp, #44	; 0x2c
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a3a:	88fb      	ldrh	r3, [r7, #6]
 8008a3c:	089b      	lsrs	r3, r3, #2
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	f003 0303 	and.w	r3, r3, #3
 8008a48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	623b      	str	r3, [r7, #32]
 8008a4e:	e014      	b.n	8008a7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	3301      	adds	r3, #1
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	3301      	adds	r3, #1
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	3301      	adds	r3, #1
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	3301      	adds	r3, #1
 8008a78:	623b      	str	r3, [r7, #32]
 8008a7a:	6a3a      	ldr	r2, [r7, #32]
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d3e6      	bcc.n	8008a50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a82:	8bfb      	ldrh	r3, [r7, #30]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01e      	beq.n	8008ac6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a92:	461a      	mov	r2, r3
 8008a94:	f107 0310 	add.w	r3, r7, #16
 8008a98:	6812      	ldr	r2, [r2, #0]
 8008a9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	701a      	strb	r2, [r3, #0]
      i++;
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	623b      	str	r3, [r7, #32]
      pDest++;
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008aba:	8bfb      	ldrh	r3, [r7, #30]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ac0:	8bfb      	ldrh	r3, [r7, #30]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1ea      	bne.n	8008a9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	372c      	adds	r7, #44	; 0x2c
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	4013      	ands	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008aec:	68fb      	ldr	r3, [r7, #12]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	f003 0301 	and.w	r3, r3, #1
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b085      	sub	sp, #20
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b34:	f023 0303 	bic.w	r3, r3, #3
 8008b38:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	f003 0303 	and.w	r3, r3, #3
 8008b48:	68f9      	ldr	r1, [r7, #12]
 8008b4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008b52:	78fb      	ldrb	r3, [r7, #3]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d107      	bne.n	8008b68 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008b64:	6053      	str	r3, [r2, #4]
 8008b66:	e009      	b.n	8008b7c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d106      	bne.n	8008b7c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b74:	461a      	mov	r2, r3
 8008b76:	f241 7370 	movw	r3, #6000	; 0x1770
 8008b7a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	b29b      	uxth	r3, r3
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b089      	sub	sp, #36	; 0x24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	0c9b      	lsrs	r3, r3, #18
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	0fdb      	lsrs	r3, r3, #31
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f003 0320 	and.w	r3, r3, #32
 8008bf8:	2b20      	cmp	r3, #32
 8008bfa:	d104      	bne.n	8008c06 <USB_HC_Halt+0x5a>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e0e8      	b.n	8008dd8 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <USB_HC_Halt+0x66>
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d173      	bne.n	8008cfa <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c30:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 80cb 	bne.w	8008dd6 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d143      	bne.n	8008cd4 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	0151      	lsls	r1, r2, #5
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	440a      	add	r2, r1
 8008c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c6a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	0151      	lsls	r1, r2, #5
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	440a      	add	r2, r1
 8008c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c8a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	0151      	lsls	r1, r2, #5
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	440a      	add	r2, r1
 8008ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ca6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008caa:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	61fb      	str	r3, [r7, #28]
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cb8:	d81d      	bhi.n	8008cf6 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd0:	d0ec      	beq.n	8008cac <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cd2:	e080      	b.n	8008dd6 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cf2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cf4:	e06f      	b.n	8008dd6 <USB_HC_Halt+0x22a>
            break;
 8008cf6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cf8:	e06d      	b.n	8008dd6 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	0151      	lsls	r1, r2, #5
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	440a      	add	r2, r1
 8008d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d18:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d143      	bne.n	8008db2 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	0151      	lsls	r1, r2, #5
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	440a      	add	r2, r1
 8008d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d48:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	0151      	lsls	r1, r2, #5
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	440a      	add	r2, r1
 8008d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d68:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	0151      	lsls	r1, r2, #5
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	440a      	add	r2, r1
 8008d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d88:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	61fb      	str	r3, [r7, #28]
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d96:	d81d      	bhi.n	8008dd4 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dae:	d0ec      	beq.n	8008d8a <USB_HC_Halt+0x1de>
 8008db0:	e011      	b.n	8008dd6 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	0151      	lsls	r1, r2, #5
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	440a      	add	r2, r1
 8008dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dd0:	6013      	str	r3, [r2, #0]
 8008dd2:	e000      	b.n	8008dd6 <USB_HC_Halt+0x22a>
          break;
 8008dd4:	bf00      	nop
    }
  }

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3724      	adds	r7, #36	; 0x24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff fdbf 	bl	8008978 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008dfa:	2110      	movs	r1, #16
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7ff fdcd 	bl	800899c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff fdee 	bl	80089e4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008e08:	2300      	movs	r3, #0
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	e01f      	b.n	8008e4e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e24:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e42:	461a      	mov	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	613b      	str	r3, [r7, #16]
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	2b0f      	cmp	r3, #15
 8008e52:	d9dc      	bls.n	8008e0e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e54:	2300      	movs	r3, #0
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	e034      	b.n	8008ec4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e8e:	461a      	mov	r2, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	3301      	adds	r3, #1
 8008e98:	617b      	str	r3, [r7, #20]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ea0:	d80c      	bhi.n	8008ebc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eb8:	d0ec      	beq.n	8008e94 <USB_StopHost+0xb0>
 8008eba:	e000      	b.n	8008ebe <USB_StopHost+0xda>
        break;
 8008ebc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	613b      	str	r3, [r7, #16]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d9c7      	bls.n	8008e5a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ed6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ede:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff fd38 	bl	8008956 <USB_EnableGlobalInt>

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f804 	bl	8008f14 <USBH_HandleSof>
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b0b      	cmp	r3, #11
 8008f24:	d10a      	bne.n	8008f3c <USBH_HandleSof+0x28>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d005      	beq.n	8008f3c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	4798      	blx	r3
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	f000 f8ae 	bl	80090cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008f70:	bf00      	nop
}
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008f88:	bf00      	nop
}
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4619      	mov	r1, r3
 8008fcc:	f000 f87e 	bl	80090cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 f916 	bl	800a22c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	791b      	ldrb	r3, [r3, #4]
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f830 	bl	800906c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	795b      	ldrb	r3, [r3, #5]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f82a 	bl	800906c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800902c:	2200      	movs	r2, #0
 800902e:	4619      	mov	r1, r3
 8009030:	f000 f84c 	bl	80090cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800905a:	2200      	movs	r2, #0
 800905c:	4619      	mov	r1, r3
 800905e:	f000 f835 	bl	80090cc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	2b0a      	cmp	r3, #10
 800907c:	d80d      	bhi.n	800909a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	33e0      	adds	r3, #224	; 0xe0
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	33e0      	adds	r3, #224	; 0xe0
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	440b      	add	r3, r1
 8009098:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ae:	f3ef 8305 	mrs	r3, IPSR
 80090b2:	607b      	str	r3, [r7, #4]
  return(result);
 80090b4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bf14      	ite	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	2300      	moveq	r3, #0
 80090be:	b2db      	uxtb	r3, r3
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80090d8:	2300      	movs	r3, #0
 80090da:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <osMessagePut+0x1e>
    ticks = 1;
 80090e6:	2301      	movs	r3, #1
 80090e8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80090ea:	f7ff ffdd 	bl	80090a8 <inHandlerMode>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d018      	beq.n	8009126 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80090f4:	f107 0210 	add.w	r2, r7, #16
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	2300      	movs	r3, #0
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f9aa 	bl	8009458 <xQueueGenericSendFromISR>
 8009104:	4603      	mov	r3, r0
 8009106:	2b01      	cmp	r3, #1
 8009108:	d001      	beq.n	800910e <osMessagePut+0x42>
      return osErrorOS;
 800910a:	23ff      	movs	r3, #255	; 0xff
 800910c:	e018      	b.n	8009140 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d014      	beq.n	800913e <osMessagePut+0x72>
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <osMessagePut+0x7c>)
 8009116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	e00b      	b.n	800913e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009126:	f107 0108 	add.w	r1, r7, #8
 800912a:	2300      	movs	r3, #0
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 f894 	bl	800925c <xQueueGenericSend>
 8009134:	4603      	mov	r3, r0
 8009136:	2b01      	cmp	r3, #1
 8009138:	d001      	beq.n	800913e <osMessagePut+0x72>
      return osErrorOS;
 800913a:	23ff      	movs	r3, #255	; 0xff
 800913c:	e000      	b.n	8009140 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
}
 8009188:	bf00      	nop
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091aa:	d103      	bne.n	80091b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	e00c      	b.n	80091ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3308      	adds	r3, #8
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	e002      	b.n	80091c2 <vListInsert+0x2e>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d2f6      	bcs.n	80091bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	685a      	ldr	r2, [r3, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	601a      	str	r2, [r3, #0]
}
 80091fa:	bf00      	nop
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6892      	ldr	r2, [r2, #8]
 800921c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	6852      	ldr	r2, [r2, #4]
 8009226:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	429a      	cmp	r2, r3
 8009230:	d103      	bne.n	800923a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689a      	ldr	r2, [r3, #8]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	1e5a      	subs	r2, r3, #1
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
	...

0800925c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08e      	sub	sp, #56	; 0x38
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800926a:	2300      	movs	r3, #0
 800926c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10a      	bne.n	800928e <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800928a:	bf00      	nop
 800928c:	e7fe      	b.n	800928c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d103      	bne.n	800929c <xQueueGenericSend+0x40>
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <xQueueGenericSend+0x44>
 800929c:	2301      	movs	r3, #1
 800929e:	e000      	b.n	80092a2 <xQueueGenericSend+0x46>
 80092a0:	2300      	movs	r3, #0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <xQueueGenericSend+0x60>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d103      	bne.n	80092ca <xQueueGenericSend+0x6e>
 80092c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d101      	bne.n	80092ce <xQueueGenericSend+0x72>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <xQueueGenericSend+0x74>
 80092ce:	2300      	movs	r3, #0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <xQueueGenericSend+0x8e>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	623b      	str	r3, [r7, #32]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ea:	f000 fd31 	bl	8009d50 <xTaskGetSchedulerState>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d102      	bne.n	80092fa <xQueueGenericSend+0x9e>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <xQueueGenericSend+0xa2>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <xQueueGenericSend+0xa4>
 80092fe:	2300      	movs	r3, #0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueGenericSend+0xbe>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	61fb      	str	r3, [r7, #28]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800931a:	f000 fe3d 	bl	8009f98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	429a      	cmp	r2, r3
 8009328:	d302      	bcc.n	8009330 <xQueueGenericSend+0xd4>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b02      	cmp	r3, #2
 800932e:	d129      	bne.n	8009384 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	68b9      	ldr	r1, [r7, #8]
 8009334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009336:	f000 f92a 	bl	800958e <prvCopyDataToQueue>
 800933a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d010      	beq.n	8009366 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	3324      	adds	r3, #36	; 0x24
 8009348:	4618      	mov	r0, r3
 800934a:	f000 fbfb 	bl	8009b44 <xTaskRemoveFromEventList>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d013      	beq.n	800937c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009354:	4b3f      	ldr	r3, [pc, #252]	; (8009454 <xQueueGenericSend+0x1f8>)
 8009356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	e00a      	b.n	800937c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d007      	beq.n	800937c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800936c:	4b39      	ldr	r3, [pc, #228]	; (8009454 <xQueueGenericSend+0x1f8>)
 800936e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800937c:	f000 fe3c 	bl	8009ff8 <vPortExitCritical>
				return pdPASS;
 8009380:	2301      	movs	r3, #1
 8009382:	e063      	b.n	800944c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d103      	bne.n	8009392 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800938a:	f000 fe35 	bl	8009ff8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800938e:	2300      	movs	r3, #0
 8009390:	e05c      	b.n	800944c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009398:	f107 0314 	add.w	r3, r7, #20
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fc33 	bl	8009c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093a2:	2301      	movs	r3, #1
 80093a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093a6:	f000 fe27 	bl	8009ff8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093aa:	f000 f9c5 	bl	8009738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ae:	f000 fdf3 	bl	8009f98 <vPortEnterCritical>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093b8:	b25b      	sxtb	r3, r3
 80093ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093be:	d103      	bne.n	80093c8 <xQueueGenericSend+0x16c>
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ce:	b25b      	sxtb	r3, r3
 80093d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093d4:	d103      	bne.n	80093de <xQueueGenericSend+0x182>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093de:	f000 fe0b 	bl	8009ff8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093e2:	1d3a      	adds	r2, r7, #4
 80093e4:	f107 0314 	add.w	r3, r7, #20
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fc22 	bl	8009c34 <xTaskCheckForTimeOut>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d124      	bne.n	8009440 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093f8:	f000 f985 	bl	8009706 <prvIsQueueFull>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d018      	beq.n	8009434 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	3310      	adds	r3, #16
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fb76 	bl	8009afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009412:	f000 f926 	bl	8009662 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009416:	f000 f99d 	bl	8009754 <xTaskResumeAll>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	f47f af7c 	bne.w	800931a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009422:	4b0c      	ldr	r3, [pc, #48]	; (8009454 <xQueueGenericSend+0x1f8>)
 8009424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	e772      	b.n	800931a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009436:	f000 f914 	bl	8009662 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800943a:	f000 f98b 	bl	8009754 <xTaskResumeAll>
 800943e:	e76c      	b.n	800931a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009442:	f000 f90e 	bl	8009662 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009446:	f000 f985 	bl	8009754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800944a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800944c:	4618      	mov	r0, r3
 800944e:	3738      	adds	r7, #56	; 0x38
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	e000ed04 	.word	0xe000ed04

08009458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b090      	sub	sp, #64	; 0x40
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d103      	bne.n	8009494 <xQueueGenericSendFromISR+0x3c>
 800948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <xQueueGenericSendFromISR+0x40>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <xQueueGenericSendFromISR+0x42>
 8009498:	2300      	movs	r3, #0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d103      	bne.n	80094c2 <xQueueGenericSendFromISR+0x6a>
 80094ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d101      	bne.n	80094c6 <xQueueGenericSendFromISR+0x6e>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e000      	b.n	80094c8 <xQueueGenericSendFromISR+0x70>
 80094c6:	2300      	movs	r3, #0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	623b      	str	r3, [r7, #32]
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094e2:	f000 fe0b 	bl	800a0fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094e6:	f3ef 8211 	mrs	r2, BASEPRI
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	61fa      	str	r2, [r7, #28]
 80094fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009500:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950a:	429a      	cmp	r2, r3
 800950c:	d302      	bcc.n	8009514 <xQueueGenericSendFromISR+0xbc>
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b02      	cmp	r3, #2
 8009512:	d12f      	bne.n	8009574 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800951a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009522:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	68b9      	ldr	r1, [r7, #8]
 8009528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800952a:	f000 f830 	bl	800958e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800952e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009536:	d112      	bne.n	800955e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	2b00      	cmp	r3, #0
 800953e:	d016      	beq.n	800956e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	3324      	adds	r3, #36	; 0x24
 8009544:	4618      	mov	r0, r3
 8009546:	f000 fafd 	bl	8009b44 <xTaskRemoveFromEventList>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00e      	beq.n	800956e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	e007      	b.n	800956e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800955e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009562:	3301      	adds	r3, #1
 8009564:	b2db      	uxtb	r3, r3
 8009566:	b25a      	sxtb	r2, r3
 8009568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800956e:	2301      	movs	r3, #1
 8009570:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009572:	e001      	b.n	8009578 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009574:	2300      	movs	r3, #0
 8009576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009582:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009586:	4618      	mov	r0, r3
 8009588:	3740      	adds	r7, #64	; 0x40
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b086      	sub	sp, #24
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10d      	bne.n	80095c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d14d      	bne.n	8009650 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 fbe7 	bl	8009d8c <xTaskPriorityDisinherit>
 80095be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	609a      	str	r2, [r3, #8]
 80095c6:	e043      	b.n	8009650 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d119      	bne.n	8009602 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6858      	ldr	r0, [r3, #4]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	461a      	mov	r2, r3
 80095d8:	68b9      	ldr	r1, [r7, #8]
 80095da:	f000 fe93 	bl	800a304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	441a      	add	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d32b      	bcc.n	8009650 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	605a      	str	r2, [r3, #4]
 8009600:	e026      	b.n	8009650 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	68d8      	ldr	r0, [r3, #12]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	461a      	mov	r2, r3
 800960c:	68b9      	ldr	r1, [r7, #8]
 800960e:	f000 fe79 	bl	800a304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	425b      	negs	r3, r3
 800961c:	441a      	add	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d207      	bcs.n	800963e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009636:	425b      	negs	r3, r3
 8009638:	441a      	add	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b02      	cmp	r3, #2
 8009642:	d105      	bne.n	8009650 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d002      	beq.n	8009650 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	3b01      	subs	r3, #1
 800964e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009658:	697b      	ldr	r3, [r7, #20]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800966a:	f000 fc95 	bl	8009f98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009674:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009676:	e011      	b.n	800969c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967c:	2b00      	cmp	r3, #0
 800967e:	d012      	beq.n	80096a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3324      	adds	r3, #36	; 0x24
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fa5d 	bl	8009b44 <xTaskRemoveFromEventList>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009690:	f000 fb32 	bl	8009cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	3b01      	subs	r3, #1
 8009698:	b2db      	uxtb	r3, r3
 800969a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800969c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	dce9      	bgt.n	8009678 <prvUnlockQueue+0x16>
 80096a4:	e000      	b.n	80096a8 <prvUnlockQueue+0x46>
					break;
 80096a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	22ff      	movs	r2, #255	; 0xff
 80096ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80096b0:	f000 fca2 	bl	8009ff8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80096b4:	f000 fc70 	bl	8009f98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096c0:	e011      	b.n	80096e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d012      	beq.n	80096f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	3310      	adds	r3, #16
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 fa38 	bl	8009b44 <xTaskRemoveFromEventList>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80096da:	f000 fb0d 	bl	8009cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dce9      	bgt.n	80096c2 <prvUnlockQueue+0x60>
 80096ee:	e000      	b.n	80096f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	22ff      	movs	r2, #255	; 0xff
 80096f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80096fa:	f000 fc7d 	bl	8009ff8 <vPortExitCritical>
}
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800970e:	f000 fc43 	bl	8009f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971a:	429a      	cmp	r2, r3
 800971c:	d102      	bne.n	8009724 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800971e:	2301      	movs	r3, #1
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e001      	b.n	8009728 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009724:	2300      	movs	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009728:	f000 fc66 	bl	8009ff8 <vPortExitCritical>

	return xReturn;
 800972c:	68fb      	ldr	r3, [r7, #12]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800973c:	4b04      	ldr	r3, [pc, #16]	; (8009750 <vTaskSuspendAll+0x18>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	4a03      	ldr	r2, [pc, #12]	; (8009750 <vTaskSuspendAll+0x18>)
 8009744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009746:	bf00      	nop
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	20000300 	.word	0x20000300

08009754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800975e:	2300      	movs	r3, #0
 8009760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009762:	4b41      	ldr	r3, [pc, #260]	; (8009868 <xTaskResumeAll+0x114>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <xTaskResumeAll+0x2c>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	603b      	str	r3, [r7, #0]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009780:	f000 fc0a 	bl	8009f98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009784:	4b38      	ldr	r3, [pc, #224]	; (8009868 <xTaskResumeAll+0x114>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3b01      	subs	r3, #1
 800978a:	4a37      	ldr	r2, [pc, #220]	; (8009868 <xTaskResumeAll+0x114>)
 800978c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800978e:	4b36      	ldr	r3, [pc, #216]	; (8009868 <xTaskResumeAll+0x114>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d161      	bne.n	800985a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009796:	4b35      	ldr	r3, [pc, #212]	; (800986c <xTaskResumeAll+0x118>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d05d      	beq.n	800985a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800979e:	e02e      	b.n	80097fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a0:	4b33      	ldr	r3, [pc, #204]	; (8009870 <xTaskResumeAll+0x11c>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3318      	adds	r3, #24
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff fd2a 	bl	8009206 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3304      	adds	r3, #4
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fd25 	bl	8009206 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	2201      	movs	r2, #1
 80097c2:	409a      	lsls	r2, r3
 80097c4:	4b2b      	ldr	r3, [pc, #172]	; (8009874 <xTaskResumeAll+0x120>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	4a2a      	ldr	r2, [pc, #168]	; (8009874 <xTaskResumeAll+0x120>)
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4a27      	ldr	r2, [pc, #156]	; (8009878 <xTaskResumeAll+0x124>)
 80097dc:	441a      	add	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3304      	adds	r3, #4
 80097e2:	4619      	mov	r1, r3
 80097e4:	4610      	mov	r0, r2
 80097e6:	f7ff fcb1 	bl	800914c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ee:	4b23      	ldr	r3, [pc, #140]	; (800987c <xTaskResumeAll+0x128>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d302      	bcc.n	80097fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80097f8:	4b21      	ldr	r3, [pc, #132]	; (8009880 <xTaskResumeAll+0x12c>)
 80097fa:	2201      	movs	r2, #1
 80097fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097fe:	4b1c      	ldr	r3, [pc, #112]	; (8009870 <xTaskResumeAll+0x11c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1cc      	bne.n	80097a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800980c:	f000 fa80 	bl	8009d10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009810:	4b1c      	ldr	r3, [pc, #112]	; (8009884 <xTaskResumeAll+0x130>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d010      	beq.n	800983e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800981c:	f000 f836 	bl	800988c <xTaskIncrementTick>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009826:	4b16      	ldr	r3, [pc, #88]	; (8009880 <xTaskResumeAll+0x12c>)
 8009828:	2201      	movs	r2, #1
 800982a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	3b01      	subs	r3, #1
 8009830:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1f1      	bne.n	800981c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009838:	4b12      	ldr	r3, [pc, #72]	; (8009884 <xTaskResumeAll+0x130>)
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800983e:	4b10      	ldr	r3, [pc, #64]	; (8009880 <xTaskResumeAll+0x12c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d009      	beq.n	800985a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009846:	2301      	movs	r3, #1
 8009848:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800984a:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <xTaskResumeAll+0x134>)
 800984c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800985a:	f000 fbcd 	bl	8009ff8 <vPortExitCritical>

	return xAlreadyYielded;
 800985e:	68bb      	ldr	r3, [r7, #8]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20000300 	.word	0x20000300
 800986c:	200002e0 	.word	0x200002e0
 8009870:	200002b8 	.word	0x200002b8
 8009874:	200002e8 	.word	0x200002e8
 8009878:	20000224 	.word	0x20000224
 800987c:	20000220 	.word	0x20000220
 8009880:	200002f4 	.word	0x200002f4
 8009884:	200002f0 	.word	0x200002f0
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009892:	2300      	movs	r3, #0
 8009894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009896:	4b4e      	ldr	r3, [pc, #312]	; (80099d0 <xTaskIncrementTick+0x144>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f040 808e 	bne.w	80099bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098a0:	4b4c      	ldr	r3, [pc, #304]	; (80099d4 <xTaskIncrementTick+0x148>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	3301      	adds	r3, #1
 80098a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098a8:	4a4a      	ldr	r2, [pc, #296]	; (80099d4 <xTaskIncrementTick+0x148>)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d120      	bne.n	80098f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80098b4:	4b48      	ldr	r3, [pc, #288]	; (80099d8 <xTaskIncrementTick+0x14c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00a      	beq.n	80098d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	603b      	str	r3, [r7, #0]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <xTaskIncrementTick+0x46>
 80098d4:	4b40      	ldr	r3, [pc, #256]	; (80099d8 <xTaskIncrementTick+0x14c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60fb      	str	r3, [r7, #12]
 80098da:	4b40      	ldr	r3, [pc, #256]	; (80099dc <xTaskIncrementTick+0x150>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a3e      	ldr	r2, [pc, #248]	; (80099d8 <xTaskIncrementTick+0x14c>)
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	4a3e      	ldr	r2, [pc, #248]	; (80099dc <xTaskIncrementTick+0x150>)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	4b3d      	ldr	r3, [pc, #244]	; (80099e0 <xTaskIncrementTick+0x154>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	4a3c      	ldr	r2, [pc, #240]	; (80099e0 <xTaskIncrementTick+0x154>)
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	f000 fa0d 	bl	8009d10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098f6:	4b3b      	ldr	r3, [pc, #236]	; (80099e4 <xTaskIncrementTick+0x158>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d348      	bcc.n	8009992 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009900:	4b35      	ldr	r3, [pc, #212]	; (80099d8 <xTaskIncrementTick+0x14c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d104      	bne.n	8009914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800990a:	4b36      	ldr	r3, [pc, #216]	; (80099e4 <xTaskIncrementTick+0x158>)
 800990c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009910:	601a      	str	r2, [r3, #0]
					break;
 8009912:	e03e      	b.n	8009992 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009914:	4b30      	ldr	r3, [pc, #192]	; (80099d8 <xTaskIncrementTick+0x14c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	429a      	cmp	r2, r3
 800992a:	d203      	bcs.n	8009934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800992c:	4a2d      	ldr	r2, [pc, #180]	; (80099e4 <xTaskIncrementTick+0x158>)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009932:	e02e      	b.n	8009992 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	3304      	adds	r3, #4
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fc64 	bl	8009206 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009942:	2b00      	cmp	r3, #0
 8009944:	d004      	beq.n	8009950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	3318      	adds	r3, #24
 800994a:	4618      	mov	r0, r3
 800994c:	f7ff fc5b 	bl	8009206 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009954:	2201      	movs	r2, #1
 8009956:	409a      	lsls	r2, r3
 8009958:	4b23      	ldr	r3, [pc, #140]	; (80099e8 <xTaskIncrementTick+0x15c>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4313      	orrs	r3, r2
 800995e:	4a22      	ldr	r2, [pc, #136]	; (80099e8 <xTaskIncrementTick+0x15c>)
 8009960:	6013      	str	r3, [r2, #0]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009966:	4613      	mov	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4a1f      	ldr	r2, [pc, #124]	; (80099ec <xTaskIncrementTick+0x160>)
 8009970:	441a      	add	r2, r3
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	3304      	adds	r3, #4
 8009976:	4619      	mov	r1, r3
 8009978:	4610      	mov	r0, r2
 800997a:	f7ff fbe7 	bl	800914c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009982:	4b1b      	ldr	r3, [pc, #108]	; (80099f0 <xTaskIncrementTick+0x164>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	429a      	cmp	r2, r3
 800998a:	d3b9      	bcc.n	8009900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800998c:	2301      	movs	r3, #1
 800998e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009990:	e7b6      	b.n	8009900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009992:	4b17      	ldr	r3, [pc, #92]	; (80099f0 <xTaskIncrementTick+0x164>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009998:	4914      	ldr	r1, [pc, #80]	; (80099ec <xTaskIncrementTick+0x160>)
 800999a:	4613      	mov	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d901      	bls.n	80099ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80099aa:	2301      	movs	r3, #1
 80099ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099ae:	4b11      	ldr	r3, [pc, #68]	; (80099f4 <xTaskIncrementTick+0x168>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d007      	beq.n	80099c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80099b6:	2301      	movs	r3, #1
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e004      	b.n	80099c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099bc:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <xTaskIncrementTick+0x16c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	4a0d      	ldr	r2, [pc, #52]	; (80099f8 <xTaskIncrementTick+0x16c>)
 80099c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099c6:	697b      	ldr	r3, [r7, #20]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	20000300 	.word	0x20000300
 80099d4:	200002e4 	.word	0x200002e4
 80099d8:	200002b0 	.word	0x200002b0
 80099dc:	200002b4 	.word	0x200002b4
 80099e0:	200002f8 	.word	0x200002f8
 80099e4:	200002fc 	.word	0x200002fc
 80099e8:	200002e8 	.word	0x200002e8
 80099ec:	20000224 	.word	0x20000224
 80099f0:	20000220 	.word	0x20000220
 80099f4:	200002f4 	.word	0x200002f4
 80099f8:	200002f0 	.word	0x200002f0

080099fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a02:	4b39      	ldr	r3, [pc, #228]	; (8009ae8 <vTaskSwitchContext+0xec>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d003      	beq.n	8009a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a0a:	4b38      	ldr	r3, [pc, #224]	; (8009aec <vTaskSwitchContext+0xf0>)
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a10:	e066      	b.n	8009ae0 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8009a12:	4b36      	ldr	r3, [pc, #216]	; (8009aec <vTaskSwitchContext+0xf0>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009a18:	4b35      	ldr	r3, [pc, #212]	; (8009af0 <vTaskSwitchContext+0xf4>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	61fb      	str	r3, [r7, #28]
 8009a20:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009a24:	61bb      	str	r3, [r7, #24]
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d111      	bne.n	8009a54 <vTaskSwitchContext+0x58>
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	3304      	adds	r3, #4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69ba      	ldr	r2, [r7, #24]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d10b      	bne.n	8009a54 <vTaskSwitchContext+0x58>
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	3308      	adds	r3, #8
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69ba      	ldr	r2, [r7, #24]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d105      	bne.n	8009a54 <vTaskSwitchContext+0x58>
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	330c      	adds	r3, #12
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d008      	beq.n	8009a66 <vTaskSwitchContext+0x6a>
 8009a54:	4b26      	ldr	r3, [pc, #152]	; (8009af0 <vTaskSwitchContext+0xf4>)
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	4b25      	ldr	r3, [pc, #148]	; (8009af0 <vTaskSwitchContext+0xf4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3334      	adds	r3, #52	; 0x34
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f7f6 fd41 	bl	80004e8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a66:	4b23      	ldr	r3, [pc, #140]	; (8009af4 <vTaskSwitchContext+0xf8>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	fab3 f383 	clz	r3, r3
 8009a72:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	f1c3 031f 	rsb	r3, r3, #31
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	491e      	ldr	r1, [pc, #120]	; (8009af8 <vTaskSwitchContext+0xfc>)
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <vTaskSwitchContext+0xaa>
	__asm volatile
 8009a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a94:	f383 8811 	msr	BASEPRI, r3
 8009a98:	f3bf 8f6f 	isb	sy
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	607b      	str	r3, [r7, #4]
}
 8009aa2:	bf00      	nop
 8009aa4:	e7fe      	b.n	8009aa4 <vTaskSwitchContext+0xa8>
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4a11      	ldr	r2, [pc, #68]	; (8009af8 <vTaskSwitchContext+0xfc>)
 8009ab2:	4413      	add	r3, r2
 8009ab4:	613b      	str	r3, [r7, #16]
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	605a      	str	r2, [r3, #4]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d104      	bne.n	8009ad6 <vTaskSwitchContext+0xda>
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	605a      	str	r2, [r3, #4]
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	4a04      	ldr	r2, [pc, #16]	; (8009af0 <vTaskSwitchContext+0xf4>)
 8009ade:	6013      	str	r3, [r2, #0]
}
 8009ae0:	bf00      	nop
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20000300 	.word	0x20000300
 8009aec:	200002f4 	.word	0x200002f4
 8009af0:	20000220 	.word	0x20000220
 8009af4:	200002e8 	.word	0x200002e8
 8009af8:	20000224 	.word	0x20000224

08009afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10a      	bne.n	8009b22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	60fb      	str	r3, [r7, #12]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b22:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <vTaskPlaceOnEventList+0x44>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3318      	adds	r3, #24
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff fb32 	bl	8009194 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b30:	2101      	movs	r1, #1
 8009b32:	6838      	ldr	r0, [r7, #0]
 8009b34:	f000 f9b0 	bl	8009e98 <prvAddCurrentTaskToDelayedList>
}
 8009b38:	bf00      	nop
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	20000220 	.word	0x20000220

08009b44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10a      	bne.n	8009b70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	60fb      	str	r3, [r7, #12]
}
 8009b6c:	bf00      	nop
 8009b6e:	e7fe      	b.n	8009b6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	3318      	adds	r3, #24
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff fb46 	bl	8009206 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b7a:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <xTaskRemoveFromEventList+0xac>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d11c      	bne.n	8009bbc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	3304      	adds	r3, #4
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fb3d 	bl	8009206 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b90:	2201      	movs	r2, #1
 8009b92:	409a      	lsls	r2, r3
 8009b94:	4b17      	ldr	r3, [pc, #92]	; (8009bf4 <xTaskRemoveFromEventList+0xb0>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	4a16      	ldr	r2, [pc, #88]	; (8009bf4 <xTaskRemoveFromEventList+0xb0>)
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4a13      	ldr	r2, [pc, #76]	; (8009bf8 <xTaskRemoveFromEventList+0xb4>)
 8009bac:	441a      	add	r2, r3
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f7ff fac9 	bl	800914c <vListInsertEnd>
 8009bba:	e005      	b.n	8009bc8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	3318      	adds	r3, #24
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	480e      	ldr	r0, [pc, #56]	; (8009bfc <xTaskRemoveFromEventList+0xb8>)
 8009bc4:	f7ff fac2 	bl	800914c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bcc:	4b0c      	ldr	r3, [pc, #48]	; (8009c00 <xTaskRemoveFromEventList+0xbc>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d905      	bls.n	8009be2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bda:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <xTaskRemoveFromEventList+0xc0>)
 8009bdc:	2201      	movs	r2, #1
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	e001      	b.n	8009be6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009be6:	697b      	ldr	r3, [r7, #20]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20000300 	.word	0x20000300
 8009bf4:	200002e8 	.word	0x200002e8
 8009bf8:	20000224 	.word	0x20000224
 8009bfc:	200002b8 	.word	0x200002b8
 8009c00:	20000220 	.word	0x20000220
 8009c04:	200002f4 	.word	0x200002f4

08009c08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c10:	4b06      	ldr	r3, [pc, #24]	; (8009c2c <vTaskInternalSetTimeOutState+0x24>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c18:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <vTaskInternalSetTimeOutState+0x28>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	605a      	str	r2, [r3, #4]
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	200002f8 	.word	0x200002f8
 8009c30:	200002e4 	.word	0x200002e4

08009c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10a      	bne.n	8009c5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	613b      	str	r3, [r7, #16]
}
 8009c56:	bf00      	nop
 8009c58:	e7fe      	b.n	8009c58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10a      	bne.n	8009c76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60fb      	str	r3, [r7, #12]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009c76:	f000 f98f 	bl	8009f98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c7a:	4b1d      	ldr	r3, [pc, #116]	; (8009cf0 <xTaskCheckForTimeOut+0xbc>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	69ba      	ldr	r2, [r7, #24]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c92:	d102      	bne.n	8009c9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	61fb      	str	r3, [r7, #28]
 8009c98:	e023      	b.n	8009ce2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <xTaskCheckForTimeOut+0xc0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d007      	beq.n	8009cb6 <xTaskCheckForTimeOut+0x82>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d302      	bcc.n	8009cb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	61fb      	str	r3, [r7, #28]
 8009cb4:	e015      	b.n	8009ce2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d20b      	bcs.n	8009cd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	1ad2      	subs	r2, r2, r3
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ff9b 	bl	8009c08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	61fb      	str	r3, [r7, #28]
 8009cd6:	e004      	b.n	8009ce2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ce2:	f000 f989 	bl	8009ff8 <vPortExitCritical>

	return xReturn;
 8009ce6:	69fb      	ldr	r3, [r7, #28]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3720      	adds	r7, #32
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	200002e4 	.word	0x200002e4
 8009cf4:	200002f8 	.word	0x200002f8

08009cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cfc:	4b03      	ldr	r3, [pc, #12]	; (8009d0c <vTaskMissedYield+0x14>)
 8009cfe:	2201      	movs	r2, #1
 8009d00:	601a      	str	r2, [r3, #0]
}
 8009d02:	bf00      	nop
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	200002f4 	.word	0x200002f4

08009d10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d16:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <prvResetNextTaskUnblockTime+0x38>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d104      	bne.n	8009d2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d20:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <prvResetNextTaskUnblockTime+0x3c>)
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d28:	e008      	b.n	8009d3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <prvResetNextTaskUnblockTime+0x38>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	4a04      	ldr	r2, [pc, #16]	; (8009d4c <prvResetNextTaskUnblockTime+0x3c>)
 8009d3a:	6013      	str	r3, [r2, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	200002b0 	.word	0x200002b0
 8009d4c:	200002fc 	.word	0x200002fc

08009d50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d56:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <xTaskGetSchedulerState+0x34>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d102      	bne.n	8009d64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	607b      	str	r3, [r7, #4]
 8009d62:	e008      	b.n	8009d76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d64:	4b08      	ldr	r3, [pc, #32]	; (8009d88 <xTaskGetSchedulerState+0x38>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	607b      	str	r3, [r7, #4]
 8009d70:	e001      	b.n	8009d76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d72:	2300      	movs	r3, #0
 8009d74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d76:	687b      	ldr	r3, [r7, #4]
	}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	200002ec 	.word	0x200002ec
 8009d88:	20000300 	.word	0x20000300

08009d8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d06e      	beq.n	8009e80 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009da2:	4b3a      	ldr	r3, [pc, #232]	; (8009e8c <xTaskPriorityDisinherit+0x100>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d00a      	beq.n	8009dc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	60fb      	str	r3, [r7, #12]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10a      	bne.n	8009de0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	60bb      	str	r3, [r7, #8]
}
 8009ddc:	bf00      	nop
 8009dde:	e7fe      	b.n	8009dde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d044      	beq.n	8009e80 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d140      	bne.n	8009e80 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff f9ff 	bl	8009206 <uxListRemove>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d115      	bne.n	8009e3a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e12:	491f      	ldr	r1, [pc, #124]	; (8009e90 <xTaskPriorityDisinherit+0x104>)
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <xTaskPriorityDisinherit+0xae>
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e28:	2201      	movs	r2, #1
 8009e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2e:	43da      	mvns	r2, r3
 8009e30:	4b18      	ldr	r3, [pc, #96]	; (8009e94 <xTaskPriorityDisinherit+0x108>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4013      	ands	r3, r2
 8009e36:	4a17      	ldr	r2, [pc, #92]	; (8009e94 <xTaskPriorityDisinherit+0x108>)
 8009e38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	f1c3 0207 	rsb	r2, r3, #7
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	2201      	movs	r2, #1
 8009e54:	409a      	lsls	r2, r3
 8009e56:	4b0f      	ldr	r3, [pc, #60]	; (8009e94 <xTaskPriorityDisinherit+0x108>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	4a0d      	ldr	r2, [pc, #52]	; (8009e94 <xTaskPriorityDisinherit+0x108>)
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4a08      	ldr	r2, [pc, #32]	; (8009e90 <xTaskPriorityDisinherit+0x104>)
 8009e6e:	441a      	add	r2, r3
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f7ff f968 	bl	800914c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e80:	697b      	ldr	r3, [r7, #20]
	}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20000220 	.word	0x20000220
 8009e90:	20000224 	.word	0x20000224
 8009e94:	200002e8 	.word	0x200002e8

08009e98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ea2:	4b29      	ldr	r3, [pc, #164]	; (8009f48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ea8:	4b28      	ldr	r3, [pc, #160]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3304      	adds	r3, #4
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff f9a9 	bl	8009206 <uxListRemove>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009eba:	4b24      	ldr	r3, [pc, #144]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec6:	43da      	mvns	r2, r3
 8009ec8:	4b21      	ldr	r3, [pc, #132]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	4a20      	ldr	r2, [pc, #128]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ed0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ed8:	d10a      	bne.n	8009ef0 <prvAddCurrentTaskToDelayedList+0x58>
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d007      	beq.n	8009ef0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ee0:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	481a      	ldr	r0, [pc, #104]	; (8009f54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009eea:	f7ff f92f 	bl	800914c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009eee:	e026      	b.n	8009f3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ef8:	4b14      	ldr	r3, [pc, #80]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d209      	bcs.n	8009f1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f08:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4619      	mov	r1, r3
 8009f14:	4610      	mov	r0, r2
 8009f16:	f7ff f93d 	bl	8009194 <vListInsert>
}
 8009f1a:	e010      	b.n	8009f3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f1c:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f7ff f933 	bl	8009194 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d202      	bcs.n	8009f3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f38:	4a09      	ldr	r2, [pc, #36]	; (8009f60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6013      	str	r3, [r2, #0]
}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	200002e4 	.word	0x200002e4
 8009f4c:	20000220 	.word	0x20000220
 8009f50:	200002e8 	.word	0x200002e8
 8009f54:	200002cc 	.word	0x200002cc
 8009f58:	200002b4 	.word	0x200002b4
 8009f5c:	200002b0 	.word	0x200002b0
 8009f60:	200002fc 	.word	0x200002fc
	...

08009f70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <pxCurrentTCBConst2>)
 8009f72:	6819      	ldr	r1, [r3, #0]
 8009f74:	6808      	ldr	r0, [r1, #0]
 8009f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7a:	f380 8809 	msr	PSP, r0
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f04f 0000 	mov.w	r0, #0
 8009f86:	f380 8811 	msr	BASEPRI, r0
 8009f8a:	4770      	bx	lr
 8009f8c:	f3af 8000 	nop.w

08009f90 <pxCurrentTCBConst2>:
 8009f90:	20000220 	.word	0x20000220
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f94:	bf00      	nop
 8009f96:	bf00      	nop

08009f98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	607b      	str	r3, [r7, #4]
}
 8009fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fb2:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <vPortEnterCritical+0x58>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	4a0d      	ldr	r2, [pc, #52]	; (8009ff0 <vPortEnterCritical+0x58>)
 8009fba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fbc:	4b0c      	ldr	r3, [pc, #48]	; (8009ff0 <vPortEnterCritical+0x58>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d10f      	bne.n	8009fe4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fc4:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <vPortEnterCritical+0x5c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <vPortEnterCritical+0x4c>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	603b      	str	r3, [r7, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	e7fe      	b.n	8009fe2 <vPortEnterCritical+0x4a>
	}
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	20000054 	.word	0x20000054
 8009ff4:	e000ed04 	.word	0xe000ed04

08009ff8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ffe:	4b12      	ldr	r3, [pc, #72]	; (800a048 <vPortExitCritical+0x50>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10a      	bne.n	800a01c <vPortExitCritical+0x24>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	607b      	str	r3, [r7, #4]
}
 800a018:	bf00      	nop
 800a01a:	e7fe      	b.n	800a01a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a01c:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <vPortExitCritical+0x50>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3b01      	subs	r3, #1
 800a022:	4a09      	ldr	r2, [pc, #36]	; (800a048 <vPortExitCritical+0x50>)
 800a024:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a026:	4b08      	ldr	r3, [pc, #32]	; (800a048 <vPortExitCritical+0x50>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d105      	bne.n	800a03a <vPortExitCritical+0x42>
 800a02e:	2300      	movs	r3, #0
 800a030:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	f383 8811 	msr	BASEPRI, r3
}
 800a038:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a03a:	bf00      	nop
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	20000054 	.word	0x20000054
 800a04c:	00000000 	.word	0x00000000

0800a050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a050:	f3ef 8009 	mrs	r0, PSP
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <pxCurrentTCBConst>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	f01e 0f10 	tst.w	lr, #16
 800a060:	bf08      	it	eq
 800a062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06a:	6010      	str	r0, [r2, #0]
 800a06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a070:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a074:	f380 8811 	msr	BASEPRI, r0
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f7ff fcbc 	bl	80099fc <vTaskSwitchContext>
 800a084:	f04f 0000 	mov.w	r0, #0
 800a088:	f380 8811 	msr	BASEPRI, r0
 800a08c:	bc09      	pop	{r0, r3}
 800a08e:	6819      	ldr	r1, [r3, #0]
 800a090:	6808      	ldr	r0, [r1, #0]
 800a092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a096:	f01e 0f10 	tst.w	lr, #16
 800a09a:	bf08      	it	eq
 800a09c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0a0:	f380 8809 	msr	PSP, r0
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	f3af 8000 	nop.w

0800a0b0 <pxCurrentTCBConst>:
 800a0b0:	20000220 	.word	0x20000220
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop

0800a0b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	607b      	str	r3, [r7, #4]
}
 800a0d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0d2:	f7ff fbdb 	bl	800988c <xTaskIncrementTick>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0dc:	4b06      	ldr	r3, [pc, #24]	; (800a0f8 <SysTick_Handler+0x40>)
 800a0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	f383 8811 	msr	BASEPRI, r3
}
 800a0ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	e000ed04 	.word	0xe000ed04

0800a0fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a102:	f3ef 8305 	mrs	r3, IPSR
 800a106:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b0f      	cmp	r3, #15
 800a10c:	d914      	bls.n	800a138 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a10e:	4a17      	ldr	r2, [pc, #92]	; (800a16c <vPortValidateInterruptPriority+0x70>)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a118:	4b15      	ldr	r3, [pc, #84]	; (800a170 <vPortValidateInterruptPriority+0x74>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	7afa      	ldrb	r2, [r7, #11]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d20a      	bcs.n	800a138 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	607b      	str	r3, [r7, #4]
}
 800a134:	bf00      	nop
 800a136:	e7fe      	b.n	800a136 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a138:	4b0e      	ldr	r3, [pc, #56]	; (800a174 <vPortValidateInterruptPriority+0x78>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a140:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <vPortValidateInterruptPriority+0x7c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	d90a      	bls.n	800a15e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	603b      	str	r3, [r7, #0]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <vPortValidateInterruptPriority+0x60>
	}
 800a15e:	bf00      	nop
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	e000e3f0 	.word	0xe000e3f0
 800a170:	20000304 	.word	0x20000304
 800a174:	e000ed0c 	.word	0xe000ed0c
 800a178:	20000308 	.word	0x20000308

0800a17c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe feb0 	bl	8008ef0 <USBH_LL_IncTimer>
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe fef4 	bl	8008f94 <USBH_LL_Connect>
}
 800a1ac:	bf00      	nop
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fe ff09 	bl	8008fda <USBH_LL_Disconnect>
}
 800a1c8:	bf00      	nop
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe ff29 	bl	800903e <USBH_LL_NotifyURBChange>
#endif
}
 800a1ec:	bf00      	nop
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fe9e 	bl	8008f44 <USBH_LL_PortEnabled>
}
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe feaa 	bl	8008f78 <USBH_LL_PortDisabled>
}
 800a224:	bf00      	nop
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a242:	4618      	mov	r0, r3
 800a244:	f7fa f814 	bl	8004270 <HAL_HCD_Stop>
 800a248:	4603      	mov	r3, r0
 800a24a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a24c:	7bfb      	ldrb	r3, [r7, #15]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f808 	bl	800a264 <USBH_Get_USB_Status>
 800a254:	4603      	mov	r3, r0
 800a256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a258:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a272:	79fb      	ldrb	r3, [r7, #7]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d817      	bhi.n	800a2a8 <USBH_Get_USB_Status+0x44>
 800a278:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <USBH_Get_USB_Status+0x1c>)
 800a27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27e:	bf00      	nop
 800a280:	0800a291 	.word	0x0800a291
 800a284:	0800a297 	.word	0x0800a297
 800a288:	0800a29d 	.word	0x0800a29d
 800a28c:	0800a2a3 	.word	0x0800a2a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	73fb      	strb	r3, [r7, #15]
    break;
 800a294:	e00b      	b.n	800a2ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a296:	2302      	movs	r3, #2
 800a298:	73fb      	strb	r3, [r7, #15]
    break;
 800a29a:	e008      	b.n	800a2ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a29c:	2301      	movs	r3, #1
 800a29e:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a0:	e005      	b.n	800a2ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a6:	e002      	b.n	800a2ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ac:	bf00      	nop
  }
  return usb_status;
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <__libc_init_array>:
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	4d0d      	ldr	r5, [pc, #52]	; (800a2f4 <__libc_init_array+0x38>)
 800a2c0:	4c0d      	ldr	r4, [pc, #52]	; (800a2f8 <__libc_init_array+0x3c>)
 800a2c2:	1b64      	subs	r4, r4, r5
 800a2c4:	10a4      	asrs	r4, r4, #2
 800a2c6:	2600      	movs	r6, #0
 800a2c8:	42a6      	cmp	r6, r4
 800a2ca:	d109      	bne.n	800a2e0 <__libc_init_array+0x24>
 800a2cc:	4d0b      	ldr	r5, [pc, #44]	; (800a2fc <__libc_init_array+0x40>)
 800a2ce:	4c0c      	ldr	r4, [pc, #48]	; (800a300 <__libc_init_array+0x44>)
 800a2d0:	f000 f82e 	bl	800a330 <_init>
 800a2d4:	1b64      	subs	r4, r4, r5
 800a2d6:	10a4      	asrs	r4, r4, #2
 800a2d8:	2600      	movs	r6, #0
 800a2da:	42a6      	cmp	r6, r4
 800a2dc:	d105      	bne.n	800a2ea <__libc_init_array+0x2e>
 800a2de:	bd70      	pop	{r4, r5, r6, pc}
 800a2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e4:	4798      	blx	r3
 800a2e6:	3601      	adds	r6, #1
 800a2e8:	e7ee      	b.n	800a2c8 <__libc_init_array+0xc>
 800a2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ee:	4798      	blx	r3
 800a2f0:	3601      	adds	r6, #1
 800a2f2:	e7f2      	b.n	800a2da <__libc_init_array+0x1e>
 800a2f4:	0800be48 	.word	0x0800be48
 800a2f8:	0800be48 	.word	0x0800be48
 800a2fc:	0800be48 	.word	0x0800be48
 800a300:	0800be4c 	.word	0x0800be4c

0800a304 <memcpy>:
 800a304:	440a      	add	r2, r1
 800a306:	4291      	cmp	r1, r2
 800a308:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a30c:	d100      	bne.n	800a310 <memcpy+0xc>
 800a30e:	4770      	bx	lr
 800a310:	b510      	push	{r4, lr}
 800a312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a31a:	4291      	cmp	r1, r2
 800a31c:	d1f9      	bne.n	800a312 <memcpy+0xe>
 800a31e:	bd10      	pop	{r4, pc}

0800a320 <memset>:
 800a320:	4402      	add	r2, r0
 800a322:	4603      	mov	r3, r0
 800a324:	4293      	cmp	r3, r2
 800a326:	d100      	bne.n	800a32a <memset+0xa>
 800a328:	4770      	bx	lr
 800a32a:	f803 1b01 	strb.w	r1, [r3], #1
 800a32e:	e7f9      	b.n	800a324 <memset+0x4>

0800a330 <_init>:
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	bf00      	nop
 800a334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a336:	bc08      	pop	{r3}
 800a338:	469e      	mov	lr, r3
 800a33a:	4770      	bx	lr

0800a33c <_fini>:
 800a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33e:	bf00      	nop
 800a340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a342:	bc08      	pop	{r3}
 800a344:	469e      	mov	lr, r3
 800a346:	4770      	bx	lr
