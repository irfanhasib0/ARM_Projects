
STM32_DISC_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af4  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc3c  0800bc3c  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc3c  0800bc3c  0001bc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc44  0800bc44  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc44  0800bc44  0001bc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc48  0800bc48  0001bc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800bc4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          00000910  20000058  20000058  00020058  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000968  20000968  00020058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000310b3  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a74  00000000  00000000  0005113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002440  00000000  00000000  00056bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002240  00000000  00000000  00058ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029299  00000000  00000000  0005b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002990f  00000000  00000000  000844c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6585  00000000  00000000  000addd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a435d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009afc  00000000  00000000  001a43b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000058 	.word	0x20000058
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a130 	.word	0x0800a130

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	0800a130 	.word	0x0800a130

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000502:	f000 fe65 	bl	80011d0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000506:	20ca      	movs	r0, #202	; 0xca
 8000508:	f000 f95d 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800050c:	20c3      	movs	r0, #195	; 0xc3
 800050e:	f000 f967 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000512:	2008      	movs	r0, #8
 8000514:	f000 f964 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000518:	2050      	movs	r0, #80	; 0x50
 800051a:	f000 f961 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800051e:	20cf      	movs	r0, #207	; 0xcf
 8000520:	f000 f951 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f95b 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800052a:	20c1      	movs	r0, #193	; 0xc1
 800052c:	f000 f958 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000530:	2030      	movs	r0, #48	; 0x30
 8000532:	f000 f955 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000536:	20ed      	movs	r0, #237	; 0xed
 8000538:	f000 f945 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 f94f 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000542:	2003      	movs	r0, #3
 8000544:	f000 f94c 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000548:	2012      	movs	r0, #18
 800054a:	f000 f949 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800054e:	2081      	movs	r0, #129	; 0x81
 8000550:	f000 f946 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000554:	20e8      	movs	r0, #232	; 0xe8
 8000556:	f000 f936 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800055a:	2085      	movs	r0, #133	; 0x85
 800055c:	f000 f940 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f93d 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000566:	2078      	movs	r0, #120	; 0x78
 8000568:	f000 f93a 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800056c:	20cb      	movs	r0, #203	; 0xcb
 800056e:	f000 f92a 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000572:	2039      	movs	r0, #57	; 0x39
 8000574:	f000 f934 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000578:	202c      	movs	r0, #44	; 0x2c
 800057a:	f000 f931 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 f92e 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000584:	2034      	movs	r0, #52	; 0x34
 8000586:	f000 f92b 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800058a:	2002      	movs	r0, #2
 800058c:	f000 f928 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000590:	20f7      	movs	r0, #247	; 0xf7
 8000592:	f000 f918 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000596:	2020      	movs	r0, #32
 8000598:	f000 f922 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800059c:	20ea      	movs	r0, #234	; 0xea
 800059e:	f000 f912 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f91c 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 f919 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80005ae:	20b1      	movs	r0, #177	; 0xb1
 80005b0:	f000 f909 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 f913 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80005ba:	201b      	movs	r0, #27
 80005bc:	f000 f910 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80005c0:	20b6      	movs	r0, #182	; 0xb6
 80005c2:	f000 f900 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80005c6:	200a      	movs	r0, #10
 80005c8:	f000 f90a 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80005cc:	20a2      	movs	r0, #162	; 0xa2
 80005ce:	f000 f907 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80005d2:	20c0      	movs	r0, #192	; 0xc0
 80005d4:	f000 f8f7 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005d8:	2010      	movs	r0, #16
 80005da:	f000 f901 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80005de:	20c1      	movs	r0, #193	; 0xc1
 80005e0:	f000 f8f1 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80005e4:	2010      	movs	r0, #16
 80005e6:	f000 f8fb 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80005ea:	20c5      	movs	r0, #197	; 0xc5
 80005ec:	f000 f8eb 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80005f0:	2045      	movs	r0, #69	; 0x45
 80005f2:	f000 f8f5 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80005f6:	2015      	movs	r0, #21
 80005f8:	f000 f8f2 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80005fc:	20c7      	movs	r0, #199	; 0xc7
 80005fe:	f000 f8e2 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000602:	2090      	movs	r0, #144	; 0x90
 8000604:	f000 f8ec 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000608:	2036      	movs	r0, #54	; 0x36
 800060a:	f000 f8dc 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800060e:	20c8      	movs	r0, #200	; 0xc8
 8000610:	f000 f8e6 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000614:	20f2      	movs	r0, #242	; 0xf2
 8000616:	f000 f8d6 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f8e0 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000620:	20b0      	movs	r0, #176	; 0xb0
 8000622:	f000 f8d0 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000626:	20c2      	movs	r0, #194	; 0xc2
 8000628:	f000 f8da 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800062c:	20b6      	movs	r0, #182	; 0xb6
 800062e:	f000 f8ca 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000632:	200a      	movs	r0, #10
 8000634:	f000 f8d4 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000638:	20a7      	movs	r0, #167	; 0xa7
 800063a:	f000 f8d1 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800063e:	2027      	movs	r0, #39	; 0x27
 8000640:	f000 f8ce 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000644:	2004      	movs	r0, #4
 8000646:	f000 f8cb 	bl	80007e0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800064a:	202a      	movs	r0, #42	; 0x2a
 800064c:	f000 f8bb 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000650:	2000      	movs	r0, #0
 8000652:	f000 f8c5 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f8c2 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f8bf 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000662:	20ef      	movs	r0, #239	; 0xef
 8000664:	f000 f8bc 	bl	80007e0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000668:	202b      	movs	r0, #43	; 0x2b
 800066a:	f000 f8ac 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f8b6 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f8b3 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f8b0 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000680:	203f      	movs	r0, #63	; 0x3f
 8000682:	f000 f8ad 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000686:	20f6      	movs	r0, #246	; 0xf6
 8000688:	f000 f89d 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f8a7 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f8a4 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000698:	2006      	movs	r0, #6
 800069a:	f000 f8a1 	bl	80007e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800069e:	202c      	movs	r0, #44	; 0x2c
 80006a0:	f000 f891 	bl	80007c6 <ili9341_WriteReg>
  LCD_Delay(200);
 80006a4:	20c8      	movs	r0, #200	; 0xc8
 80006a6:	f000 fe81 	bl	80013ac <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80006aa:	2026      	movs	r0, #38	; 0x26
 80006ac:	f000 f88b 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 f895 	bl	80007e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80006b6:	20e0      	movs	r0, #224	; 0xe0
 80006b8:	f000 f885 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80006bc:	200f      	movs	r0, #15
 80006be:	f000 f88f 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80006c2:	2029      	movs	r0, #41	; 0x29
 80006c4:	f000 f88c 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80006c8:	2024      	movs	r0, #36	; 0x24
 80006ca:	f000 f889 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80006ce:	200c      	movs	r0, #12
 80006d0:	f000 f886 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80006d4:	200e      	movs	r0, #14
 80006d6:	f000 f883 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006da:	2009      	movs	r0, #9
 80006dc:	f000 f880 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80006e0:	204e      	movs	r0, #78	; 0x4e
 80006e2:	f000 f87d 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80006e6:	2078      	movs	r0, #120	; 0x78
 80006e8:	f000 f87a 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80006ec:	203c      	movs	r0, #60	; 0x3c
 80006ee:	f000 f877 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80006f2:	2009      	movs	r0, #9
 80006f4:	f000 f874 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80006f8:	2013      	movs	r0, #19
 80006fa:	f000 f871 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80006fe:	2005      	movs	r0, #5
 8000700:	f000 f86e 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000704:	2017      	movs	r0, #23
 8000706:	f000 f86b 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800070a:	2011      	movs	r0, #17
 800070c:	f000 f868 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f000 f865 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000716:	20e1      	movs	r0, #225	; 0xe1
 8000718:	f000 f855 	bl	80007c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800071c:	2000      	movs	r0, #0
 800071e:	f000 f85f 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000722:	2016      	movs	r0, #22
 8000724:	f000 f85c 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000728:	201b      	movs	r0, #27
 800072a:	f000 f859 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800072e:	2004      	movs	r0, #4
 8000730:	f000 f856 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000734:	2011      	movs	r0, #17
 8000736:	f000 f853 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800073a:	2007      	movs	r0, #7
 800073c:	f000 f850 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000740:	2031      	movs	r0, #49	; 0x31
 8000742:	f000 f84d 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000746:	2033      	movs	r0, #51	; 0x33
 8000748:	f000 f84a 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800074c:	2042      	movs	r0, #66	; 0x42
 800074e:	f000 f847 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000752:	2005      	movs	r0, #5
 8000754:	f000 f844 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000758:	200c      	movs	r0, #12
 800075a:	f000 f841 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800075e:	200a      	movs	r0, #10
 8000760:	f000 f83e 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000764:	2028      	movs	r0, #40	; 0x28
 8000766:	f000 f83b 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800076a:	202f      	movs	r0, #47	; 0x2f
 800076c:	f000 f838 	bl	80007e0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000770:	200f      	movs	r0, #15
 8000772:	f000 f835 	bl	80007e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000776:	2011      	movs	r0, #17
 8000778:	f000 f825 	bl	80007c6 <ili9341_WriteReg>
  LCD_Delay(200);
 800077c:	20c8      	movs	r0, #200	; 0xc8
 800077e:	f000 fe15 	bl	80013ac <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000782:	2029      	movs	r0, #41	; 0x29
 8000784:	f000 f81f 	bl	80007c6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000788:	202c      	movs	r0, #44	; 0x2c
 800078a:	f000 f81c 	bl	80007c6 <ili9341_WriteReg>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}

08000792 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000796:	f000 fd1b 	bl	80011d0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800079a:	2103      	movs	r1, #3
 800079c:	20d3      	movs	r0, #211	; 0xd3
 800079e:	f000 f82c 	bl	80007fa <ili9341_ReadData>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29b      	uxth	r3, r3
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}

080007aa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80007ae:	2029      	movs	r0, #41	; 0x29
 80007b0:	f000 f809 	bl	80007c6 <ili9341_WriteReg>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80007bc:	2028      	movs	r0, #40	; 0x28
 80007be:	f000 f802 	bl	80007c6 <ili9341_WriteReg>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fd96 	bl	8001304 <LCD_IO_WriteReg>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fd67 	bl	80012c0 <LCD_IO_WriteData>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	460a      	mov	r2, r1
 8000804:	80fb      	strh	r3, [r7, #6]
 8000806:	4613      	mov	r3, r2
 8000808:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800080a:	797a      	ldrb	r2, [r7, #5]
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fd99 	bl	8001348 <LCD_IO_ReadData>
 8000816:	4603      	mov	r3, r0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000824:	23f0      	movs	r3, #240	; 0xf0
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000834:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f002 f97b 	bl	8002b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f869 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 fad7 	bl	8000e04 <MX_GPIO_Init>
  MX_CRC_Init();
 8000856:	f000 f8cf 	bl	80009f8 <MX_CRC_Init>
  MX_DMA2D_Init();
 800085a:	f000 f8e1 	bl	8000a20 <MX_DMA2D_Init>
  MX_FMC_Init();
 800085e:	f000 fa81 	bl	8000d64 <MX_FMC_Init>
  MX_I2C3_Init();
 8000862:	f000 f90f 	bl	8000a84 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000866:	f000 f94d 	bl	8000b04 <MX_LTDC_Init>
  MX_SPI5_Init();
 800086a:	f000 f9cb 	bl	8000c04 <MX_SPI5_Init>
  MX_TIM1_Init();
 800086e:	f000 f9ff 	bl	8000c70 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000872:	f000 fa4d 	bl	8000d10 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   #include "stm32f429i_discovery_lcd.h"
   #include "string.h"
    //__HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
    BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 8000876:	f001 fb4b 	bl	8001f10 <BSP_SDRAM_Init>
    BSP_LCD_Init();
 800087a:	f000 fda3 	bl	80013c4 <BSP_LCD_Init>
    //BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER,LCD_FRAME_BUFFER);
    BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER,LCD_FRAME_BUFFER);
 800087e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fe20 	bl	80014c8 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 fe81 	bl	8001590 <BSP_LCD_SelectLayer>
    BSP_LCD_DisplayOn();
 800088e:	f001 f941 	bl	8001b14 <BSP_LCD_DisplayOn>

    HAL_Delay(500);
 8000892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000896:	f002 f997 	bl	8002bc8 <HAL_Delay>
    char pData[10];
    memset(pData,97,10);
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	220a      	movs	r2, #10
 800089e:	2161      	movs	r1, #97	; 0x61
 80008a0:	4618      	mov	r0, r3
 80008a2:	f009 fc3d 	bl	800a120 <memset>
    strcpy(pData,(char*)"  Hello from");
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4a1a      	ldr	r2, [pc, #104]	; (8000914 <main+0xd0>)
 80008aa:	461c      	mov	r4, r3
 80008ac:	4613      	mov	r3, r2
 80008ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b0:	c407      	stmia	r4!, {r0, r1, r2}
 80008b2:	7023      	strb	r3, [r4, #0]
    while (1)
    {
  	//HAL_UART_Receive(&huart1, (uint8_t*)pData,10,1000);
  	BSP_LCD_Clear(LCD_COLOR_BLUE);
 80008b4:	4818      	ldr	r0, [pc, #96]	; (8000918 <main+0xd4>)
 80008b6:	f000 fec3 	bl	8001640 <BSP_LCD_Clear>
  	//BSP_LCD_ClearStringLine(1);
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80008ba:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80008be:	f000 fe77 	bl	80015b0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1,(uint8_t*)pData);
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4619      	mov	r1, r3
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 ffe4 	bl	8001894 <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"   Boos!!  ");
 80008cc:	4913      	ldr	r1, [pc, #76]	; (800091c <main+0xd8>)
 80008ce:	2002      	movs	r0, #2
 80008d0:	f000 ffe0 	bl	8001894 <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80008d4:	4812      	ldr	r0, [pc, #72]	; (8000920 <main+0xdc>)
 80008d6:	f000 fe6b 	bl	80015b0 <BSP_LCD_SetTextColor>
   	BSP_LCD_DrawCircle(100, 140, 25);
 80008da:	2219      	movs	r2, #25
 80008dc:	218c      	movs	r1, #140	; 0x8c
 80008de:	2064      	movs	r0, #100	; 0x64
 80008e0:	f001 f82e 	bl	8001940 <BSP_LCD_DrawCircle>
   	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80008e4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80008e8:	f000 fe62 	bl	80015b0 <BSP_LCD_SetTextColor>
   	BSP_LCD_DrawHLine(40, 200 , 120);
 80008ec:	2278      	movs	r2, #120	; 0x78
 80008ee:	21c8      	movs	r1, #200	; 0xc8
 80008f0:	2028      	movs	r0, #40	; 0x28
 80008f2:	f000 ffe7 	bl	80018c4 <BSP_LCD_DrawHLine>
   	BSP_LCD_DrawHLine(40, 220 , 120);
 80008f6:	2278      	movs	r2, #120	; 0x78
 80008f8:	21dc      	movs	r1, #220	; 0xdc
 80008fa:	2028      	movs	r0, #40	; 0x28
 80008fc:	f000 ffe2 	bl	80018c4 <BSP_LCD_DrawHLine>
   	BSP_LCD_DrawHLine(40, 225 , 120);
 8000900:	2278      	movs	r2, #120	; 0x78
 8000902:	21e1      	movs	r1, #225	; 0xe1
 8000904:	2028      	movs	r0, #40	; 0x28
 8000906:	f000 ffdd 	bl	80018c4 <BSP_LCD_DrawHLine>
   	//BSP_LCD_DrawHLine(40, 225 , 120);
   	//BSP_LCD_DrawHLine(40, 230 , 120);
   	HAL_Delay(10000);
 800090a:	f242 7010 	movw	r0, #10000	; 0x2710
 800090e:	f002 f95b 	bl	8002bc8 <HAL_Delay>
  	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000912:	e7cf      	b.n	80008b4 <main+0x70>
 8000914:	0800a148 	.word	0x0800a148
 8000918:	ff0000ff 	.word	0xff0000ff
 800091c:	0800a158 	.word	0x0800a158
 8000920:	ffff0000 	.word	0xffff0000

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	; 0x50
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f009 fbf4 	bl	800a120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <SystemClock_Config+0xcc>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <SystemClock_Config+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <SystemClock_Config+0xd0>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800099c:	2348      	movs	r3, #72	; 0x48
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009a4:	2303      	movs	r3, #3
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f005 fa3b 	bl	8005e28 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009b8:	f000 fb46 	bl	8001048 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2102      	movs	r1, #2
 80009d8:	4618      	mov	r0, r3
 80009da:	f005 fc9d 	bl	8006318 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009e4:	f000 fb30 	bl	8001048 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3750      	adds	r7, #80	; 0x50
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_CRC_Init+0x20>)
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <MX_CRC_Init+0x24>)
 8000a00:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_CRC_Init+0x20>)
 8000a04:	f002 f9e6 	bl	8002dd4 <HAL_CRC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a0e:	f000 fb1b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200003bc 	.word	0x200003bc
 8000a1c:	40023000 	.word	0x40023000

08000a20 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a26:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <MX_DMA2D_Init+0x60>)
 8000a28:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a56:	f002 fb97 	bl	8003188 <HAL_DMA2D_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a60:	f000 faf2 	bl	8001048 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a64:	2101      	movs	r1, #1
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_DMA2D_Init+0x5c>)
 8000a68:	f002 fdfc 	bl	8003664 <HAL_DMA2D_ConfigLayer>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a72:	f000 fae9 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200004f8 	.word	0x200004f8
 8000a80:	4002b000 	.word	0x4002b000

08000a84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <MX_I2C3_Init+0x78>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000a90:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <MX_I2C3_Init+0x7c>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000ac2:	f004 fc5f 	bl	8005384 <HAL_I2C_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000acc:	f000 fabc 	bl	8001048 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4809      	ldr	r0, [pc, #36]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000ad4:	f004 fd9a 	bl	800560c <HAL_I2CEx_ConfigAnalogFilter>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000ade:	f000 fab3 	bl	8001048 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000ae6:	f004 fdcd 	bl	8005684 <HAL_I2CEx_ConfigDigitalFilter>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000af0:	f000 faaa 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000310 	.word	0x20000310
 8000afc:	40005c00 	.word	0x40005c00
 8000b00:	000186a0 	.word	0x000186a0

08000b04 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2234      	movs	r2, #52	; 0x34
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f009 fb05 	bl	800a120 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b16:	4b39      	ldr	r3, [pc, #228]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b18:	4a39      	ldr	r2, [pc, #228]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b1c:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b22:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b28:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000b34:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b36:	2209      	movs	r2, #9
 8000b38:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000b40:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b42:	221d      	movs	r2, #29
 8000b44:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000b46:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b48:	2203      	movs	r2, #3
 8000b4a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b4e:	f240 120d 	movw	r2, #269	; 0x10d
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b56:	f240 1243 	movw	r2, #323	; 0x143
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b5e:	f240 1217 	movw	r2, #279	; 0x117
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b66:	f240 1247 	movw	r2, #327	; 0x147
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b84:	481d      	ldr	r0, [pc, #116]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000b86:	f004 fdbd 	bl	8005704 <HAL_LTDC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b90:	f000 fa5a 	bl	8001048 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000b98:	23f0      	movs	r3, #240	; 0xf0
 8000b9a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000ba0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ba4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000baa:	23ff      	movs	r3, #255	; 0xff
 8000bac:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bb6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bbc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000bc2:	23f0      	movs	r3, #240	; 0xf0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000bc6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_LTDC_Init+0xf8>)
 8000be6:	f004 ff1f 	bl	8005a28 <HAL_LTDC_ConfigLayer>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000bf0:	f000 fa2a 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3738      	adds	r7, #56	; 0x38
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200003c4 	.word	0x200003c4
 8000c00:	40016800 	.word	0x40016800

08000c04 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <MX_SPI5_Init+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c14:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c34:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c38:	2218      	movs	r2, #24
 8000c3a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c50:	220a      	movs	r2, #10
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_SPI5_Init+0x64>)
 8000c56:	f005 ffca 	bl	8006bee <HAL_SPI_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000c60:	f000 f9f2 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000364 	.word	0x20000364
 8000c6c:	40015000 	.word	0x40015000

08000c70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <MX_TIM1_Init+0x9c>)
 8000c90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cba:	f006 fd77 	bl	80077ac <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f9c0 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cd6:	f006 ff31 	bl	8007b3c <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ce0:	f000 f9b2 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cf2:	f007 f94d 	bl	8007f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cfc:	f000 f9a4 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200004b0 	.word	0x200004b0
 8000d0c:	40010000 	.word	0x40010000

08000d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART1_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d48:	f007 f9b2 	bl	80080b0 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f000 f979 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000046c 	.word	0x2000046c
 8000d60:	40011000 	.word	0x40011000

08000d64 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_FMC_Init+0x98>)
 8000d7e:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <MX_FMC_Init+0x9c>)
 8000d80:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <MX_FMC_Init+0x98>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_FMC_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_FMC_Init+0x98>)
 8000d90:	2204      	movs	r2, #4
 8000d92:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_FMC_Init+0x98>)
 8000d96:	2210      	movs	r2, #16
 8000d98:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_FMC_Init+0x98>)
 8000d9c:	2240      	movs	r2, #64	; 0x40
 8000d9e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_FMC_Init+0x98>)
 8000da2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000da6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_FMC_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_FMC_Init+0x98>)
 8000db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000db4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_FMC_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_FMC_Init+0x98>)
 8000dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_FMC_Init+0x98>)
 8000de6:	f005 fe83 	bl	8006af0 <HAL_SDRAM_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000df0:	f000 f92a 	bl	8001048 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000538 	.word	0x20000538
 8000e00:	a0000140 	.word	0xa0000140

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
 8000e1e:	4b7b      	ldr	r3, [pc, #492]	; (800100c <MX_GPIO_Init+0x208>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a7a      	ldr	r2, [pc, #488]	; (800100c <MX_GPIO_Init+0x208>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b78      	ldr	r3, [pc, #480]	; (800100c <MX_GPIO_Init+0x208>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	4b74      	ldr	r3, [pc, #464]	; (800100c <MX_GPIO_Init+0x208>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a73      	ldr	r2, [pc, #460]	; (800100c <MX_GPIO_Init+0x208>)
 8000e40:	f043 0320 	orr.w	r3, r3, #32
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b71      	ldr	r3, [pc, #452]	; (800100c <MX_GPIO_Init+0x208>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	4b6d      	ldr	r3, [pc, #436]	; (800100c <MX_GPIO_Init+0x208>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a6c      	ldr	r2, [pc, #432]	; (800100c <MX_GPIO_Init+0x208>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b6a      	ldr	r3, [pc, #424]	; (800100c <MX_GPIO_Init+0x208>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	4b66      	ldr	r3, [pc, #408]	; (800100c <MX_GPIO_Init+0x208>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a65      	ldr	r2, [pc, #404]	; (800100c <MX_GPIO_Init+0x208>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b63      	ldr	r3, [pc, #396]	; (800100c <MX_GPIO_Init+0x208>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b5f      	ldr	r3, [pc, #380]	; (800100c <MX_GPIO_Init+0x208>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a5e      	ldr	r2, [pc, #376]	; (800100c <MX_GPIO_Init+0x208>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b5c      	ldr	r3, [pc, #368]	; (800100c <MX_GPIO_Init+0x208>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b58      	ldr	r3, [pc, #352]	; (800100c <MX_GPIO_Init+0x208>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a57      	ldr	r2, [pc, #348]	; (800100c <MX_GPIO_Init+0x208>)
 8000eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b55      	ldr	r3, [pc, #340]	; (800100c <MX_GPIO_Init+0x208>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b51      	ldr	r3, [pc, #324]	; (800100c <MX_GPIO_Init+0x208>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a50      	ldr	r2, [pc, #320]	; (800100c <MX_GPIO_Init+0x208>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <MX_GPIO_Init+0x208>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b4a      	ldr	r3, [pc, #296]	; (800100c <MX_GPIO_Init+0x208>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a49      	ldr	r2, [pc, #292]	; (800100c <MX_GPIO_Init+0x208>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b47      	ldr	r3, [pc, #284]	; (800100c <MX_GPIO_Init+0x208>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2116      	movs	r1, #22
 8000efe:	4844      	ldr	r0, [pc, #272]	; (8001010 <MX_GPIO_Init+0x20c>)
 8000f00:	f002 ff96 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	4842      	ldr	r0, [pc, #264]	; (8001014 <MX_GPIO_Init+0x210>)
 8000f0a:	f002 ff91 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f14:	4840      	ldr	r0, [pc, #256]	; (8001018 <MX_GPIO_Init+0x214>)
 8000f16:	f002 ff8b 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f20:	483e      	ldr	r0, [pc, #248]	; (800101c <MX_GPIO_Init+0x218>)
 8000f22:	f002 ff85 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000f26:	2316      	movs	r3, #22
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4834      	ldr	r0, [pc, #208]	; (8001010 <MX_GPIO_Init+0x20c>)
 8000f3e:	f002 fcbf 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000f42:	f248 0307 	movw	r3, #32775	; 0x8007
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f48:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	482e      	ldr	r0, [pc, #184]	; (8001014 <MX_GPIO_Init+0x210>)
 8000f5a:	f002 fcb1 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	4827      	ldr	r0, [pc, #156]	; (8001014 <MX_GPIO_Init+0x210>)
 8000f76:	f002 fca3 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4820      	ldr	r0, [pc, #128]	; (8001010 <MX_GPIO_Init+0x20c>)
 8000f90:	f002 fc96 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f94:	2304      	movs	r3, #4
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481e      	ldr	r0, [pc, #120]	; (8001020 <MX_GPIO_Init+0x21c>)
 8000fa8:	f002 fc8a 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000fac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4815      	ldr	r0, [pc, #84]	; (8001018 <MX_GPIO_Init+0x214>)
 8000fc2:	f002 fc7d 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000fc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <MX_GPIO_Init+0x214>)
 8000fe0:	f002 fc6e 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000fe4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <MX_GPIO_Init+0x218>)
 8000ffe:	f002 fc5f 	bl	80038c0 <HAL_GPIO_Init>

}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	; 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40020800 	.word	0x40020800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021800 	.word	0x40021800
 8001020:	40020400 	.word	0x40020400

08001024 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001036:	f001 fda7 	bl	8002b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40001000 	.word	0x40001000

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <SPIx_Init+0x6c>)
 800105a:	f006 fa68 	bl	800752e <HAL_SPI_GetState>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d12b      	bne.n	80010bc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <SPIx_Init+0x6c>)
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <SPIx_Init+0x70>)
 8001068:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <SPIx_Init+0x6c>)
 800106c:	2218      	movs	r2, #24
 800106e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <SPIx_Init+0x6c>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <SPIx_Init+0x6c>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <SPIx_Init+0x6c>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <SPIx_Init+0x6c>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <SPIx_Init+0x6c>)
 800108a:	2207      	movs	r2, #7
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <SPIx_Init+0x6c>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <SPIx_Init+0x6c>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <SPIx_Init+0x6c>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <SPIx_Init+0x6c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SPIx_Init+0x6c>)
 80010aa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ae:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <SPIx_Init+0x6c>)
 80010b2:	f000 f853 	bl	800115c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80010b6:	4802      	ldr	r0, [pc, #8]	; (80010c0 <SPIx_Init+0x6c>)
 80010b8:	f005 fd99 	bl	8006bee <HAL_SPI_Init>
  } 
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000074 	.word	0x20000074
 80010c4:	40015000 	.word	0x40015000

080010c8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <SPIx_Read+0x38>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f107 0108 	add.w	r1, r7, #8
 80010e2:	4808      	ldr	r0, [pc, #32]	; (8001104 <SPIx_Read+0x3c>)
 80010e4:	f005 ff70 	bl	8006fc8 <HAL_SPI_Receive>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80010f2:	f000 f827 	bl	8001144 <SPIx_Error>
  }
  
  return readvalue;
 80010f6:	68bb      	ldr	r3, [r7, #8]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000038 	.word	0x20000038
 8001104:	20000074 	.word	0x20000074

08001108 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <SPIx_Write+0x34>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1db9      	adds	r1, r7, #6
 800111c:	2201      	movs	r2, #1
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <SPIx_Write+0x38>)
 8001120:	f005 fe16 	bl	8006d50 <HAL_SPI_Transmit>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800112e:	f000 f809 	bl	8001144 <SPIx_Error>
  }
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000038 	.word	0x20000038
 8001140:	20000074 	.word	0x20000074

08001144 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <SPIx_Error+0x14>)
 800114a:	f005 fdd9 	bl	8006d00 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800114e:	f7ff ff81 	bl	8001054 <SPIx_Init>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000074 	.word	0x20000074

0800115c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <SPIx_MspInit+0x6c>)
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <SPIx_MspInit+0x6c>)
 800116e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001172:	6453      	str	r3, [r2, #68]	; 0x44
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <SPIx_MspInit+0x6c>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <SPIx_MspInit+0x6c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <SPIx_MspInit+0x6c>)
 800118a:	f043 0320 	orr.w	r3, r3, #32
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <SPIx_MspInit+0x6c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800119c:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80011aa:	2301      	movs	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80011ae:	2305      	movs	r3, #5
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <SPIx_MspInit+0x70>)
 80011ba:	f002 fb81 	bl	80038c0 <HAL_GPIO_Init>
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40021400 	.word	0x40021400

080011d0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <LCD_IO_Init+0xe0>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d164      	bne.n	80012a8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80011de:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <LCD_IO_Init+0xe0>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <LCD_IO_Init+0xe4>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a31      	ldr	r2, [pc, #196]	; (80012b4 <LCD_IO_Init+0xe4>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <LCD_IO_Init+0xe4>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001204:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4619      	mov	r1, r3
 8001218:	4827      	ldr	r0, [pc, #156]	; (80012b8 <LCD_IO_Init+0xe8>)
 800121a:	f002 fb51 	bl	80038c0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <LCD_IO_Init+0xe4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a23      	ldr	r2, [pc, #140]	; (80012b4 <LCD_IO_Init+0xe4>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <LCD_IO_Init+0xe4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800123a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	4819      	ldr	r0, [pc, #100]	; (80012b8 <LCD_IO_Init+0xe8>)
 8001254:	f002 fb34 	bl	80038c0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <LCD_IO_Init+0xe4>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <LCD_IO_Init+0xe4>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <LCD_IO_Init+0xe4>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001274:	2304      	movs	r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <LCD_IO_Init+0xec>)
 800128c:	f002 fb18 	bl	80038c0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001290:	2200      	movs	r2, #0
 8001292:	2104      	movs	r1, #4
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <LCD_IO_Init+0xec>)
 8001296:	f002 fdcb 	bl	8003e30 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800129a:	2201      	movs	r2, #1
 800129c:	2104      	movs	r1, #4
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <LCD_IO_Init+0xec>)
 80012a0:	f002 fdc6 	bl	8003e30 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80012a4:	f7ff fed6 	bl	8001054 <SPIx_Init>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200000cc 	.word	0x200000cc
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40020800 	.word	0x40020800

080012c0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	480a      	ldr	r0, [pc, #40]	; (80012fc <LCD_IO_WriteData+0x3c>)
 80012d2:	f002 fdad 	bl	8003e30 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80012d6:	2200      	movs	r2, #0
 80012d8:	2104      	movs	r1, #4
 80012da:	4809      	ldr	r0, [pc, #36]	; (8001300 <LCD_IO_WriteData+0x40>)
 80012dc:	f002 fda8 	bl	8003e30 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff10 	bl	8001108 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80012e8:	2201      	movs	r2, #1
 80012ea:	2104      	movs	r1, #4
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <LCD_IO_WriteData+0x40>)
 80012ee:	f002 fd9f 	bl	8003e30 <HAL_GPIO_WritePin>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40020800 	.word	0x40020800

08001304 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	480a      	ldr	r0, [pc, #40]	; (8001340 <LCD_IO_WriteReg+0x3c>)
 8001316:	f002 fd8b 	bl	8003e30 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800131a:	2200      	movs	r2, #0
 800131c:	2104      	movs	r1, #4
 800131e:	4809      	ldr	r0, [pc, #36]	; (8001344 <LCD_IO_WriteReg+0x40>)
 8001320:	f002 fd86 	bl	8003e30 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	b29b      	uxth	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff feed 	bl	8001108 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800132e:	2201      	movs	r2, #1
 8001330:	2104      	movs	r1, #4
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <LCD_IO_WriteReg+0x40>)
 8001334:	f002 fd7c 	bl	8003e30 <HAL_GPIO_WritePin>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40020800 	.word	0x40020800

08001348 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	80fb      	strh	r3, [r7, #6]
 8001354:	4613      	mov	r3, r2
 8001356:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800135c:	2200      	movs	r2, #0
 800135e:	2104      	movs	r1, #4
 8001360:	4810      	ldr	r0, [pc, #64]	; (80013a4 <LCD_IO_ReadData+0x5c>)
 8001362:	f002 fd65 	bl	8003e30 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <LCD_IO_ReadData+0x60>)
 800136e:	f002 fd5f 	bl	8003e30 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fec7 	bl	8001108 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800137a:	797b      	ldrb	r3, [r7, #5]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fea3 	bl	80010c8 <SPIx_Read>
 8001382:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <LCD_IO_ReadData+0x60>)
 800138c:	f002 fd50 	bl	8003e30 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001390:	2201      	movs	r2, #1
 8001392:	2104      	movs	r1, #4
 8001394:	4803      	ldr	r0, [pc, #12]	; (80013a4 <LCD_IO_ReadData+0x5c>)
 8001396:	f002 fd4b 	bl	8003e30 <HAL_GPIO_WritePin>
  
  return readvalue;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00

080013ac <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f001 fc07 	bl	8002bc8 <HAL_Delay>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <BSP_LCD_Init+0xbc>)
 80013ca:	4a2e      	ldr	r2, [pc, #184]	; (8001484 <BSP_LCD_Init+0xc0>)
 80013cc:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <BSP_LCD_Init+0xbc>)
 80013d0:	2209      	movs	r2, #9
 80013d2:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <BSP_LCD_Init+0xbc>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <BSP_LCD_Init+0xbc>)
 80013dc:	221d      	movs	r2, #29
 80013de:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <BSP_LCD_Init+0xbc>)
 80013e2:	2203      	movs	r2, #3
 80013e4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <BSP_LCD_Init+0xbc>)
 80013e8:	f240 120d 	movw	r2, #269	; 0x10d
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <BSP_LCD_Init+0xbc>)
 80013f0:	f240 1243 	movw	r2, #323	; 0x143
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <BSP_LCD_Init+0xbc>)
 80013f8:	f240 1217 	movw	r2, #279	; 0x117
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <BSP_LCD_Init+0xbc>)
 8001400:	f240 1247 	movw	r2, #327	; 0x147
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <BSP_LCD_Init+0xbc>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <BSP_LCD_Init+0xbc>)
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <BSP_LCD_Init+0xbc>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <BSP_LCD_Init+0xc4>)
 8001420:	2208      	movs	r2, #8
 8001422:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <BSP_LCD_Init+0xc4>)
 8001426:	22c0      	movs	r2, #192	; 0xc0
 8001428:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <BSP_LCD_Init+0xc4>)
 800142c:	2204      	movs	r2, #4
 800142e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <BSP_LCD_Init+0xc4>)
 8001432:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001438:	4813      	ldr	r0, [pc, #76]	; (8001488 <BSP_LCD_Init+0xc4>)
 800143a:	f005 f99b 	bl	8006774 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <BSP_LCD_Init+0xbc>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <BSP_LCD_Init+0xbc>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <BSP_LCD_Init+0xbc>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <BSP_LCD_Init+0xbc>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001456:	f000 fb6d 	bl	8001b34 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800145a:	4809      	ldr	r0, [pc, #36]	; (8001480 <BSP_LCD_Init+0xbc>)
 800145c:	f004 f952 	bl	8005704 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <BSP_LCD_Init+0xc8>)
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <BSP_LCD_Init+0xcc>)
 8001464:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <BSP_LCD_Init+0xc8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800146e:	f000 fd4f 	bl	8001f10 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <BSP_LCD_Init+0xd0>)
 8001474:	f000 f8b4 	bl	80015e0 <BSP_LCD_SetFont>

  return LCD_OK;
 8001478:	2300      	movs	r3, #0
}  
 800147a:	4618      	mov	r0, r3
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000056c 	.word	0x2000056c
 8001484:	40016800 	.word	0x40016800
 8001488:	20000110 	.word	0x20000110
 800148c:	20000614 	.word	0x20000614
 8001490:	20000000 	.word	0x20000000
 8001494:	2000003c 	.word	0x2000003c

08001498 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <BSP_LCD_GetXSize+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	4798      	blx	r3
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000614 	.word	0x20000614

080014b0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <BSP_LCD_GetYSize+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	4798      	blx	r3
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000614 	.word	0x20000614

080014c8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b090      	sub	sp, #64	; 0x40
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80014d8:	f7ff ffde 	bl	8001498 <BSP_LCD_GetXSize>
 80014dc:	4603      	mov	r3, r0
 80014de:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80014e4:	f7ff ffe4 	bl	80014b0 <BSP_LCD_GetYSize>
 80014e8:	4603      	mov	r3, r0
 80014ea:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80014f4:	23ff      	movs	r3, #255	; 0xff
 80014f6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800150e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001514:	2307      	movs	r3, #7
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001518:	f7ff ffbe 	bl	8001498 <BSP_LCD_GetXSize>
 800151c:	4603      	mov	r3, r0
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001520:	f7ff ffc6 	bl	80014b0 <BSP_LCD_GetYSize>
 8001524:	4603      	mov	r3, r0
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001528:	88fa      	ldrh	r2, [r7, #6]
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001532:	f004 fa79 	bl	8005a28 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001536:	88fa      	ldrh	r2, [r7, #6]
 8001538:	4913      	ldr	r1, [pc, #76]	; (8001588 <BSP_LCD_LayerDefaultInit+0xc0>)
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3304      	adds	r3, #4
 8001546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800154a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800154c:	88fa      	ldrh	r2, [r7, #6]
 800154e:	490e      	ldr	r1, [pc, #56]	; (8001588 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	3308      	adds	r3, #8
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <BSP_LCD_LayerDefaultInit+0xc4>)
 800155e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001560:	88fa      	ldrh	r2, [r7, #6]
 8001562:	4909      	ldr	r1, [pc, #36]	; (8001588 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001572:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001576:	f004 fa95 	bl	8005aa4 <HAL_LTDC_EnableDither>
}
 800157a:	bf00      	nop
 800157c:	3740      	adds	r7, #64	; 0x40
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000056c 	.word	0x2000056c
 8001588:	20000144 	.word	0x20000144
 800158c:	2000003c 	.word	0x2000003c

08001590 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <BSP_LCD_SelectLayer+0x1c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000140 	.word	0x20000140

080015b0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <BSP_LCD_SetTextColor+0x28>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <BSP_LCD_SetTextColor+0x2c>)
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	20000140 	.word	0x20000140
 80015dc:	20000144 	.word	0x20000144

080015e0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <BSP_LCD_SetFont+0x2c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4908      	ldr	r1, [pc, #32]	; (8001610 <BSP_LCD_SetFont+0x30>)
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	3308      	adds	r3, #8
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	601a      	str	r2, [r3, #0]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000140 	.word	0x20000140
 8001610:	20000144 	.word	0x20000144

08001614 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <BSP_LCD_GetFont+0x24>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4907      	ldr	r1, [pc, #28]	; (800163c <BSP_LCD_GetFont+0x28>)
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3308      	adds	r3, #8
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000140 	.word	0x20000140
 800163c:	20000144 	.word	0x20000144

08001640 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af02      	add	r7, sp, #8
 8001646:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <BSP_LCD_Clear+0x48>)
 800164a:	681c      	ldr	r4, [r3, #0]
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <BSP_LCD_Clear+0x48>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <BSP_LCD_Clear+0x4c>)
 8001652:	2134      	movs	r1, #52	; 0x34
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	335c      	adds	r3, #92	; 0x5c
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	461e      	mov	r6, r3
 8001660:	f7ff ff1a 	bl	8001498 <BSP_LCD_GetXSize>
 8001664:	4605      	mov	r5, r0
 8001666:	f7ff ff23 	bl	80014b0 <BSP_LCD_GetYSize>
 800166a:	4602      	mov	r2, r0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2300      	movs	r3, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	462a      	mov	r2, r5
 8001678:	4631      	mov	r1, r6
 800167a:	4620      	mov	r0, r4
 800167c:	f000 fc10 	bl	8001ea0 <FillBuffer>
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001688:	20000140 	.word	0x20000140
 800168c:	2000056c 	.word	0x2000056c

08001690 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
 800169a:	460b      	mov	r3, r1
 800169c:	80bb      	strh	r3, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <BSP_LCD_DisplayChar+0x80>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	491b      	ldr	r1, [pc, #108]	; (8001714 <BSP_LCD_DisplayChar+0x84>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	3308      	adds	r3, #8
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <BSP_LCD_DisplayChar+0x80>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4c14      	ldr	r4, [pc, #80]	; (8001714 <BSP_LCD_DisplayChar+0x84>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4423      	add	r3, r4
 80016ce:	3308      	adds	r3, #8
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80016d4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <BSP_LCD_DisplayChar+0x80>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4c0d      	ldr	r4, [pc, #52]	; (8001714 <BSP_LCD_DisplayChar+0x84>)
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4423      	add	r3, r4
 80016e8:	3308      	adds	r3, #8
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	889b      	ldrh	r3, [r3, #4]
 80016ee:	3307      	adds	r3, #7
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da00      	bge.n	80016f6 <BSP_LCD_DisplayChar+0x66>
 80016f4:	3307      	adds	r3, #7
 80016f6:	10db      	asrs	r3, r3, #3
 80016f8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80016fc:	18ca      	adds	r2, r1, r3
 80016fe:	88b9      	ldrh	r1, [r7, #4]
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fb12 	bl	8001d2c <DrawChar>
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bd90      	pop	{r4, r7, pc}
 8001710:	20000140 	.word	0x20000140
 8001714:	20000144 	.word	0x20000144

08001718 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	60ba      	str	r2, [r7, #8]
 8001720:	461a      	mov	r2, r3
 8001722:	4603      	mov	r3, r0
 8001724:	81fb      	strh	r3, [r7, #14]
 8001726:	460b      	mov	r3, r1
 8001728:	81bb      	strh	r3, [r7, #12]
 800172a:	4613      	mov	r3, r2
 800172c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800172e:	2301      	movs	r3, #1
 8001730:	83fb      	strh	r3, [r7, #30]
 8001732:	2300      	movs	r3, #0
 8001734:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001742:	e002      	b.n	800174a <BSP_LCD_DisplayStringAt+0x32>
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	3301      	adds	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	617a      	str	r2, [r7, #20]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f6      	bne.n	8001744 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001756:	f7ff fe9f 	bl	8001498 <BSP_LCD_GetXSize>
 800175a:	4601      	mov	r1, r0
 800175c:	4b4b      	ldr	r3, [pc, #300]	; (800188c <BSP_LCD_DisplayStringAt+0x174>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	484b      	ldr	r0, [pc, #300]	; (8001890 <BSP_LCD_DisplayStringAt+0x178>)
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4403      	add	r3, r0
 800176c:	3308      	adds	r3, #8
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	fbb1 f3f3 	udiv	r3, r1, r3
 8001776:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d01c      	beq.n	80017b8 <BSP_LCD_DisplayStringAt+0xa0>
 800177e:	2b03      	cmp	r3, #3
 8001780:	dc33      	bgt.n	80017ea <BSP_LCD_DisplayStringAt+0xd2>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d002      	beq.n	800178c <BSP_LCD_DisplayStringAt+0x74>
 8001786:	2b02      	cmp	r3, #2
 8001788:	d019      	beq.n	80017be <BSP_LCD_DisplayStringAt+0xa6>
 800178a:	e02e      	b.n	80017ea <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	1ad1      	subs	r1, r2, r3
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <BSP_LCD_DisplayStringAt+0x174>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	483e      	ldr	r0, [pc, #248]	; (8001890 <BSP_LCD_DisplayStringAt+0x178>)
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4403      	add	r3, r0
 80017a2:	3308      	adds	r3, #8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	889b      	ldrh	r3, [r3, #4]
 80017a8:	fb03 f301 	mul.w	r3, r3, r1
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	89fb      	ldrh	r3, [r7, #14]
 80017b2:	4413      	add	r3, r2
 80017b4:	83fb      	strh	r3, [r7, #30]
      break;
 80017b6:	e01b      	b.n	80017f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80017b8:	89fb      	ldrh	r3, [r7, #14]
 80017ba:	83fb      	strh	r3, [r7, #30]
      break;
 80017bc:	e018      	b.n	80017f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b299      	uxth	r1, r3
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <BSP_LCD_DisplayStringAt+0x174>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4831      	ldr	r0, [pc, #196]	; (8001890 <BSP_LCD_DisplayStringAt+0x178>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4403      	add	r3, r0
 80017d6:	3308      	adds	r3, #8
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	889b      	ldrh	r3, [r3, #4]
 80017dc:	fb11 f303 	smulbb	r3, r1, r3
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	4413      	add	r3, r2
 80017e6:	83fb      	strh	r3, [r7, #30]
      break;
 80017e8:	e002      	b.n	80017f0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	83fb      	strh	r3, [r7, #30]
      break;
 80017ee:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80017f0:	e01a      	b.n	8001828 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	89b9      	ldrh	r1, [r7, #12]
 80017f8:	8bfb      	ldrh	r3, [r7, #30]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff48 	bl	8001690 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <BSP_LCD_DisplayStringAt+0x174>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4922      	ldr	r1, [pc, #136]	; (8001890 <BSP_LCD_DisplayStringAt+0x178>)
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	3308      	adds	r3, #8
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	889a      	ldrh	r2, [r3, #4]
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	4413      	add	r3, r2
 800181a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3301      	adds	r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
    i++;
 8001822:	8bbb      	ldrh	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2dc      	uxtb	r4, r3
 8001836:	f7ff fe2f 	bl	8001498 <BSP_LCD_GetXSize>
 800183a:	8bb9      	ldrh	r1, [r7, #28]
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <BSP_LCD_DisplayStringAt+0x174>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4d13      	ldr	r5, [pc, #76]	; (8001890 <BSP_LCD_DisplayStringAt+0x178>)
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	442b      	add	r3, r5
 800184c:	3308      	adds	r3, #8
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	889b      	ldrh	r3, [r3, #4]
 8001852:	fb03 f301 	mul.w	r3, r3, r1
 8001856:	1ac3      	subs	r3, r0, r3
 8001858:	b299      	uxth	r1, r3
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <BSP_LCD_DisplayStringAt+0x174>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	480c      	ldr	r0, [pc, #48]	; (8001890 <BSP_LCD_DisplayStringAt+0x178>)
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4403      	add	r3, r0
 800186a:	3308      	adds	r3, #8
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	889b      	ldrh	r3, [r3, #4]
 8001870:	4299      	cmp	r1, r3
 8001872:	bf2c      	ite	cs
 8001874:	2301      	movcs	r3, #1
 8001876:	2300      	movcc	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4023      	ands	r3, r4
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1b7      	bne.n	80017f2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bdb0      	pop	{r4, r5, r7, pc}
 800188c:	20000140 	.word	0x20000140
 8001890:	20000144 	.word	0x20000144

08001894 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80018a0:	f7ff feb8 	bl	8001614 <BSP_LCD_GetFont>
 80018a4:	4603      	mov	r3, r0
 80018a6:	88db      	ldrh	r3, [r3, #6]
 80018a8:	88fa      	ldrh	r2, [r7, #6]
 80018aa:	fb12 f303 	smulbb	r3, r2, r3
 80018ae:	b299      	uxth	r1, r3
 80018b0:	2303      	movs	r3, #3
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff ff2f 	bl	8001718 <BSP_LCD_DisplayStringAt>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	460b      	mov	r3, r1
 80018d0:	80bb      	strh	r3, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <BSP_LCD_DrawHLine+0x70>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a16      	ldr	r2, [pc, #88]	; (8001938 <BSP_LCD_DrawHLine+0x74>)
 80018e0:	2134      	movs	r1, #52	; 0x34
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	335c      	adds	r3, #92	; 0x5c
 80018ea:	681c      	ldr	r4, [r3, #0]
 80018ec:	f7ff fdd4 	bl	8001498 <BSP_LCD_GetXSize>
 80018f0:	4602      	mov	r2, r0
 80018f2:	88bb      	ldrh	r3, [r7, #4]
 80018f4:	fb03 f202 	mul.w	r2, r3, r2
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4423      	add	r3, r4
 8001900:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <BSP_LCD_DrawHLine+0x70>)
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	887c      	ldrh	r4, [r7, #2]
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <BSP_LCD_DrawHLine+0x70>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4d0b      	ldr	r5, [pc, #44]	; (800193c <BSP_LCD_DrawHLine+0x78>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	442b      	add	r3, r5
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	2300      	movs	r3, #0
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	4622      	mov	r2, r4
 8001926:	f000 fabb 	bl	8001ea0 <FillBuffer>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	20000140 	.word	0x20000140
 8001938:	2000056c 	.word	0x2000056c
 800193c:	20000144 	.word	0x20000144

08001940 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	80bb      	strh	r3, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	f1c3 0303 	rsb	r3, r3, #3
 800195a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8001964:	e0c7      	b.n	8001af6 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	b29a      	uxth	r2, r3
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	4413      	add	r3, r2
 800196e:	b298      	uxth	r0, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	b29b      	uxth	r3, r3
 8001974:	88ba      	ldrh	r2, [r7, #4]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	b299      	uxth	r1, r3
 800197a:	4b64      	ldr	r3, [pc, #400]	; (8001b0c <BSP_LCD_DrawCircle+0x1cc>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4c64      	ldr	r4, [pc, #400]	; (8001b10 <BSP_LCD_DrawCircle+0x1d0>)
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4423      	add	r3, r4
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	f000 f9a7 	bl	8001ce0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	b29b      	uxth	r3, r3
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	b298      	uxth	r0, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	88ba      	ldrh	r2, [r7, #4]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	b299      	uxth	r1, r3
 80019a6:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <BSP_LCD_DrawCircle+0x1cc>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4c59      	ldr	r4, [pc, #356]	; (8001b10 <BSP_LCD_DrawCircle+0x1d0>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4423      	add	r3, r4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	f000 f991 	bl	8001ce0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4413      	add	r3, r2
 80019c6:	b298      	uxth	r0, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	88ba      	ldrh	r2, [r7, #4]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	b299      	uxth	r1, r3
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <BSP_LCD_DrawCircle+0x1cc>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4c4e      	ldr	r4, [pc, #312]	; (8001b10 <BSP_LCD_DrawCircle+0x1d0>)
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4423      	add	r3, r4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	f000 f97b 	bl	8001ce0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	b298      	uxth	r0, r3
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	88ba      	ldrh	r2, [r7, #4]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	b299      	uxth	r1, r3
 80019fe:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <BSP_LCD_DrawCircle+0x1cc>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4c43      	ldr	r4, [pc, #268]	; (8001b10 <BSP_LCD_DrawCircle+0x1d0>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4423      	add	r3, r4
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	f000 f965 	bl	8001ce0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b298      	uxth	r0, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	b299      	uxth	r1, r3
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <BSP_LCD_DrawCircle+0x1cc>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4c38      	ldr	r4, [pc, #224]	; (8001b10 <BSP_LCD_DrawCircle+0x1d0>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4423      	add	r3, r4
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f000 f94f 	bl	8001ce0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	88fa      	ldrh	r2, [r7, #6]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	b298      	uxth	r0, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	88bb      	ldrh	r3, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	b299      	uxth	r1, r3
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <BSP_LCD_DrawCircle+0x1cc>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4c2d      	ldr	r4, [pc, #180]	; (8001b10 <BSP_LCD_DrawCircle+0x1d0>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4423      	add	r3, r4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f000 f939 	bl	8001ce0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4413      	add	r3, r2
 8001a76:	b298      	uxth	r0, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b299      	uxth	r1, r3
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <BSP_LCD_DrawCircle+0x1cc>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4c22      	ldr	r4, [pc, #136]	; (8001b10 <BSP_LCD_DrawCircle+0x1d0>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4423      	add	r3, r4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	f000 f923 	bl	8001ce0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	88fa      	ldrh	r2, [r7, #6]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	b298      	uxth	r0, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	88bb      	ldrh	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b299      	uxth	r1, r3
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <BSP_LCD_DrawCircle+0x1cc>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4c17      	ldr	r4, [pc, #92]	; (8001b10 <BSP_LCD_DrawCircle+0x1d0>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4423      	add	r3, r4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f000 f90d 	bl	8001ce0 <BSP_LCD_DrawPixel>

    if (d < 0)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da06      	bge.n	8001ada <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	009a      	lsls	r2, r3, #2
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3306      	adds	r3, #6
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e00a      	b.n	8001af0 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	009a      	lsls	r2, r3, #2
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	330a      	adds	r3, #10
 8001ae8:	617b      	str	r3, [r7, #20]
      cury--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	3301      	adds	r3, #1
 8001af4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	f67f af33 	bls.w	8001966 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000140 	.word	0x20000140
 8001b10:	20000144 	.word	0x20000144

08001b14 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <BSP_LCD_DisplayOn+0x1c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001b22:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <BSP_LCD_DisplayOn+0x1c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4798      	blx	r3
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000614 	.word	0x20000614

08001b34 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	; 0x38
 8001b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a60      	ldr	r2, [pc, #384]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a59      	ldr	r2, [pc, #356]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b50      	ldr	r3, [pc, #320]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b49      	ldr	r3, [pc, #292]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	4b45      	ldr	r3, [pc, #276]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a44      	ldr	r2, [pc, #272]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b3e      	ldr	r3, [pc, #248]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a3d      	ldr	r2, [pc, #244]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a36      	ldr	r2, [pc, #216]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a2f      	ldr	r2, [pc, #188]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <BSP_LCD_MspInit+0x190>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001c1a:	f641 0358 	movw	r3, #6232	; 0x1858
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001c2c:	230e      	movs	r3, #14
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	4824      	ldr	r0, [pc, #144]	; (8001cc8 <BSP_LCD_MspInit+0x194>)
 8001c38:	f001 fe42 	bl	80038c0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001c3c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c46:	4619      	mov	r1, r3
 8001c48:	4820      	ldr	r0, [pc, #128]	; (8001ccc <BSP_LCD_MspInit+0x198>)
 8001c4a:	f001 fe39 	bl	80038c0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001c4e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481d      	ldr	r0, [pc, #116]	; (8001cd0 <BSP_LCD_MspInit+0x19c>)
 8001c5c:	f001 fe30 	bl	80038c0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001c60:	2348      	movs	r3, #72	; 0x48
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481a      	ldr	r0, [pc, #104]	; (8001cd4 <BSP_LCD_MspInit+0x1a0>)
 8001c6c:	f001 fe28 	bl	80038c0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4816      	ldr	r0, [pc, #88]	; (8001cd8 <BSP_LCD_MspInit+0x1a4>)
 8001c7e:	f001 fe1f 	bl	80038c0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001c82:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4813      	ldr	r0, [pc, #76]	; (8001cdc <BSP_LCD_MspInit+0x1a8>)
 8001c90:	f001 fe16 	bl	80038c0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001c94:	2303      	movs	r3, #3
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001c98:	2309      	movs	r3, #9
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480a      	ldr	r0, [pc, #40]	; (8001ccc <BSP_LCD_MspInit+0x198>)
 8001ca4:	f001 fe0c 	bl	80038c0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001ca8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4809      	ldr	r0, [pc, #36]	; (8001cdc <BSP_LCD_MspInit+0x1a8>)
 8001cb6:	f001 fe03 	bl	80038c0 <HAL_GPIO_Init>
}
 8001cba:	bf00      	nop
 8001cbc:	3738      	adds	r7, #56	; 0x38
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40021800 	.word	0x40021800

08001ce0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	603a      	str	r2, [r7, #0]
 8001cea:	80fb      	strh	r3, [r7, #6]
 8001cec:	460b      	mov	r3, r1
 8001cee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <BSP_LCD_DrawPixel+0x44>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <BSP_LCD_DrawPixel+0x48>)
 8001cf6:	2134      	movs	r1, #52	; 0x34
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	335c      	adds	r3, #92	; 0x5c
 8001d00:	681c      	ldr	r4, [r3, #0]
 8001d02:	88bd      	ldrh	r5, [r7, #4]
 8001d04:	f7ff fbc8 	bl	8001498 <BSP_LCD_GetXSize>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	fb03 f205 	mul.w	r2, r3, r5
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4423      	add	r3, r4
 8001d16:	461a      	mov	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bdb0      	pop	{r4, r5, r7, pc}
 8001d24:	20000140 	.word	0x20000140
 8001d28:	2000056c 	.word	0x2000056c

08001d2c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	603a      	str	r2, [r7, #0]
 8001d36:	80fb      	strh	r3, [r7, #6]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <DrawChar+0x16c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4953      	ldr	r1, [pc, #332]	; (8001e9c <DrawChar+0x170>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	3308      	adds	r3, #8
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	88db      	ldrh	r3, [r3, #6]
 8001d5e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001d60:	4b4d      	ldr	r3, [pc, #308]	; (8001e98 <DrawChar+0x16c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	494d      	ldr	r1, [pc, #308]	; (8001e9c <DrawChar+0x170>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3308      	adds	r3, #8
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	889b      	ldrh	r3, [r3, #4]
 8001d76:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8001d78:	8a3b      	ldrh	r3, [r7, #16]
 8001d7a:	3307      	adds	r3, #7
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da00      	bge.n	8001d82 <DrawChar+0x56>
 8001d80:	3307      	adds	r3, #7
 8001d82:	10db      	asrs	r3, r3, #3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	8a3b      	ldrh	r3, [r7, #16]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e076      	b.n	8001e86 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001d98:	8a3b      	ldrh	r3, [r7, #16]
 8001d9a:	3307      	adds	r3, #7
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da00      	bge.n	8001da2 <DrawChar+0x76>
 8001da0:	3307      	adds	r3, #7
 8001da2:	10db      	asrs	r3, r3, #3
 8001da4:	461a      	mov	r2, r3
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fb03 f302 	mul.w	r3, r3, r2
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001db2:	8a3b      	ldrh	r3, [r7, #16]
 8001db4:	3307      	adds	r3, #7
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da00      	bge.n	8001dbc <DrawChar+0x90>
 8001dba:	3307      	adds	r3, #7
 8001dbc:	10db      	asrs	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d002      	beq.n	8001dc8 <DrawChar+0x9c>
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d004      	beq.n	8001dd0 <DrawChar+0xa4>
 8001dc6:	e00c      	b.n	8001de2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	617b      	str	r3, [r7, #20]
      break;
 8001dce:	e016      	b.n	8001dfe <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	3201      	adds	r2, #1
 8001dda:	7812      	ldrb	r2, [r2, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
      break;
 8001de0:	e00d      	b.n	8001dfe <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	041a      	lsls	r2, r3, #16
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	3301      	adds	r3, #1
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	4313      	orrs	r3, r2
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	3202      	adds	r2, #2
 8001df6:	7812      	ldrb	r2, [r2, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
      break;
 8001dfc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	e036      	b.n	8001e72 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001e04:	8a3a      	ldrh	r2, [r7, #16]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad2      	subs	r2, r2, r3
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	2201      	movs	r2, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d012      	beq.n	8001e46 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	4413      	add	r3, r2
 8001e28:	b298      	uxth	r0, r3
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <DrawChar+0x16c>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <DrawChar+0x170>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	88bb      	ldrh	r3, [r7, #4]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7ff ff4e 	bl	8001ce0 <BSP_LCD_DrawPixel>
 8001e44:	e012      	b.n	8001e6c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b298      	uxth	r0, r3
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <DrawChar+0x16c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4911      	ldr	r1, [pc, #68]	; (8001e9c <DrawChar+0x170>)
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	3304      	adds	r3, #4
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	88bb      	ldrh	r3, [r7, #4]
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7ff ff3a 	bl	8001ce0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	8a3b      	ldrh	r3, [r7, #16]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d3c4      	bcc.n	8001e04 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8001e7a:	88bb      	ldrh	r3, [r7, #4]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	3301      	adds	r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	8a7b      	ldrh	r3, [r7, #18]
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d384      	bcc.n	8001d98 <DrawChar+0x6c>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000140 	.word	0x20000140
 8001e9c:	20000144 	.word	0x20000144

08001ea0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <FillBuffer+0x68>)
 8001eb0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001eb4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <FillBuffer+0x68>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <FillBuffer+0x68>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <FillBuffer+0x68>)
 8001ec4:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <FillBuffer+0x6c>)
 8001ec6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001ec8:	480f      	ldr	r0, [pc, #60]	; (8001f08 <FillBuffer+0x68>)
 8001eca:	f001 f95d 	bl	8003188 <HAL_DMA2D_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d115      	bne.n	8001f00 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	480c      	ldr	r0, [pc, #48]	; (8001f08 <FillBuffer+0x68>)
 8001ed8:	f001 fbc4 	bl	8003664 <HAL_DMA2D_ConfigLayer>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10e      	bne.n	8001f00 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69f9      	ldr	r1, [r7, #28]
 8001eec:	4806      	ldr	r0, [pc, #24]	; (8001f08 <FillBuffer+0x68>)
 8001eee:	f001 f994 	bl	800321a <HAL_DMA2D_Start>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d103      	bne.n	8001f00 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001ef8:	210a      	movs	r1, #10
 8001efa:	4803      	ldr	r0, [pc, #12]	; (8001f08 <FillBuffer+0x68>)
 8001efc:	f001 f9b8 	bl	8003270 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200000d0 	.word	0x200000d0
 8001f0c:	4002b000 	.word	0x4002b000

08001f10 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f16:	4a2a      	ldr	r2, [pc, #168]	; (8001fc0 <BSP_SDRAM_Init+0xb0>)
 8001f18:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <BSP_SDRAM_Init+0xb4>)
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001f20:	4b28      	ldr	r3, [pc, #160]	; (8001fc4 <BSP_SDRAM_Init+0xb4>)
 8001f22:	2207      	movs	r2, #7
 8001f24:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <BSP_SDRAM_Init+0xb4>)
 8001f28:	2204      	movs	r2, #4
 8001f2a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <BSP_SDRAM_Init+0xb4>)
 8001f2e:	2207      	movs	r2, #7
 8001f30:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <BSP_SDRAM_Init+0xb4>)
 8001f34:	2202      	movs	r2, #2
 8001f36:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <BSP_SDRAM_Init+0xb4>)
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <BSP_SDRAM_Init+0xb4>)
 8001f40:	2202      	movs	r2, #2
 8001f42:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f52:	2204      	movs	r2, #4
 8001f54:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f58:	2210      	movs	r2, #16
 8001f5a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f64:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001f68:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f76:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001f86:	2100      	movs	r1, #0
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f8a:	f000 f87f 	bl	800208c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001f8e:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <BSP_SDRAM_Init+0xb4>)
 8001f90:	480a      	ldr	r0, [pc, #40]	; (8001fbc <BSP_SDRAM_Init+0xac>)
 8001f92:	f004 fdad 	bl	8006af0 <HAL_SDRAM_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <BSP_SDRAM_Init+0xb8>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
 8001fa2:	e002      	b.n	8001faa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <BSP_SDRAM_Init+0xb8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001faa:	f240 506a 	movw	r0, #1386	; 0x56a
 8001fae:	f000 f80d 	bl	8001fcc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <BSP_SDRAM_Init+0xb8>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000015c 	.word	0x2000015c
 8001fc0:	a0000140 	.word	0xa0000140
 8001fc4:	20000190 	.word	0x20000190
 8001fc8:	20000044 	.word	0x20000044

08001fcc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff4:	4923      	ldr	r1, [pc, #140]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ff6:	4824      	ldr	r0, [pc, #144]	; (8002088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ff8:	f004 fdae 	bl	8006b58 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f000 fde3 	bl	8002bc8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002002:	4b20      	ldr	r3, [pc, #128]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002004:	2202      	movs	r2, #2
 8002006:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800200a:	2208      	movs	r2, #8
 800200c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002010:	2201      	movs	r2, #1
 8002012:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800201a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201e:	4919      	ldr	r1, [pc, #100]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002020:	4819      	ldr	r0, [pc, #100]	; (8002088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002022:	f004 fd99 	bl	8006b58 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002028:	2203      	movs	r2, #3
 800202a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800202e:	2208      	movs	r2, #8
 8002030:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002034:	2204      	movs	r2, #4
 8002036:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800203e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002042:	4910      	ldr	r1, [pc, #64]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002044:	4810      	ldr	r0, [pc, #64]	; (8002088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002046:	f004 fd87 	bl	8006b58 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800204a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800204e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002052:	2204      	movs	r2, #4
 8002054:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002058:	2208      	movs	r2, #8
 800205a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800205e:	2201      	movs	r2, #1
 8002060:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002066:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206c:	4905      	ldr	r1, [pc, #20]	; (8002084 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800206e:	4806      	ldr	r0, [pc, #24]	; (8002088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002070:	f004 fd72 	bl	8006b58 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4804      	ldr	r0, [pc, #16]	; (8002088 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002078:	f004 fd99 	bl	8006bae <HAL_SDRAM_ProgramRefreshRate>
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200001ac 	.word	0x200001ac
 8002088:	2000015c 	.word	0x2000015c

0800208c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b090      	sub	sp, #64	; 0x40
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80ec 	beq.w	8002276 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a2:	4b77      	ldr	r3, [pc, #476]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	4a76      	ldr	r2, [pc, #472]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6393      	str	r3, [r2, #56]	; 0x38
 80020ae:	4b74      	ldr	r3, [pc, #464]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	4b70      	ldr	r3, [pc, #448]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a6f      	ldr	r2, [pc, #444]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	4b69      	ldr	r3, [pc, #420]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a68      	ldr	r2, [pc, #416]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b66      	ldr	r3, [pc, #408]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	623b      	str	r3, [r7, #32]
 80020f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	4b62      	ldr	r3, [pc, #392]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a61      	ldr	r2, [pc, #388]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a5a      	ldr	r2, [pc, #360]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	4b54      	ldr	r3, [pc, #336]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a53      	ldr	r2, [pc, #332]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002134:	f043 0310 	orr.w	r3, r3, #16
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a4c      	ldr	r2, [pc, #304]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002150:	f043 0320 	orr.w	r3, r3, #32
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b46      	ldr	r3, [pc, #280]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a45      	ldr	r2, [pc, #276]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 800216c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b43      	ldr	r3, [pc, #268]	; (8002280 <BSP_SDRAM_MspInit+0x1f4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002182:	2302      	movs	r3, #2
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800218a:	230c      	movs	r3, #12
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800218e:	2360      	movs	r3, #96	; 0x60
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002196:	4619      	mov	r1, r3
 8002198:	483a      	ldr	r0, [pc, #232]	; (8002284 <BSP_SDRAM_MspInit+0x1f8>)
 800219a:	f001 fb91 	bl	80038c0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800219e:	2301      	movs	r3, #1
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80021a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a6:	4619      	mov	r1, r3
 80021a8:	4837      	ldr	r0, [pc, #220]	; (8002288 <BSP_SDRAM_MspInit+0x1fc>)
 80021aa:	f001 fb89 	bl	80038c0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80021ae:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80021b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b8:	4619      	mov	r1, r3
 80021ba:	4834      	ldr	r0, [pc, #208]	; (800228c <BSP_SDRAM_MspInit+0x200>)
 80021bc:	f001 fb80 	bl	80038c0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80021c0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80021c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ca:	4619      	mov	r1, r3
 80021cc:	4830      	ldr	r0, [pc, #192]	; (8002290 <BSP_SDRAM_MspInit+0x204>)
 80021ce:	f001 fb77 	bl	80038c0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80021d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80021d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021dc:	4619      	mov	r1, r3
 80021de:	482d      	ldr	r0, [pc, #180]	; (8002294 <BSP_SDRAM_MspInit+0x208>)
 80021e0:	f001 fb6e 	bl	80038c0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80021e4:	f248 1333 	movw	r3, #33075	; 0x8133
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80021ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ee:	4619      	mov	r1, r3
 80021f0:	4829      	ldr	r0, [pc, #164]	; (8002298 <BSP_SDRAM_MspInit+0x20c>)
 80021f2:	f001 fb65 	bl	80038c0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 8002204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002208:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 800220c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002210:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 8002214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002218:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 800221c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002220:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 8002224:	2200      	movs	r2, #0
 8002226:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 800222a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800222e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 8002238:	2203      	movs	r2, #3
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 800223e:	2200      	movs	r2, #0
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 800224a:	4a15      	ldr	r2, [pc, #84]	; (80022a0 <BSP_SDRAM_MspInit+0x214>)
 800224c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a12      	ldr	r2, [pc, #72]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
 8002254:	4a11      	ldr	r2, [pc, #68]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800225a:	4810      	ldr	r0, [pc, #64]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 800225c:	f000 fe84 	bl	8002f68 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002260:	480e      	ldr	r0, [pc, #56]	; (800229c <BSP_SDRAM_MspInit+0x210>)
 8002262:	f000 fdd3 	bl	8002e0c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	210f      	movs	r1, #15
 800226a:	2038      	movs	r0, #56	; 0x38
 800226c:	f000 fd88 	bl	8002d80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002270:	2038      	movs	r0, #56	; 0x38
 8002272:	f000 fda1 	bl	8002db8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002276:	bf00      	nop
 8002278:	3740      	adds	r7, #64	; 0x40
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40020400 	.word	0x40020400
 8002288:	40020800 	.word	0x40020800
 800228c:	40020c00 	.word	0x40020c00
 8002290:	40021000 	.word	0x40021000
 8002294:	40021400 	.word	0x40021400
 8002298:	40021800 	.word	0x40021800
 800229c:	200001bc 	.word	0x200001bc
 80022a0:	40026410 	.word	0x40026410

080022a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_MspInit+0x54>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_MspInit+0x54>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_MspInit+0x54>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_MspInit+0x54>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_MspInit+0x54>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_MspInit+0x54>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	210f      	movs	r1, #15
 80022e6:	f06f 0001 	mvn.w	r0, #1
 80022ea:	f000 fd49 	bl	8002d80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <HAL_CRC_MspInit+0x3c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10d      	bne.n	800232a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_CRC_MspInit+0x40>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <HAL_CRC_MspInit+0x40>)
 8002318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_CRC_MspInit+0x40>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023000 	.word	0x40023000
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <HAL_DMA2D_MspInit+0x48>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d115      	bne.n	800237e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_DMA2D_MspInit+0x4c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_DMA2D_MspInit+0x4c>)
 800235c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_DMA2D_MspInit+0x4c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2105      	movs	r1, #5
 8002372:	205a      	movs	r0, #90	; 0x5a
 8002374:	f000 fd04 	bl	8002d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002378:	205a      	movs	r0, #90	; 0x5a
 800237a:	f000 fd1d 	bl	8002db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	4002b000 	.word	0x4002b000
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a29      	ldr	r2, [pc, #164]	; (8002454 <HAL_I2C_MspInit+0xc4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d14b      	bne.n	800244a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_I2C_MspInit+0xc8>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a27      	ldr	r2, [pc, #156]	; (8002458 <HAL_I2C_MspInit+0xc8>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_I2C_MspInit+0xc8>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_I2C_MspInit+0xc8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a20      	ldr	r2, [pc, #128]	; (8002458 <HAL_I2C_MspInit+0xc8>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_I2C_MspInit+0xc8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80023ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023f0:	2312      	movs	r3, #18
 80023f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f4:	2301      	movs	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023fc:	2304      	movs	r3, #4
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	4815      	ldr	r0, [pc, #84]	; (800245c <HAL_I2C_MspInit+0xcc>)
 8002408:	f001 fa5a 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800240c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002412:	2312      	movs	r3, #18
 8002414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002416:	2301      	movs	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800241e:	2304      	movs	r3, #4
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <HAL_I2C_MspInit+0xd0>)
 800242a:	f001 fa49 	bl	80038c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_I2C_MspInit+0xc8>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_I2C_MspInit+0xc8>)
 8002438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_I2C_MspInit+0xc8>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800244a:	bf00      	nop
 800244c:	3728      	adds	r7, #40	; 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40005c00 	.word	0x40005c00
 8002458:	40023800 	.word	0x40023800
 800245c:	40020800 	.word	0x40020800
 8002460:	40020000 	.word	0x40020000

08002464 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b09a      	sub	sp, #104	; 0x68
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800247c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002480:	2230      	movs	r2, #48	; 0x30
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f007 fe4b 	bl	800a120 <memset>
  if(hltdc->Instance==LTDC)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <HAL_LTDC_MspInit+0x240>)
 8002490:	4293      	cmp	r3, r2
 8002492:	f040 8103 	bne.w	800269c <HAL_LTDC_MspInit+0x238>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002496:	2308      	movs	r3, #8
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800249a:	2332      	movs	r3, #50	; 0x32
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800249e:	2305      	movs	r3, #5
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80024a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 f961 	bl	8006774 <HAL_RCCEx_PeriphCLKConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80024b8:	f7fe fdc6 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	4b79      	ldr	r3, [pc, #484]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	4a78      	ldr	r2, [pc, #480]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 80024c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024ca:	6453      	str	r3, [r2, #68]	; 0x44
 80024cc:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d4:	623b      	str	r3, [r7, #32]
 80024d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	4b72      	ldr	r3, [pc, #456]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	4a71      	ldr	r2, [pc, #452]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 80024e2:	f043 0320 	orr.w	r3, r3, #32
 80024e6:	6313      	str	r3, [r2, #48]	; 0x30
 80024e8:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
 80024f8:	4b6b      	ldr	r3, [pc, #428]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	4a6a      	ldr	r2, [pc, #424]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6313      	str	r3, [r2, #48]	; 0x30
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	4b64      	ldr	r3, [pc, #400]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	4a63      	ldr	r2, [pc, #396]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	6313      	str	r3, [r2, #48]	; 0x30
 8002520:	4b61      	ldr	r3, [pc, #388]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	4b5d      	ldr	r3, [pc, #372]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	4a5c      	ldr	r2, [pc, #368]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 8002536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800253a:	6313      	str	r3, [r2, #48]	; 0x30
 800253c:	4b5a      	ldr	r3, [pc, #360]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	4b56      	ldr	r3, [pc, #344]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4a55      	ldr	r2, [pc, #340]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6313      	str	r3, [r2, #48]	; 0x30
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	4a4e      	ldr	r2, [pc, #312]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 800256e:	f043 0308 	orr.w	r3, r3, #8
 8002572:	6313      	str	r3, [r2, #48]	; 0x30
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <HAL_LTDC_MspInit+0x244>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002584:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002592:	230e      	movs	r3, #14
 8002594:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800259a:	4619      	mov	r1, r3
 800259c:	4843      	ldr	r0, [pc, #268]	; (80026ac <HAL_LTDC_MspInit+0x248>)
 800259e:	f001 f98f 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80025a2:	f641 0358 	movw	r3, #6232	; 0x1858
 80025a6:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025b4:	230e      	movs	r3, #14
 80025b6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025bc:	4619      	mov	r1, r3
 80025be:	483c      	ldr	r0, [pc, #240]	; (80026b0 <HAL_LTDC_MspInit+0x24c>)
 80025c0:	f001 f97e 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80025c4:	2303      	movs	r3, #3
 80025c6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80025d4:	2309      	movs	r3, #9
 80025d6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025dc:	4619      	mov	r1, r3
 80025de:	4835      	ldr	r0, [pc, #212]	; (80026b4 <HAL_LTDC_MspInit+0x250>)
 80025e0:	f001 f96e 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80025e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80025e8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025f6:	230e      	movs	r3, #14
 80025f8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025fe:	4619      	mov	r1, r3
 8002600:	482c      	ldr	r0, [pc, #176]	; (80026b4 <HAL_LTDC_MspInit+0x250>)
 8002602:	f001 f95d 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002606:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800260a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002618:	230e      	movs	r3, #14
 800261a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800261c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002620:	4619      	mov	r1, r3
 8002622:	4825      	ldr	r0, [pc, #148]	; (80026b8 <HAL_LTDC_MspInit+0x254>)
 8002624:	f001 f94c 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002628:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800262c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800263a:	230e      	movs	r3, #14
 800263c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800263e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002642:	4619      	mov	r1, r3
 8002644:	481d      	ldr	r0, [pc, #116]	; (80026bc <HAL_LTDC_MspInit+0x258>)
 8002646:	f001 f93b 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800264a:	2348      	movs	r3, #72	; 0x48
 800264c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800265a:	230e      	movs	r3, #14
 800265c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800265e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002662:	4619      	mov	r1, r3
 8002664:	4816      	ldr	r0, [pc, #88]	; (80026c0 <HAL_LTDC_MspInit+0x25c>)
 8002666:	f001 f92b 	bl	80038c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800266a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800266e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800267c:	2309      	movs	r3, #9
 800267e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002680:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002684:	4619      	mov	r1, r3
 8002686:	480c      	ldr	r0, [pc, #48]	; (80026b8 <HAL_LTDC_MspInit+0x254>)
 8002688:	f001 f91a 	bl	80038c0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2105      	movs	r1, #5
 8002690:	2058      	movs	r0, #88	; 0x58
 8002692:	f000 fb75 	bl	8002d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002696:	2058      	movs	r0, #88	; 0x58
 8002698:	f000 fb8e 	bl	8002db8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	3768      	adds	r7, #104	; 0x68
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40016800 	.word	0x40016800
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40021400 	.word	0x40021400
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40021800 	.word	0x40021800
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020c00 	.word	0x40020c00

080026c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_SPI_MspInit+0x84>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d12c      	bne.n	8002740 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_SPI_MspInit+0x88>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a17      	ldr	r2, [pc, #92]	; (800274c <HAL_SPI_MspInit+0x88>)
 80026f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_SPI_MspInit+0x88>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_SPI_MspInit+0x88>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <HAL_SPI_MspInit+0x88>)
 800270c:	f043 0320 	orr.w	r3, r3, #32
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_SPI_MspInit+0x88>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800271e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002730:	2305      	movs	r3, #5
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <HAL_SPI_MspInit+0x8c>)
 800273c:	f001 f8c0 	bl	80038c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40015000 	.word	0x40015000
 800274c:	40023800 	.word	0x40023800
 8002750:	40021400 	.word	0x40021400

08002754 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a08      	ldr	r2, [pc, #32]	; (8002784 <HAL_SPI_MspDeInit+0x30>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10a      	bne.n	800277c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_SPI_MspDeInit+0x34>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <HAL_SPI_MspDeInit+0x34>)
 800276c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002772:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <HAL_SPI_MspDeInit+0x38>)
 8002778:	f001 fa4e 	bl	8003c18 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40015000 	.word	0x40015000
 8002788:	40023800 	.word	0x40023800
 800278c:	40021400 	.word	0x40021400

08002790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_TIM_Base_MspInit+0x3c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10d      	bne.n	80027be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_TIM_Base_MspInit+0x40>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_TIM_Base_MspInit+0x40>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_TIM_Base_MspInit+0x40>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	; (8002858 <HAL_UART_MspInit+0x84>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d12c      	bne.n	8002850 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_UART_MspInit+0x88>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_UART_MspInit+0x88>)
 8002800:	f043 0310 	orr.w	r3, r3, #16
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_UART_MspInit+0x88>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_UART_MspInit+0x88>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_UART_MspInit+0x88>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_UART_MspInit+0x88>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800282e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002840:	2307      	movs	r3, #7
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <HAL_UART_MspInit+0x8c>)
 800284c:	f001 f838 	bl	80038c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40011000 	.word	0x40011000
 800285c:	40023800 	.word	0x40023800
 8002860:	40020000 	.word	0x40020000

08002864 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002878:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_FMC_MspInit+0x104>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d16f      	bne.n	8002960 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002880:	4b39      	ldr	r3, [pc, #228]	; (8002968 <HAL_FMC_MspInit+0x104>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_FMC_MspInit+0x108>)
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	4a37      	ldr	r2, [pc, #220]	; (800296c <HAL_FMC_MspInit+0x108>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6393      	str	r3, [r2, #56]	; 0x38
 8002896:	4b35      	ldr	r3, [pc, #212]	; (800296c <HAL_FMC_MspInit+0x108>)
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80028a2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80028a6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028b4:	230c      	movs	r3, #12
 80028b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	482c      	ldr	r0, [pc, #176]	; (8002970 <HAL_FMC_MspInit+0x10c>)
 80028be:	f000 ffff 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80028c2:	2301      	movs	r3, #1
 80028c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ce:	2303      	movs	r3, #3
 80028d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028d2:	230c      	movs	r3, #12
 80028d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	4826      	ldr	r0, [pc, #152]	; (8002974 <HAL_FMC_MspInit+0x110>)
 80028dc:	f000 fff0 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80028e0:	f248 1333 	movw	r3, #33075	; 0x8133
 80028e4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028f2:	230c      	movs	r3, #12
 80028f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	481f      	ldr	r0, [pc, #124]	; (8002978 <HAL_FMC_MspInit+0x114>)
 80028fc:	f000 ffe0 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002900:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002904:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002912:	230c      	movs	r3, #12
 8002914:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	4619      	mov	r1, r3
 800291a:	4818      	ldr	r0, [pc, #96]	; (800297c <HAL_FMC_MspInit+0x118>)
 800291c:	f000 ffd0 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002920:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002924:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002932:	230c      	movs	r3, #12
 8002934:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4811      	ldr	r0, [pc, #68]	; (8002980 <HAL_FMC_MspInit+0x11c>)
 800293c:	f000 ffc0 	bl	80038c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002940:	2360      	movs	r3, #96	; 0x60
 8002942:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002950:	230c      	movs	r3, #12
 8002952:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	4619      	mov	r1, r3
 8002958:	480a      	ldr	r0, [pc, #40]	; (8002984 <HAL_FMC_MspInit+0x120>)
 800295a:	f000 ffb1 	bl	80038c0 <HAL_GPIO_Init>
 800295e:	e000      	b.n	8002962 <HAL_FMC_MspInit+0xfe>
    return;
 8002960:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000021c 	.word	0x2000021c
 800296c:	40023800 	.word	0x40023800
 8002970:	40021400 	.word	0x40021400
 8002974:	40020800 	.word	0x40020800
 8002978:	40021800 	.word	0x40021800
 800297c:	40021000 	.word	0x40021000
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40020400 	.word	0x40020400

08002988 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002990:	f7ff ff68 	bl	8002864 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80029ac:	2200      	movs	r2, #0
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	2036      	movs	r0, #54	; 0x36
 80029b2:	f000 f9e5 	bl	8002d80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029b6:	2036      	movs	r0, #54	; 0x36
 80029b8:	f000 f9fe 	bl	8002db8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_InitTick+0xa4>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_InitTick+0xa4>)
 80029c6:	f043 0310 	orr.w	r3, r3, #16
 80029ca:	6413      	str	r3, [r2, #64]	; 0x40
 80029cc:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <HAL_InitTick+0xa4>)
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029d8:	f107 0210 	add.w	r2, r7, #16
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 fe94 	bl	8006710 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029e8:	f003 fe6a 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 80029ec:	4603      	mov	r3, r0
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_InitTick+0xa8>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9b      	lsrs	r3, r3, #18
 80029fc:	3b01      	subs	r3, #1
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_InitTick+0xac>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <HAL_InitTick+0xb0>)
 8002a04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_InitTick+0xac>)
 8002a08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a0e:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <HAL_InitTick+0xac>)
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <HAL_InitTick+0xac>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_InitTick+0xac>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a20:	4809      	ldr	r0, [pc, #36]	; (8002a48 <HAL_InitTick+0xac>)
 8002a22:	f004 fec3 	bl	80077ac <HAL_TIM_Base_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a2c:	4806      	ldr	r0, [pc, #24]	; (8002a48 <HAL_InitTick+0xac>)
 8002a2e:	f004 ff0d 	bl	800784c <HAL_TIM_Base_Start_IT>
 8002a32:	4603      	mov	r3, r0
 8002a34:	e000      	b.n	8002a38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	; 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	431bde83 	.word	0x431bde83
 8002a48:	20000618 	.word	0x20000618
 8002a4c:	40001000 	.word	0x40001000

08002a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <NMI_Handler+0x4>

08002a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a5a:	e7fe      	b.n	8002a5a <HardFault_Handler+0x4>

08002a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <MemManage_Handler+0x4>

08002a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a66:	e7fe      	b.n	8002a66 <BusFault_Handler+0x4>

08002a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <UsageFault_Handler+0x4>

08002a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <TIM6_DAC_IRQHandler+0x10>)
 8002a82:	f004 ff53 	bl	800792c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000618 	.word	0x20000618

08002a90 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <OTG_HS_IRQHandler+0x10>)
 8002a96:	f001 f9e4 	bl	8003e62 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000664 	.word	0x20000664

08002aa4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <LTDC_IRQHandler+0x10>)
 8002aaa:	f002 fefb 	bl	80058a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200003c4 	.word	0x200003c4

08002ab8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <DMA2D_IRQHandler+0x10>)
 8002abe:	f000 fcc0 	bl	8003442 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200004f8 	.word	0x200004f8

08002acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <SystemInit+0x20>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	4a05      	ldr	r2, [pc, #20]	; (8002aec <SystemInit+0x20>)
 8002ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b28 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002af4:	480d      	ldr	r0, [pc, #52]	; (8002b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002af6:	490e      	ldr	r1, [pc, #56]	; (8002b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002af8:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002afc:	e002      	b.n	8002b04 <LoopCopyDataInit>

08002afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b02:	3304      	adds	r3, #4

08002b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b08:	d3f9      	bcc.n	8002afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b0c:	4c0b      	ldr	r4, [pc, #44]	; (8002b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b10:	e001      	b.n	8002b16 <LoopFillZerobss>

08002b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b14:	3204      	adds	r2, #4

08002b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b18:	d3fb      	bcc.n	8002b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b1a:	f7ff ffd7 	bl	8002acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b1e:	f007 facd 	bl	800a0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b22:	f7fd fe8f 	bl	8000844 <main>
  bx  lr    
 8002b26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b30:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8002b34:	0800bc4c 	.word	0x0800bc4c
  ldr r2, =_sbss
 8002b38:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8002b3c:	20000968 	.word	0x20000968

08002b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b40:	e7fe      	b.n	8002b40 <ADC_IRQHandler>
	...

08002b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_Init+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <HAL_Init+0x40>)
 8002b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_Init+0x40>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <HAL_Init+0x40>)
 8002b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_Init+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <HAL_Init+0x40>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	f000 f8fc 	bl	8002d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7ff ff12 	bl	800299c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b78:	f7ff fb94 	bl	80022a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00

08002b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_IncTick+0x20>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_IncTick+0x24>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <HAL_IncTick+0x24>)
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000050 	.word	0x20000050
 8002bac:	20000660 	.word	0x20000660

08002bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_GetTick+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000660 	.word	0x20000660

08002bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd0:	f7ff ffee 	bl	8002bb0 <HAL_GetTick>
 8002bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be0:	d005      	beq.n	8002bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_Delay+0x44>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bee:	bf00      	nop
 8002bf0:	f7ff ffde 	bl	8002bb0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d8f7      	bhi.n	8002bf0 <HAL_Delay+0x28>
  {
  }
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000050 	.word	0x20000050

08002c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c42:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <__NVIC_SetPriorityGrouping+0x44>)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	60d3      	str	r3, [r2, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <__NVIC_GetPriorityGrouping+0x18>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	f003 0307 	and.w	r3, r3, #7
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	db0b      	blt.n	8002c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f003 021f 	and.w	r2, r3, #31
 8002c8c:	4907      	ldr	r1, [pc, #28]	; (8002cac <__NVIC_EnableIRQ+0x38>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	2001      	movs	r0, #1
 8002c96:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0a      	blt.n	8002cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	490c      	ldr	r1, [pc, #48]	; (8002cfc <__NVIC_SetPriority+0x4c>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd8:	e00a      	b.n	8002cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4908      	ldr	r1, [pc, #32]	; (8002d00 <__NVIC_SetPriority+0x50>)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	0112      	lsls	r2, r2, #4
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	440b      	add	r3, r1
 8002cee:	761a      	strb	r2, [r3, #24]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f1c3 0307 	rsb	r3, r3, #7
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf28      	it	cs
 8002d22:	2304      	movcs	r3, #4
 8002d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d902      	bls.n	8002d34 <NVIC_EncodePriority+0x30>
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3b03      	subs	r3, #3
 8002d32:	e000      	b.n	8002d36 <NVIC_EncodePriority+0x32>
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	401a      	ands	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43d9      	mvns	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	4313      	orrs	r3, r2
         );
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ff4c 	bl	8002c10 <__NVIC_SetPriorityGrouping>
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d92:	f7ff ff61 	bl	8002c58 <__NVIC_GetPriorityGrouping>
 8002d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	6978      	ldr	r0, [r7, #20]
 8002d9e:	f7ff ffb1 	bl	8002d04 <NVIC_EncodePriority>
 8002da2:	4602      	mov	r2, r0
 8002da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff80 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff54 	bl	8002c74 <__NVIC_EnableIRQ>
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00e      	b.n	8002e04 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	795b      	ldrb	r3, [r3, #5]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fa80 	bl	80022fc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff feca 	bl	8002bb0 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e099      	b.n	8002f5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e48:	e00f      	b.n	8002e6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4a:	f7ff feb1 	bl	8002bb0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d908      	bls.n	8002e6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2203      	movs	r2, #3
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e078      	b.n	8002f5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e8      	bne.n	8002e4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <HAL_DMA_Init+0x158>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d107      	bne.n	8002ed4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f023 0307 	bic.w	r3, r3, #7
 8002eea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d117      	bne.n	8002f2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00e      	beq.n	8002f2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f8bd 	bl	8003090 <DMA_CheckFifoParam>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2240      	movs	r2, #64	; 0x40
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e016      	b.n	8002f5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f874 	bl	8003024 <DMA_CalcBaseAndBitshift>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f44:	223f      	movs	r2, #63	; 0x3f
 8002f46:	409a      	lsls	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	f010803f 	.word	0xf010803f

08002f68 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e050      	b.n	800301c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d101      	bne.n	8002f8a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	e048      	b.n	800301c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2221      	movs	r2, #33	; 0x21
 8002fc8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f82a 	bl	8003024 <DMA_CalcBaseAndBitshift>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	223f      	movs	r2, #63	; 0x3f
 8002ffe:	409a      	lsls	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	3b10      	subs	r3, #16
 8003034:	4a14      	ldr	r2, [pc, #80]	; (8003088 <DMA_CalcBaseAndBitshift+0x64>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800303e:	4a13      	ldr	r2, [pc, #76]	; (800308c <DMA_CalcBaseAndBitshift+0x68>)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b03      	cmp	r3, #3
 8003050:	d909      	bls.n	8003066 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	1d1a      	adds	r2, r3, #4
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	659a      	str	r2, [r3, #88]	; 0x58
 8003064:	e007      	b.n	8003076 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	aaaaaaab 	.word	0xaaaaaaab
 800308c:	0800bc34 	.word	0x0800bc34

08003090 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11f      	bne.n	80030ea <DMA_CheckFifoParam+0x5a>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d856      	bhi.n	800315e <DMA_CheckFifoParam+0xce>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <DMA_CheckFifoParam+0x28>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030db 	.word	0x080030db
 80030c0:	080030c9 	.word	0x080030c9
 80030c4:	0800315f 	.word	0x0800315f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d046      	beq.n	8003162 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d8:	e043      	b.n	8003162 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e2:	d140      	bne.n	8003166 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e8:	e03d      	b.n	8003166 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f2:	d121      	bne.n	8003138 <DMA_CheckFifoParam+0xa8>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d837      	bhi.n	800316a <DMA_CheckFifoParam+0xda>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <DMA_CheckFifoParam+0x70>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003111 	.word	0x08003111
 8003104:	08003117 	.word	0x08003117
 8003108:	08003111 	.word	0x08003111
 800310c:	08003129 	.word	0x08003129
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      break;
 8003114:	e030      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d025      	beq.n	800316e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003126:	e022      	b.n	800316e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003130:	d11f      	bne.n	8003172 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003136:	e01c      	b.n	8003172 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d903      	bls.n	8003146 <DMA_CheckFifoParam+0xb6>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d003      	beq.n	800314c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003144:	e018      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
      break;
 800314a:	e015      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      break;
 800315c:	e00b      	b.n	8003176 <DMA_CheckFifoParam+0xe6>
      break;
 800315e:	bf00      	nop
 8003160:	e00a      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 8003162:	bf00      	nop
 8003164:	e008      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 8003166:	bf00      	nop
 8003168:	e006      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 800316a:	bf00      	nop
 800316c:	e004      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;   
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 8003176:	bf00      	nop
    }
  } 
  
  return status; 
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop

08003188 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e03b      	b.n	8003212 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff f8c6 	bl	8002340 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	f023 0107 	bic.w	r1, r3, #7
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68d1      	ldr	r1, [r2, #12]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	430b      	orrs	r3, r1
 8003200:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af02      	add	r7, sp, #8
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_DMA2D_Start+0x1c>
 8003232:	2302      	movs	r3, #2
 8003234:	e018      	b.n	8003268 <HAL_DMA2D_Start+0x4e>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fa99 	bl	8003788 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d056      	beq.n	800333a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800328c:	f7ff fc90 	bl	8002bb0 <HAL_GetTick>
 8003290:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003292:	e04b      	b.n	800332c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d023      	beq.n	80032ee <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	f043 0202 	orr.w	r2, r3, #2
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2221      	movs	r2, #33	; 0x21
 80032d8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2204      	movs	r2, #4
 80032de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0a5      	b.n	800343a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f4:	d01a      	beq.n	800332c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7ff fc5b 	bl	8002bb0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <HAL_DMA2D_PollForTransfer+0x9c>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10f      	bne.n	800332c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2203      	movs	r2, #3
 800331c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e086      	b.n	800343a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0ac      	beq.n	8003294 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d061      	beq.n	8003420 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800335c:	f7ff fc28 	bl	8002bb0 <HAL_GetTick>
 8003360:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003362:	e056      	b.n	8003412 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003372:	2b00      	cmp	r3, #0
 8003374:	d02e      	beq.n	80033d4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	f043 0204 	orr.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	f043 0202 	orr.w	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2229      	movs	r2, #41	; 0x29
 80033be:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2204      	movs	r2, #4
 80033c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e032      	b.n	800343a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033da:	d01a      	beq.n	8003412 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033dc:	f7ff fbe8 	bl	8002bb0 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <HAL_DMA2D_PollForTransfer+0x182>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	f043 0220 	orr.w	r2, r3, #32
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2203      	movs	r2, #3
 8003402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e013      	b.n	800343a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0a1      	beq.n	8003364 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2212      	movs	r2, #18
 8003426:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d026      	beq.n	80034b2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d021      	beq.n	80034b2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800347c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	f043 0201 	orr.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2201      	movs	r2, #1
 8003490:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2204      	movs	r2, #4
 8003496:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d026      	beq.n	800350a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d021      	beq.n	800350a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2220      	movs	r2, #32
 80034dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	f043 0202 	orr.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2204      	movs	r2, #4
 80034ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d026      	beq.n	8003562 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351a:	2b00      	cmp	r3, #0
 800351c:	d021      	beq.n	8003562 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2208      	movs	r2, #8
 8003534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2204      	movs	r2, #4
 8003546:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003584:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2204      	movs	r2, #4
 800358c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f853 	bl	800363a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d024      	beq.n	80035e8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01f      	beq.n	80035e8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2202      	movs	r2, #2
 80035be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01f      	beq.n	8003632 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01a      	beq.n	8003632 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800360a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2210      	movs	r2, #16
 8003612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f80e 	bl	800364e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_DMA2D_ConfigLayer+0x20>
 8003680:	2302      	movs	r3, #2
 8003682:	e079      	b.n	8003778 <HAL_DMA2D_ConfigLayer+0x114>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	3318      	adds	r3, #24
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80036ae:	4b35      	ldr	r3, [pc, #212]	; (8003784 <HAL_DMA2D_ConfigLayer+0x120>)
 80036b0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b0a      	cmp	r3, #10
 80036b8:	d003      	beq.n	80036c2 <HAL_DMA2D_ConfigLayer+0x5e>
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b09      	cmp	r3, #9
 80036c0:	d107      	bne.n	80036d2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e005      	b.n	80036de <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	061b      	lsls	r3, r3, #24
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d120      	bne.n	8003726 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	ea02 0103 	and.w	r1, r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b0a      	cmp	r3, #10
 800370c:	d003      	beq.n	8003716 <HAL_DMA2D_ConfigLayer+0xb2>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b09      	cmp	r3, #9
 8003714:	d127      	bne.n	8003766 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
 8003724:	e01f      	b.n	8003766 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	ea02 0103 	and.w	r1, r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	430a      	orrs	r2, r1
 800373c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b0a      	cmp	r3, #10
 800374e:	d003      	beq.n	8003758 <HAL_DMA2D_ConfigLayer+0xf4>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b09      	cmp	r3, #9
 8003756:	d106      	bne.n	8003766 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003764:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	ff03000f 	.word	0xff03000f

08003788 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003788:	b480      	push	{r7}
 800378a:	b08b      	sub	sp, #44	; 0x2c
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	041a      	lsls	r2, r3, #16
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037c0:	d174      	bne.n	80038ac <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80037c8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037d0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80037d8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d108      	bne.n	80037fa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
 80037f8:	e053      	b.n	80038a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d106      	bne.n	8003810 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4313      	orrs	r3, r2
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
 800380e:	e048      	b.n	80038a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d111      	bne.n	800383c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	0cdb      	lsrs	r3, r3, #19
 800381c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	0a9b      	lsrs	r3, r3, #10
 8003822:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	08db      	lsrs	r3, r3, #3
 8003828:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	02db      	lsls	r3, r3, #11
 8003832:	4313      	orrs	r3, r2
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
 800383a:	e032      	b.n	80038a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d117      	bne.n	8003874 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	0fdb      	lsrs	r3, r3, #31
 8003848:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	0cdb      	lsrs	r3, r3, #19
 800384e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	0adb      	lsrs	r3, r3, #11
 8003854:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	08db      	lsrs	r3, r3, #3
 800385a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	029b      	lsls	r3, r3, #10
 8003864:	431a      	orrs	r2, r3
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	03db      	lsls	r3, r3, #15
 800386a:	4313      	orrs	r3, r2
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
 8003872:	e016      	b.n	80038a2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	0f1b      	lsrs	r3, r3, #28
 8003878:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	0d1b      	lsrs	r3, r3, #20
 800387e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	0b1b      	lsrs	r3, r3, #12
 8003884:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	011a      	lsls	r2, r3, #4
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	431a      	orrs	r2, r3
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	031b      	lsls	r3, r3, #12
 800389a:	4313      	orrs	r3, r2
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80038aa:	e003      	b.n	80038b4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	60da      	str	r2, [r3, #12]
}
 80038b4:	bf00      	nop
 80038b6:	372c      	adds	r7, #44	; 0x2c
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	e177      	b.n	8003bcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038dc:	2201      	movs	r2, #1
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	f040 8166 	bne.w	8003bc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d005      	beq.n	8003912 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800390e:	2b02      	cmp	r3, #2
 8003910:	d130      	bne.n	8003974 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	2203      	movs	r2, #3
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003948:	2201      	movs	r2, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 0201 	and.w	r2, r3, #1
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	2b03      	cmp	r3, #3
 800397e:	d017      	beq.n	80039b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	2203      	movs	r2, #3
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d123      	bne.n	8003a04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	08da      	lsrs	r2, r3, #3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3208      	adds	r2, #8
 80039c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	220f      	movs	r2, #15
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	08da      	lsrs	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3208      	adds	r2, #8
 80039fe:	69b9      	ldr	r1, [r7, #24]
 8003a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2203      	movs	r2, #3
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0203 	and.w	r2, r3, #3
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80c0 	beq.w	8003bc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	4b66      	ldr	r3, [pc, #408]	; (8003be4 <HAL_GPIO_Init+0x324>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	4a65      	ldr	r2, [pc, #404]	; (8003be4 <HAL_GPIO_Init+0x324>)
 8003a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a54:	6453      	str	r3, [r2, #68]	; 0x44
 8003a56:	4b63      	ldr	r3, [pc, #396]	; (8003be4 <HAL_GPIO_Init+0x324>)
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a62:	4a61      	ldr	r2, [pc, #388]	; (8003be8 <HAL_GPIO_Init+0x328>)
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	089b      	lsrs	r3, r3, #2
 8003a68:	3302      	adds	r3, #2
 8003a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a58      	ldr	r2, [pc, #352]	; (8003bec <HAL_GPIO_Init+0x32c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d037      	beq.n	8003afe <HAL_GPIO_Init+0x23e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a57      	ldr	r2, [pc, #348]	; (8003bf0 <HAL_GPIO_Init+0x330>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d031      	beq.n	8003afa <HAL_GPIO_Init+0x23a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a56      	ldr	r2, [pc, #344]	; (8003bf4 <HAL_GPIO_Init+0x334>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02b      	beq.n	8003af6 <HAL_GPIO_Init+0x236>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a55      	ldr	r2, [pc, #340]	; (8003bf8 <HAL_GPIO_Init+0x338>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d025      	beq.n	8003af2 <HAL_GPIO_Init+0x232>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a54      	ldr	r2, [pc, #336]	; (8003bfc <HAL_GPIO_Init+0x33c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01f      	beq.n	8003aee <HAL_GPIO_Init+0x22e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a53      	ldr	r2, [pc, #332]	; (8003c00 <HAL_GPIO_Init+0x340>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d019      	beq.n	8003aea <HAL_GPIO_Init+0x22a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a52      	ldr	r2, [pc, #328]	; (8003c04 <HAL_GPIO_Init+0x344>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_GPIO_Init+0x226>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a51      	ldr	r2, [pc, #324]	; (8003c08 <HAL_GPIO_Init+0x348>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00d      	beq.n	8003ae2 <HAL_GPIO_Init+0x222>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a50      	ldr	r2, [pc, #320]	; (8003c0c <HAL_GPIO_Init+0x34c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <HAL_GPIO_Init+0x21e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a4f      	ldr	r2, [pc, #316]	; (8003c10 <HAL_GPIO_Init+0x350>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_GPIO_Init+0x21a>
 8003ad6:	2309      	movs	r3, #9
 8003ad8:	e012      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003ada:	230a      	movs	r3, #10
 8003adc:	e010      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	e00e      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003ae2:	2307      	movs	r3, #7
 8003ae4:	e00c      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003ae6:	2306      	movs	r3, #6
 8003ae8:	e00a      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003aea:	2305      	movs	r3, #5
 8003aec:	e008      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003aee:	2304      	movs	r3, #4
 8003af0:	e006      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003af2:	2303      	movs	r3, #3
 8003af4:	e004      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e002      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_GPIO_Init+0x240>
 8003afe:	2300      	movs	r3, #0
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	f002 0203 	and.w	r2, r2, #3
 8003b06:	0092      	lsls	r2, r2, #2
 8003b08:	4093      	lsls	r3, r2
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b10:	4935      	ldr	r1, [pc, #212]	; (8003be8 <HAL_GPIO_Init+0x328>)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	3302      	adds	r3, #2
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b1e:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_GPIO_Init+0x354>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b42:	4a34      	ldr	r2, [pc, #208]	; (8003c14 <HAL_GPIO_Init+0x354>)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b48:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <HAL_GPIO_Init+0x354>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b6c:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <HAL_GPIO_Init+0x354>)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b72:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_GPIO_Init+0x354>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b96:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_GPIO_Init+0x354>)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <HAL_GPIO_Init+0x354>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <HAL_GPIO_Init+0x354>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	f67f ae84 	bls.w	80038dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3724      	adds	r7, #36	; 0x24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40013800 	.word	0x40013800
 8003bec:	40020000 	.word	0x40020000
 8003bf0:	40020400 	.word	0x40020400
 8003bf4:	40020800 	.word	0x40020800
 8003bf8:	40020c00 	.word	0x40020c00
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40021400 	.word	0x40021400
 8003c04:	40021800 	.word	0x40021800
 8003c08:	40021c00 	.word	0x40021c00
 8003c0c:	40022000 	.word	0x40022000
 8003c10:	40022400 	.word	0x40022400
 8003c14:	40013c00 	.word	0x40013c00

08003c18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e0d9      	b.n	8003de8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c34:	2201      	movs	r2, #1
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	f040 80c9 	bne.w	8003de2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c50:	4a6b      	ldr	r2, [pc, #428]	; (8003e00 <HAL_GPIO_DeInit+0x1e8>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	3302      	adds	r3, #2
 8003c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	220f      	movs	r2, #15
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a63      	ldr	r2, [pc, #396]	; (8003e04 <HAL_GPIO_DeInit+0x1ec>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d037      	beq.n	8003cea <HAL_GPIO_DeInit+0xd2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a62      	ldr	r2, [pc, #392]	; (8003e08 <HAL_GPIO_DeInit+0x1f0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d031      	beq.n	8003ce6 <HAL_GPIO_DeInit+0xce>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a61      	ldr	r2, [pc, #388]	; (8003e0c <HAL_GPIO_DeInit+0x1f4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d02b      	beq.n	8003ce2 <HAL_GPIO_DeInit+0xca>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a60      	ldr	r2, [pc, #384]	; (8003e10 <HAL_GPIO_DeInit+0x1f8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d025      	beq.n	8003cde <HAL_GPIO_DeInit+0xc6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a5f      	ldr	r2, [pc, #380]	; (8003e14 <HAL_GPIO_DeInit+0x1fc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01f      	beq.n	8003cda <HAL_GPIO_DeInit+0xc2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a5e      	ldr	r2, [pc, #376]	; (8003e18 <HAL_GPIO_DeInit+0x200>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d019      	beq.n	8003cd6 <HAL_GPIO_DeInit+0xbe>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a5d      	ldr	r2, [pc, #372]	; (8003e1c <HAL_GPIO_DeInit+0x204>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_GPIO_DeInit+0xba>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a5c      	ldr	r2, [pc, #368]	; (8003e20 <HAL_GPIO_DeInit+0x208>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00d      	beq.n	8003cce <HAL_GPIO_DeInit+0xb6>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a5b      	ldr	r2, [pc, #364]	; (8003e24 <HAL_GPIO_DeInit+0x20c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d007      	beq.n	8003cca <HAL_GPIO_DeInit+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a5a      	ldr	r2, [pc, #360]	; (8003e28 <HAL_GPIO_DeInit+0x210>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_GPIO_DeInit+0xae>
 8003cc2:	2309      	movs	r3, #9
 8003cc4:	e012      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	e010      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003cca:	2308      	movs	r3, #8
 8003ccc:	e00e      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003cce:	2307      	movs	r3, #7
 8003cd0:	e00c      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003cd2:	2306      	movs	r3, #6
 8003cd4:	e00a      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003cd6:	2305      	movs	r3, #5
 8003cd8:	e008      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e004      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_GPIO_DeInit+0xd4>
 8003cea:	2300      	movs	r3, #0
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	f002 0203 	and.w	r2, r2, #3
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	4093      	lsls	r3, r2
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d132      	bne.n	8003d62 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	; (8003e2c <HAL_GPIO_DeInit+0x214>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	4949      	ldr	r1, [pc, #292]	; (8003e2c <HAL_GPIO_DeInit+0x214>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d0a:	4b48      	ldr	r3, [pc, #288]	; (8003e2c <HAL_GPIO_DeInit+0x214>)
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	4946      	ldr	r1, [pc, #280]	; (8003e2c <HAL_GPIO_DeInit+0x214>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d18:	4b44      	ldr	r3, [pc, #272]	; (8003e2c <HAL_GPIO_DeInit+0x214>)
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	4942      	ldr	r1, [pc, #264]	; (8003e2c <HAL_GPIO_DeInit+0x214>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d26:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_GPIO_DeInit+0x214>)
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	493f      	ldr	r1, [pc, #252]	; (8003e2c <HAL_GPIO_DeInit+0x214>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	220f      	movs	r2, #15
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003d44:	4a2e      	ldr	r2, [pc, #184]	; (8003e00 <HAL_GPIO_DeInit+0x1e8>)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	089b      	lsrs	r3, r3, #2
 8003d4a:	3302      	adds	r3, #2
 8003d4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	43da      	mvns	r2, r3
 8003d54:	482a      	ldr	r0, [pc, #168]	; (8003e00 <HAL_GPIO_DeInit+0x1e8>)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2103      	movs	r1, #3
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	401a      	ands	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	08da      	lsrs	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3208      	adds	r2, #8
 8003d80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	220f      	movs	r2, #15
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	08d2      	lsrs	r2, r2, #3
 8003d98:	4019      	ands	r1, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3208      	adds	r2, #8
 8003d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2103      	movs	r1, #3
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	401a      	ands	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	3301      	adds	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	f67f af22 	bls.w	8003c34 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40013800 	.word	0x40013800
 8003e04:	40020000 	.word	0x40020000
 8003e08:	40020400 	.word	0x40020400
 8003e0c:	40020800 	.word	0x40020800
 8003e10:	40020c00 	.word	0x40020c00
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40021400 	.word	0x40021400
 8003e1c:	40021800 	.word	0x40021800
 8003e20:	40021c00 	.word	0x40021c00
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40022400 	.word	0x40022400
 8003e2c:	40013c00 	.word	0x40013c00

08003e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e40:	787b      	ldrb	r3, [r7, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e4c:	e003      	b.n	8003e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	041a      	lsls	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	619a      	str	r2, [r3, #24]
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f004 fd42 	bl	8008902 <USB_GetMode>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	f040 80f6 	bne.w	8004072 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f004 fd26 	bl	80088dc <USB_ReadInterrupts>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80ec 	beq.w	8004070 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f004 fd1d 	bl	80088dc <USB_ReadInterrupts>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eac:	d104      	bne.n	8003eb8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003eb6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f004 fd0d 	bl	80088dc <USB_ReadInterrupts>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ecc:	d104      	bne.n	8003ed8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ed6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f004 fcfd 	bl	80088dc <USB_ReadInterrupts>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eec:	d104      	bne.n	8003ef8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ef6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 fced 	bl	80088dc <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d103      	bne.n	8003f14 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2202      	movs	r2, #2
 8003f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f004 fcdf 	bl	80088dc <USB_ReadInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f28:	d11c      	bne.n	8003f64 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003f32:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003f44:	2110      	movs	r1, #16
 8003f46:	6938      	ldr	r0, [r7, #16]
 8003f48:	f004 fc2c 	bl	80087a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003f4c:	6938      	ldr	r0, [r7, #16]
 8003f4e:	f004 fc4d 	bl	80087ec <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f004 fce0 	bl	800891e <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f006 f828 	bl	8009fb4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 fcb7 	bl	80088dc <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f78:	d102      	bne.n	8003f80 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 f98e 	bl	800529c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f004 fca9 	bl	80088dc <USB_ReadInterrupts>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d106      	bne.n	8003fa2 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f005 fff1 	bl	8009f7c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fc98 	bl	80088dc <USB_ReadInterrupts>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d101      	bne.n	8003fba <HAL_HCD_IRQHandler+0x158>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_HCD_IRQHandler+0x15a>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d012      	beq.n	8003fe6 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0210 	bic.w	r2, r2, #16
 8003fce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f001 f891 	bl	80050f8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0210 	orr.w	r2, r2, #16
 8003fe4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 fc76 	bl	80088dc <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ffa:	d13a      	bne.n	8004072 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f004 fcc6 	bl	8008992 <USB_HC_ReadInterrupt>
 8004006:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e025      	b.n	800405a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d018      	beq.n	8004054 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004038:	d106      	bne.n	8004048 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f836 	bl	80040b2 <HCD_HC_IN_IRQHandler>
 8004046:	e005      	b.n	8004054 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fc51 	bl	80048f6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	3301      	adds	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	429a      	cmp	r2, r3
 8004062:	d3d4      	bcc.n	800400e <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800406c:	615a      	str	r2, [r3, #20]
 800406e:	e000      	b.n	8004072 <HAL_HCD_IRQHandler+0x210>
      return;
 8004070:	bf00      	nop
    }
  }
}
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_HCD_Stop+0x16>
 800408a:	2302      	movs	r3, #2
 800408c:	e00d      	b.n	80040aa <HAL_HCD_Stop+0x32>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f004 fda6 	bl	8008bec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d119      	bne.n	8004116 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ee:	461a      	mov	r2, r3
 80040f0:	2304      	movs	r3, #4
 80040f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	440a      	add	r2, r1
 800410a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800410e:	f043 0302 	orr.w	r3, r3, #2
 8004112:	60d3      	str	r3, [r2, #12]
 8004114:	e101      	b.n	800431a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4413      	add	r3, r2
 800411e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412c:	d12b      	bne.n	8004186 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4413      	add	r3, r2
 8004136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413a:	461a      	mov	r2, r3
 800413c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004140:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3361      	adds	r3, #97	; 0x61
 8004150:	2207      	movs	r2, #7
 8004152:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	440a      	add	r2, r1
 800416a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800416e:	f043 0302 	orr.w	r3, r3, #2
 8004172:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f004 fc18 	bl	80089b4 <USB_HC_Halt>
 8004184:	e0c9      	b.n	800431a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b20      	cmp	r3, #32
 800419a:	d109      	bne.n	80041b0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a8:	461a      	mov	r2, r3
 80041aa:	2320      	movs	r3, #32
 80041ac:	6093      	str	r3, [r2, #8]
 80041ae:	e0b4      	b.n	800431a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d133      	bne.n	800422e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041e0:	f043 0302 	orr.w	r3, r3, #2
 80041e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3361      	adds	r3, #97	; 0x61
 80041f4:	2205      	movs	r2, #5
 80041f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004204:	461a      	mov	r2, r3
 8004206:	2310      	movs	r3, #16
 8004208:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4413      	add	r3, r2
 8004212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004216:	461a      	mov	r2, r3
 8004218:	2308      	movs	r3, #8
 800421a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f004 fbc4 	bl	80089b4 <USB_HC_Halt>
 800422c:	e075      	b.n	800431a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004244:	d134      	bne.n	80042b0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4413      	add	r3, r2
 800424e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	440a      	add	r2, r1
 800425c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	212c      	movs	r1, #44	; 0x2c
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	4413      	add	r3, r2
 8004272:	3361      	adds	r3, #97	; 0x61
 8004274:	2208      	movs	r2, #8
 8004276:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4413      	add	r3, r2
 8004280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004284:	461a      	mov	r2, r3
 8004286:	2310      	movs	r3, #16
 8004288:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4413      	add	r3, r2
 8004292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004296:	461a      	mov	r2, r3
 8004298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f004 fb83 	bl	80089b4 <USB_HC_Halt>
 80042ae:	e034      	b.n	800431a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	2b80      	cmp	r3, #128	; 0x80
 80042c4:	d129      	bne.n	800431a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	0151      	lsls	r1, r2, #5
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	440a      	add	r2, r1
 80042dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	212c      	movs	r1, #44	; 0x2c
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	3361      	adds	r3, #97	; 0x61
 80042f4:	2206      	movs	r2, #6
 80042f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f004 fb56 	bl	80089b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	461a      	mov	r2, r3
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004330:	d122      	bne.n	8004378 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	440a      	add	r2, r1
 8004348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800434c:	f043 0302 	orr.w	r3, r3, #2
 8004350:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f004 fb29 	bl	80089b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436e:	461a      	mov	r2, r3
 8004370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004374:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004376:	e2ba      	b.n	80048ee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	f040 811b 	bne.w	80045c6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d019      	beq.n	80043cc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	212c      	movs	r1, #44	; 0x2c
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	3348      	adds	r3, #72	; 0x48
 80043a6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	0159      	lsls	r1, r3, #5
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	440b      	add	r3, r1
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80043ba:	1ad2      	subs	r2, r2, r3
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	202c      	movs	r0, #44	; 0x2c
 80043c2:	fb00 f303 	mul.w	r3, r0, r3
 80043c6:	440b      	add	r3, r1
 80043c8:	3350      	adds	r3, #80	; 0x50
 80043ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3361      	adds	r3, #97	; 0x61
 80043da:	2201      	movs	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	335c      	adds	r3, #92	; 0x5c
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	461a      	mov	r2, r3
 80043fe:	2301      	movs	r3, #1
 8004400:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	212c      	movs	r1, #44	; 0x2c
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	333f      	adds	r3, #63	; 0x3f
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	212c      	movs	r1, #44	; 0x2c
 800441c:	fb01 f303 	mul.w	r3, r1, r3
 8004420:	4413      	add	r3, r2
 8004422:	333f      	adds	r3, #63	; 0x3f
 8004424:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004426:	2b02      	cmp	r3, #2
 8004428:	d121      	bne.n	800446e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4413      	add	r3, r2
 8004432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	440a      	add	r2, r1
 8004440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004444:	f043 0302 	orr.w	r3, r3, #2
 8004448:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f004 faad 	bl	80089b4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004466:	461a      	mov	r2, r3
 8004468:	2310      	movs	r3, #16
 800446a:	6093      	str	r3, [r2, #8]
 800446c:	e066      	b.n	800453c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	212c      	movs	r1, #44	; 0x2c
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	333f      	adds	r3, #63	; 0x3f
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d127      	bne.n	80044d2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	0151      	lsls	r1, r2, #5
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	440a      	add	r2, r1
 8004498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800449c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044a0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	3360      	adds	r3, #96	; 0x60
 80044b0:	2201      	movs	r2, #1
 80044b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	b2d9      	uxtb	r1, r3
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	202c      	movs	r0, #44	; 0x2c
 80044be:	fb00 f303 	mul.w	r3, r0, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	3360      	adds	r3, #96	; 0x60
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f005 fd80 	bl	8009fd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044d0:	e034      	b.n	800453c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	333f      	adds	r3, #63	; 0x3f
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d12a      	bne.n	800453c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	3360      	adds	r3, #96	; 0x60
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	212c      	movs	r1, #44	; 0x2c
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	3354      	adds	r3, #84	; 0x54
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f083 0301 	eor.w	r3, r3, #1
 800450c:	b2d8      	uxtb	r0, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	212c      	movs	r1, #44	; 0x2c
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	3354      	adds	r3, #84	; 0x54
 800451c:	4602      	mov	r2, r0
 800451e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	b2d9      	uxtb	r1, r3
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	202c      	movs	r0, #44	; 0x2c
 800452a:	fb00 f303 	mul.w	r3, r0, r3
 800452e:	4413      	add	r3, r2
 8004530:	3360      	adds	r3, #96	; 0x60
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f005 fd4a 	bl	8009fd0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d12b      	bne.n	800459c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	212c      	movs	r1, #44	; 0x2c
 800454a:	fb01 f303 	mul.w	r3, r1, r3
 800454e:	4413      	add	r3, r2
 8004550:	3348      	adds	r3, #72	; 0x48
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	202c      	movs	r0, #44	; 0x2c
 800455a:	fb00 f202 	mul.w	r2, r0, r2
 800455e:	440a      	add	r2, r1
 8004560:	3240      	adds	r2, #64	; 0x40
 8004562:	8812      	ldrh	r2, [r2, #0]
 8004564:	fbb3 f3f2 	udiv	r3, r3, r2
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 81be 	beq.w	80048ee <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	3354      	adds	r3, #84	; 0x54
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	f083 0301 	eor.w	r3, r3, #1
 8004586:	b2d8      	uxtb	r0, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	3354      	adds	r3, #84	; 0x54
 8004596:	4602      	mov	r2, r0
 8004598:	701a      	strb	r2, [r3, #0]
}
 800459a:	e1a8      	b.n	80048ee <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3354      	adds	r3, #84	; 0x54
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f083 0301 	eor.w	r3, r3, #1
 80045b0:	b2d8      	uxtb	r0, r3
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	212c      	movs	r1, #44	; 0x2c
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	3354      	adds	r3, #84	; 0x54
 80045c0:	4602      	mov	r2, r0
 80045c2:	701a      	strb	r2, [r3, #0]
}
 80045c4:	e193      	b.n	80048ee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b02      	cmp	r3, #2
 80045da:	f040 8106 	bne.w	80047ea <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	0151      	lsls	r1, r2, #5
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	440a      	add	r2, r1
 80045f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045f8:	f023 0302 	bic.w	r3, r3, #2
 80045fc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	3361      	adds	r3, #97	; 0x61
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d109      	bne.n	8004626 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3360      	adds	r3, #96	; 0x60
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	e0c9      	b.n	80047ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	212c      	movs	r1, #44	; 0x2c
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	4413      	add	r3, r2
 8004632:	3361      	adds	r3, #97	; 0x61
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b05      	cmp	r3, #5
 8004638:	d109      	bne.n	800464e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	212c      	movs	r1, #44	; 0x2c
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	3360      	adds	r3, #96	; 0x60
 8004648:	2205      	movs	r2, #5
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e0b5      	b.n	80047ba <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	3361      	adds	r3, #97	; 0x61
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b06      	cmp	r3, #6
 8004660:	d009      	beq.n	8004676 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	212c      	movs	r1, #44	; 0x2c
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	3361      	adds	r3, #97	; 0x61
 8004670:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004672:	2b08      	cmp	r3, #8
 8004674:	d150      	bne.n	8004718 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	335c      	adds	r3, #92	; 0x5c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	202c      	movs	r0, #44	; 0x2c
 800468e:	fb00 f303 	mul.w	r3, r0, r3
 8004692:	440b      	add	r3, r1
 8004694:	335c      	adds	r3, #92	; 0x5c
 8004696:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	212c      	movs	r1, #44	; 0x2c
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	335c      	adds	r3, #92	; 0x5c
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d912      	bls.n	80046d2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	212c      	movs	r1, #44	; 0x2c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	335c      	adds	r3, #92	; 0x5c
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	212c      	movs	r1, #44	; 0x2c
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	4413      	add	r3, r2
 80046ca:	3360      	adds	r3, #96	; 0x60
 80046cc:	2204      	movs	r2, #4
 80046ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046d0:	e073      	b.n	80047ba <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	212c      	movs	r1, #44	; 0x2c
 80046d8:	fb01 f303 	mul.w	r3, r1, r3
 80046dc:	4413      	add	r3, r2
 80046de:	3360      	adds	r3, #96	; 0x60
 80046e0:	2202      	movs	r2, #2
 80046e2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046fa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004702:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4413      	add	r3, r2
 800470c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004710:	461a      	mov	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004716:	e050      	b.n	80047ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	212c      	movs	r1, #44	; 0x2c
 800471e:	fb01 f303 	mul.w	r3, r1, r3
 8004722:	4413      	add	r3, r2
 8004724:	3361      	adds	r3, #97	; 0x61
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d122      	bne.n	8004772 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3360      	adds	r3, #96	; 0x60
 800473a:	2202      	movs	r2, #2
 800473c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004754:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800475c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	461a      	mov	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	e023      	b.n	80047ba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	212c      	movs	r1, #44	; 0x2c
 8004778:	fb01 f303 	mul.w	r3, r1, r3
 800477c:	4413      	add	r3, r2
 800477e:	3361      	adds	r3, #97	; 0x61
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b07      	cmp	r3, #7
 8004784:	d119      	bne.n	80047ba <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	335c      	adds	r3, #92	; 0x5c
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	202c      	movs	r0, #44	; 0x2c
 800479e:	fb00 f303 	mul.w	r3, r0, r3
 80047a2:	440b      	add	r3, r1
 80047a4:	335c      	adds	r3, #92	; 0x5c
 80047a6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	212c      	movs	r1, #44	; 0x2c
 80047ae:	fb01 f303 	mul.w	r3, r1, r3
 80047b2:	4413      	add	r3, r2
 80047b4:	3360      	adds	r3, #96	; 0x60
 80047b6:	2204      	movs	r2, #4
 80047b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c6:	461a      	mov	r2, r3
 80047c8:	2302      	movs	r3, #2
 80047ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	b2d9      	uxtb	r1, r3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	202c      	movs	r0, #44	; 0x2c
 80047d6:	fb00 f303 	mul.w	r3, r0, r3
 80047da:	4413      	add	r3, r2
 80047dc:	3360      	adds	r3, #96	; 0x60
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f005 fbf4 	bl	8009fd0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047e8:	e081      	b.n	80048ee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d176      	bne.n	80048ee <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	333f      	adds	r3, #63	; 0x3f
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d121      	bne.n	8004858 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	335c      	adds	r3, #92	; 0x5c
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4413      	add	r3, r2
 800482e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	440a      	add	r2, r1
 800483c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004840:	f043 0302 	orr.w	r3, r3, #2
 8004844:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f004 f8af 	bl	80089b4 <USB_HC_Halt>
 8004856:	e041      	b.n	80048dc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	212c      	movs	r1, #44	; 0x2c
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	4413      	add	r3, r2
 8004864:	333f      	adds	r3, #63	; 0x3f
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d009      	beq.n	8004880 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	212c      	movs	r1, #44	; 0x2c
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	333f      	adds	r3, #63	; 0x3f
 800487a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800487c:	2b02      	cmp	r3, #2
 800487e:	d12d      	bne.n	80048dc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	212c      	movs	r1, #44	; 0x2c
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	4413      	add	r3, r2
 800488c:	335c      	adds	r3, #92	; 0x5c
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d120      	bne.n	80048dc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	3361      	adds	r3, #97	; 0x61
 80048a8:	2203      	movs	r2, #3
 80048aa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	0151      	lsls	r1, r2, #5
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	440a      	add	r2, r1
 80048c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c6:	f043 0302 	orr.w	r3, r3, #2
 80048ca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f004 f86c 	bl	80089b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	461a      	mov	r2, r3
 80048ea:	2310      	movs	r3, #16
 80048ec:	6093      	str	r3, [r2, #8]
}
 80048ee:	bf00      	nop
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b088      	sub	sp, #32
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	4413      	add	r3, r2
 8004918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b04      	cmp	r3, #4
 8004924:	d119      	bne.n	800495a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004932:	461a      	mov	r2, r3
 8004934:	2304      	movs	r3, #4
 8004936:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	0151      	lsls	r1, r2, #5
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	440a      	add	r2, r1
 800494e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004952:	f043 0302 	orr.w	r3, r3, #2
 8004956:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004958:	e3ca      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	4413      	add	r3, r2
 8004962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b20      	cmp	r3, #32
 800496e:	d13e      	bne.n	80049ee <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497c:	461a      	mov	r2, r3
 800497e:	2320      	movs	r3, #32
 8004980:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	212c      	movs	r1, #44	; 0x2c
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	333d      	adds	r3, #61	; 0x3d
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	f040 83ac 	bne.w	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	212c      	movs	r1, #44	; 0x2c
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	333d      	adds	r3, #61	; 0x3d
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3360      	adds	r3, #96	; 0x60
 80049b8:	2202      	movs	r2, #2
 80049ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049d6:	f043 0302 	orr.w	r3, r3, #2
 80049da:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f003 ffe4 	bl	80089b4 <USB_HC_Halt>
}
 80049ec:	e380      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a04:	d122      	bne.n	8004a4c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a20:	f043 0302 	orr.w	r3, r3, #2
 8004a24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f003 ffbf 	bl	80089b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a42:	461a      	mov	r2, r3
 8004a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a48:	6093      	str	r3, [r2, #8]
}
 8004a4a:	e351      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d150      	bne.n	8004b04 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	335c      	adds	r3, #92	; 0x5c
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d111      	bne.n	8004aae <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	212c      	movs	r1, #44	; 0x2c
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	333d      	adds	r3, #61	; 0x3d
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f003 ff6b 	bl	80089b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aea:	461a      	mov	r2, r3
 8004aec:	2301      	movs	r3, #1
 8004aee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	212c      	movs	r1, #44	; 0x2c
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	4413      	add	r3, r2
 8004afc:	3361      	adds	r3, #97	; 0x61
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
}
 8004b02:	e2f5      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d13c      	bne.n	8004b94 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	3361      	adds	r3, #97	; 0x61
 8004b28:	2204      	movs	r2, #4
 8004b2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	212c      	movs	r1, #44	; 0x2c
 8004b32:	fb01 f303 	mul.w	r3, r1, r3
 8004b36:	4413      	add	r3, r2
 8004b38:	333d      	adds	r3, #61	; 0x3d
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	335c      	adds	r3, #92	; 0x5c
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	0151      	lsls	r1, r2, #5
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	440a      	add	r2, r1
 8004b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b6a:	f043 0302 	orr.w	r3, r3, #2
 8004b6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f003 ff1a 	bl	80089b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2340      	movs	r3, #64	; 0x40
 8004b90:	6093      	str	r3, [r2, #8]
}
 8004b92:	e2ad      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d12a      	bne.n	8004c00 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2308      	movs	r3, #8
 8004bba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bd6:	f043 0302 	orr.w	r3, r3, #2
 8004bda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	4611      	mov	r1, r2
 8004be6:	4618      	mov	r0, r3
 8004be8:	f003 fee4 	bl	80089b4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	212c      	movs	r1, #44	; 0x2c
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3361      	adds	r3, #97	; 0x61
 8004bfa:	2205      	movs	r2, #5
 8004bfc:	701a      	strb	r2, [r3, #0]
}
 8004bfe:	e277      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d150      	bne.n	8004cb8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	212c      	movs	r1, #44	; 0x2c
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	335c      	adds	r3, #92	; 0x5c
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	212c      	movs	r1, #44	; 0x2c
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	3361      	adds	r3, #97	; 0x61
 8004c36:	2203      	movs	r2, #3
 8004c38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	212c      	movs	r1, #44	; 0x2c
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	333d      	adds	r3, #61	; 0x3d
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d112      	bne.n	8004c74 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	212c      	movs	r1, #44	; 0x2c
 8004c54:	fb01 f303 	mul.w	r3, r1, r3
 8004c58:	4413      	add	r3, r2
 8004c5a:	333c      	adds	r3, #60	; 0x3c
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	212c      	movs	r1, #44	; 0x2c
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	333d      	adds	r3, #61	; 0x3d
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8e:	f043 0302 	orr.w	r3, r3, #2
 8004c92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fe88 	bl	80089b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2310      	movs	r3, #16
 8004cb4:	6093      	str	r3, [r2, #8]
}
 8004cb6:	e21b      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d174      	bne.n	8004db8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d121      	bne.n	8004d1a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	212c      	movs	r1, #44	; 0x2c
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3361      	adds	r3, #97	; 0x61
 8004ce4:	2206      	movs	r2, #6
 8004ce6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d02:	f043 0302 	orr.w	r3, r3, #2
 8004d06:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f003 fe4e 	bl	80089b4 <USB_HC_Halt>
 8004d18:	e044      	b.n	8004da4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	335c      	adds	r3, #92	; 0x5c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	202c      	movs	r0, #44	; 0x2c
 8004d32:	fb00 f303 	mul.w	r3, r0, r3
 8004d36:	440b      	add	r3, r1
 8004d38:	335c      	adds	r3, #92	; 0x5c
 8004d3a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	335c      	adds	r3, #92	; 0x5c
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d920      	bls.n	8004d92 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	212c      	movs	r1, #44	; 0x2c
 8004d56:	fb01 f303 	mul.w	r3, r1, r3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	335c      	adds	r3, #92	; 0x5c
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	212c      	movs	r1, #44	; 0x2c
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	3360      	adds	r3, #96	; 0x60
 8004d70:	2204      	movs	r2, #4
 8004d72:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	b2d9      	uxtb	r1, r3
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	202c      	movs	r0, #44	; 0x2c
 8004d7e:	fb00 f303 	mul.w	r3, r0, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	3360      	adds	r3, #96	; 0x60
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f005 f920 	bl	8009fd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d90:	e008      	b.n	8004da4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	212c      	movs	r1, #44	; 0x2c
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3360      	adds	r3, #96	; 0x60
 8004da0:	2202      	movs	r2, #2
 8004da2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db0:	461a      	mov	r2, r3
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	6093      	str	r3, [r2, #8]
}
 8004db6:	e19b      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d134      	bne.n	8004e3a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dea:	f043 0302 	orr.w	r3, r3, #2
 8004dee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f003 fdda 	bl	80089b4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2310      	movs	r3, #16
 8004e10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	212c      	movs	r1, #44	; 0x2c
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	3361      	adds	r3, #97	; 0x61
 8004e34:	2208      	movs	r2, #8
 8004e36:	701a      	strb	r2, [r3, #0]
}
 8004e38:	e15a      	b.n	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	f040 814f 	bne.w	80050f0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e6c:	f023 0302 	bic.w	r3, r3, #2
 8004e70:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	212c      	movs	r1, #44	; 0x2c
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3361      	adds	r3, #97	; 0x61
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d17d      	bne.n	8004f82 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	3360      	adds	r3, #96	; 0x60
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	212c      	movs	r1, #44	; 0x2c
 8004e9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	333f      	adds	r3, #63	; 0x3f
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d00a      	beq.n	8004ec2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	212c      	movs	r1, #44	; 0x2c
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	333f      	adds	r3, #63	; 0x3f
 8004eba:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	f040 8100 	bne.w	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d113      	bne.n	8004ef2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	212c      	movs	r1, #44	; 0x2c
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3355      	adds	r3, #85	; 0x55
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f083 0301 	eor.w	r3, r3, #1
 8004ede:	b2d8      	uxtb	r0, r3
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	212c      	movs	r1, #44	; 0x2c
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	3355      	adds	r3, #85	; 0x55
 8004eee:	4602      	mov	r2, r0
 8004ef0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	f040 80e3 	bne.w	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	334c      	adds	r3, #76	; 0x4c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80d8 	beq.w	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	212c      	movs	r1, #44	; 0x2c
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	334c      	adds	r3, #76	; 0x4c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	202c      	movs	r0, #44	; 0x2c
 8004f28:	fb00 f202 	mul.w	r2, r0, r2
 8004f2c:	440a      	add	r2, r1
 8004f2e:	3240      	adds	r2, #64	; 0x40
 8004f30:	8812      	ldrh	r2, [r2, #0]
 8004f32:	4413      	add	r3, r2
 8004f34:	3b01      	subs	r3, #1
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	202c      	movs	r0, #44	; 0x2c
 8004f3c:	fb00 f202 	mul.w	r2, r0, r2
 8004f40:	440a      	add	r2, r1
 8004f42:	3240      	adds	r2, #64	; 0x40
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80b5 	beq.w	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	212c      	movs	r1, #44	; 0x2c
 8004f5e:	fb01 f303 	mul.w	r3, r1, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	3355      	adds	r3, #85	; 0x55
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f083 0301 	eor.w	r3, r3, #1
 8004f6c:	b2d8      	uxtb	r0, r3
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	3355      	adds	r3, #85	; 0x55
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	e09f      	b.n	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	212c      	movs	r1, #44	; 0x2c
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3361      	adds	r3, #97	; 0x61
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d109      	bne.n	8004faa <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	212c      	movs	r1, #44	; 0x2c
 8004f9c:	fb01 f303 	mul.w	r3, r1, r3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3360      	adds	r3, #96	; 0x60
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e08b      	b.n	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	212c      	movs	r1, #44	; 0x2c
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3361      	adds	r3, #97	; 0x61
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d109      	bne.n	8004fd2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	212c      	movs	r1, #44	; 0x2c
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	3360      	adds	r3, #96	; 0x60
 8004fcc:	2202      	movs	r2, #2
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e077      	b.n	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	212c      	movs	r1, #44	; 0x2c
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	4413      	add	r3, r2
 8004fde:	3361      	adds	r3, #97	; 0x61
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d109      	bne.n	8004ffa <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	212c      	movs	r1, #44	; 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3360      	adds	r3, #96	; 0x60
 8004ff4:	2205      	movs	r2, #5
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e063      	b.n	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	212c      	movs	r1, #44	; 0x2c
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	4413      	add	r3, r2
 8005006:	3361      	adds	r3, #97	; 0x61
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d009      	beq.n	8005022 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	212c      	movs	r1, #44	; 0x2c
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	4413      	add	r3, r2
 800501a:	3361      	adds	r3, #97	; 0x61
 800501c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800501e:	2b08      	cmp	r3, #8
 8005020:	d14f      	bne.n	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	212c      	movs	r1, #44	; 0x2c
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	4413      	add	r3, r2
 800502e:	335c      	adds	r3, #92	; 0x5c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	202c      	movs	r0, #44	; 0x2c
 800503a:	fb00 f303 	mul.w	r3, r0, r3
 800503e:	440b      	add	r3, r1
 8005040:	335c      	adds	r3, #92	; 0x5c
 8005042:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	212c      	movs	r1, #44	; 0x2c
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	4413      	add	r3, r2
 8005050:	335c      	adds	r3, #92	; 0x5c
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d912      	bls.n	800507e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	212c      	movs	r1, #44	; 0x2c
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	4413      	add	r3, r2
 8005064:	335c      	adds	r3, #92	; 0x5c
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	212c      	movs	r1, #44	; 0x2c
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	4413      	add	r3, r2
 8005076:	3360      	adds	r3, #96	; 0x60
 8005078:	2204      	movs	r2, #4
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	e021      	b.n	80050c2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	212c      	movs	r1, #44	; 0x2c
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	4413      	add	r3, r2
 800508a:	3360      	adds	r3, #96	; 0x60
 800508c:	2202      	movs	r2, #2
 800508e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050a6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ae:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050bc:	461a      	mov	r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ce:	461a      	mov	r2, r3
 80050d0:	2302      	movs	r3, #2
 80050d2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	b2d9      	uxtb	r1, r3
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	202c      	movs	r0, #44	; 0x2c
 80050de:	fb00 f303 	mul.w	r3, r0, r3
 80050e2:	4413      	add	r3, r2
 80050e4:	3360      	adds	r3, #96	; 0x60
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f004 ff70 	bl	8009fd0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050f0:	bf00      	nop
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	0c5b      	lsrs	r3, r3, #17
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800512c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d004      	beq.n	800513e <HCD_RXQLVL_IRQHandler+0x46>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b05      	cmp	r3, #5
 8005138:	f000 80a9 	beq.w	800528e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800513c:	e0aa      	b.n	8005294 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80a6 	beq.w	8005292 <HCD_RXQLVL_IRQHandler+0x19a>
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	212c      	movs	r1, #44	; 0x2c
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	4413      	add	r3, r2
 8005152:	3344      	adds	r3, #68	; 0x44
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 809b 	beq.w	8005292 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	212c      	movs	r1, #44	; 0x2c
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	4413      	add	r3, r2
 8005168:	3350      	adds	r3, #80	; 0x50
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	441a      	add	r2, r3
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	202c      	movs	r0, #44	; 0x2c
 8005176:	fb00 f303 	mul.w	r3, r0, r3
 800517a:	440b      	add	r3, r1
 800517c:	334c      	adds	r3, #76	; 0x4c
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d87a      	bhi.n	800527a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3344      	adds	r3, #68	; 0x44
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	b292      	uxth	r2, r2
 800519c:	4619      	mov	r1, r3
 800519e:	f003 fb45 	bl	800882c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	212c      	movs	r1, #44	; 0x2c
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	4413      	add	r3, r2
 80051ae:	3344      	adds	r3, #68	; 0x44
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	441a      	add	r2, r3
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	202c      	movs	r0, #44	; 0x2c
 80051bc:	fb00 f303 	mul.w	r3, r0, r3
 80051c0:	440b      	add	r3, r1
 80051c2:	3344      	adds	r3, #68	; 0x44
 80051c4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	212c      	movs	r1, #44	; 0x2c
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	3350      	adds	r3, #80	; 0x50
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	441a      	add	r2, r3
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	202c      	movs	r0, #44	; 0x2c
 80051e0:	fb00 f303 	mul.w	r3, r0, r3
 80051e4:	440b      	add	r3, r1
 80051e6:	3350      	adds	r3, #80	; 0x50
 80051e8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	0cdb      	lsrs	r3, r3, #19
 80051fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051fe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	3340      	adds	r3, #64	; 0x40
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4293      	cmp	r3, r2
 8005216:	d13c      	bne.n	8005292 <HCD_RXQLVL_IRQHandler+0x19a>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d039      	beq.n	8005292 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005234:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800523c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	4413      	add	r3, r2
 8005246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	212c      	movs	r1, #44	; 0x2c
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	4413      	add	r3, r2
 800525c:	3354      	adds	r3, #84	; 0x54
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f083 0301 	eor.w	r3, r3, #1
 8005264:	b2d8      	uxtb	r0, r3
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	212c      	movs	r1, #44	; 0x2c
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	3354      	adds	r3, #84	; 0x54
 8005274:	4602      	mov	r2, r0
 8005276:	701a      	strb	r2, [r3, #0]
      break;
 8005278:	e00b      	b.n	8005292 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	212c      	movs	r1, #44	; 0x2c
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	3360      	adds	r3, #96	; 0x60
 8005288:	2204      	movs	r2, #4
 800528a:	701a      	strb	r2, [r3, #0]
      break;
 800528c:	e001      	b.n	8005292 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005292:	bf00      	nop
  }
}
 8005294:	bf00      	nop
 8005296:	3728      	adds	r7, #40	; 0x28
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d10b      	bne.n	80052ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d102      	bne.n	80052e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f004 fe5a 	bl	8009f98 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f043 0302 	orr.w	r3, r3, #2
 80052ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d132      	bne.n	800535c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f043 0308 	orr.w	r3, r3, #8
 80052fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d126      	bne.n	8005356 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d113      	bne.n	8005338 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005316:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800531a:	d106      	bne.n	800532a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2102      	movs	r1, #2
 8005322:	4618      	mov	r0, r3
 8005324:	f003 fafb 	bl	800891e <USB_InitFSLSPClkSel>
 8005328:	e011      	b.n	800534e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2101      	movs	r1, #1
 8005330:	4618      	mov	r0, r3
 8005332:	f003 faf4 	bl	800891e <USB_InitFSLSPClkSel>
 8005336:	e00a      	b.n	800534e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d106      	bne.n	800534e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005346:	461a      	mov	r2, r3
 8005348:	f64e 2360 	movw	r3, #60000	; 0xea60
 800534c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f004 fe50 	bl	8009ff4 <HAL_HCD_PortEnabled_Callback>
 8005354:	e002      	b.n	800535c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f004 fe5a 	bl	800a010 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b20      	cmp	r3, #32
 8005364:	d103      	bne.n	800536e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f043 0320 	orr.w	r3, r3, #32
 800536c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005374:	461a      	mov	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	6013      	str	r3, [r2, #0]
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e12b      	b.n	80055ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fc fff0 	bl	8002390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2224      	movs	r2, #36	; 0x24
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053e8:	f001 f96a 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 80053ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4a81      	ldr	r2, [pc, #516]	; (80055f8 <HAL_I2C_Init+0x274>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d807      	bhi.n	8005408 <HAL_I2C_Init+0x84>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4a80      	ldr	r2, [pc, #512]	; (80055fc <HAL_I2C_Init+0x278>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	bf94      	ite	ls
 8005400:	2301      	movls	r3, #1
 8005402:	2300      	movhi	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e006      	b.n	8005416 <HAL_I2C_Init+0x92>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4a7d      	ldr	r2, [pc, #500]	; (8005600 <HAL_I2C_Init+0x27c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	bf94      	ite	ls
 8005410:	2301      	movls	r3, #1
 8005412:	2300      	movhi	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e0e7      	b.n	80055ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a78      	ldr	r2, [pc, #480]	; (8005604 <HAL_I2C_Init+0x280>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	0c9b      	lsrs	r3, r3, #18
 8005428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4a6a      	ldr	r2, [pc, #424]	; (80055f8 <HAL_I2C_Init+0x274>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d802      	bhi.n	8005458 <HAL_I2C_Init+0xd4>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	3301      	adds	r3, #1
 8005456:	e009      	b.n	800546c <HAL_I2C_Init+0xe8>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800545e:	fb02 f303 	mul.w	r3, r2, r3
 8005462:	4a69      	ldr	r2, [pc, #420]	; (8005608 <HAL_I2C_Init+0x284>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	099b      	lsrs	r3, r3, #6
 800546a:	3301      	adds	r3, #1
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	430b      	orrs	r3, r1
 8005472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800547e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	495c      	ldr	r1, [pc, #368]	; (80055f8 <HAL_I2C_Init+0x274>)
 8005488:	428b      	cmp	r3, r1
 800548a:	d819      	bhi.n	80054c0 <HAL_I2C_Init+0x13c>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1e59      	subs	r1, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	fbb1 f3f3 	udiv	r3, r1, r3
 800549a:	1c59      	adds	r1, r3, #1
 800549c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054a0:	400b      	ands	r3, r1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_I2C_Init+0x138>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1e59      	subs	r1, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054b4:	3301      	adds	r3, #1
 80054b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ba:	e051      	b.n	8005560 <HAL_I2C_Init+0x1dc>
 80054bc:	2304      	movs	r3, #4
 80054be:	e04f      	b.n	8005560 <HAL_I2C_Init+0x1dc>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d111      	bne.n	80054ec <HAL_I2C_Init+0x168>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1e58      	subs	r0, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6859      	ldr	r1, [r3, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	440b      	add	r3, r1
 80054d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054da:	3301      	adds	r3, #1
 80054dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	e012      	b.n	8005512 <HAL_I2C_Init+0x18e>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1e58      	subs	r0, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	0099      	lsls	r1, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005502:	3301      	adds	r3, #1
 8005504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_I2C_Init+0x196>
 8005516:	2301      	movs	r3, #1
 8005518:	e022      	b.n	8005560 <HAL_I2C_Init+0x1dc>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10e      	bne.n	8005540 <HAL_I2C_Init+0x1bc>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1e58      	subs	r0, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6859      	ldr	r1, [r3, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	440b      	add	r3, r1
 8005530:	fbb0 f3f3 	udiv	r3, r0, r3
 8005534:	3301      	adds	r3, #1
 8005536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553e:	e00f      	b.n	8005560 <HAL_I2C_Init+0x1dc>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e58      	subs	r0, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	0099      	lsls	r1, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	fbb0 f3f3 	udiv	r3, r0, r3
 8005556:	3301      	adds	r3, #1
 8005558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	6809      	ldr	r1, [r1, #0]
 8005564:	4313      	orrs	r3, r2
 8005566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800558e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6911      	ldr	r1, [r2, #16]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68d2      	ldr	r2, [r2, #12]
 800559a:	4311      	orrs	r1, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	430b      	orrs	r3, r1
 80055a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	000186a0 	.word	0x000186a0
 80055fc:	001e847f 	.word	0x001e847f
 8005600:	003d08ff 	.word	0x003d08ff
 8005604:	431bde83 	.word	0x431bde83
 8005608:	10624dd3 	.word	0x10624dd3

0800560c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b20      	cmp	r3, #32
 8005620:	d129      	bne.n	8005676 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2224      	movs	r2, #36	; 0x24
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0210 	bic.w	r2, r2, #16
 8005648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e000      	b.n	8005678 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005676:	2302      	movs	r3, #2
  }
}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800568e:	2300      	movs	r3, #0
 8005690:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b20      	cmp	r3, #32
 800569c:	d12a      	bne.n	80056f4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2224      	movs	r2, #36	; 0x24
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80056be:	89fb      	ldrh	r3, [r7, #14]
 80056c0:	f023 030f 	bic.w	r3, r3, #15
 80056c4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	89fb      	ldrh	r3, [r7, #14]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	89fa      	ldrh	r2, [r7, #14]
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	e000      	b.n	80056f6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80056f4:	2302      	movs	r3, #2
  }
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e0bf      	b.n	8005896 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc fe9a 	bl	8002464 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005746:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6999      	ldr	r1, [r3, #24]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800575c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6899      	ldr	r1, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_LTDC_Init+0x19c>)
 8005778:	400b      	ands	r3, r1
 800577a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6899      	ldr	r1, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	431a      	orrs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68d9      	ldr	r1, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	4b3e      	ldr	r3, [pc, #248]	; (80058a0 <HAL_LTDC_Init+0x19c>)
 80057a6:	400b      	ands	r3, r1
 80057a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68d9      	ldr	r1, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6919      	ldr	r1, [r3, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b33      	ldr	r3, [pc, #204]	; (80058a0 <HAL_LTDC_Init+0x19c>)
 80057d4:	400b      	ands	r3, r1
 80057d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6919      	ldr	r1, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6959      	ldr	r1, [r3, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <HAL_LTDC_Init+0x19c>)
 8005802:	400b      	ands	r3, r1
 8005804:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6959      	ldr	r1, [r3, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005846:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0206 	orr.w	r2, r2, #6
 8005872:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	f000f800 	.word	0xf000f800

080058a4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d023      	beq.n	800590e <HAL_LTDC_IRQHandler+0x6a>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01e      	beq.n	800590e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0204 	bic.w	r2, r2, #4
 80058de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2204      	movs	r2, #4
 80058e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2204      	movs	r2, #4
 80058fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f86f 	bl	80059ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d023      	beq.n	8005960 <HAL_LTDC_IRQHandler+0xbc>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01e      	beq.n	8005960 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0202 	bic.w	r2, r2, #2
 8005930:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2202      	movs	r2, #2
 8005938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005940:	f043 0202 	orr.w	r2, r3, #2
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2204      	movs	r2, #4
 800594e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f846 	bl	80059ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01b      	beq.n	80059a2 <HAL_LTDC_IRQHandler+0xfe>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d016      	beq.n	80059a2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2201      	movs	r2, #1
 800598a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f82f 	bl	8005a00 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <HAL_LTDC_IRQHandler+0x140>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0208 	bic.w	r2, r2, #8
 80059c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2208      	movs	r2, #8
 80059cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f818 	bl	8005a14 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a28:	b5b0      	push	{r4, r5, r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_LTDC_ConfigLayer+0x1a>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e02c      	b.n	8005a9c <HAL_LTDC_ConfigLayer+0x74>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2134      	movs	r1, #52	; 0x34
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4614      	mov	r4, r2
 8005a66:	461d      	mov	r5, r3
 8005a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f83b 	bl	8005af8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2201      	movs	r2, #1
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bdb0      	pop	{r4, r5, r7, pc}

08005aa4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_LTDC_EnableDither+0x16>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e016      	b.n	8005ae8 <HAL_LTDC_EnableDither+0x44>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005aca:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <HAL_LTDC_EnableDither+0x50>)
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <HAL_LTDC_EnableDither+0x50>)
 8005ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40016800 	.word	0x40016800

08005af8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b089      	sub	sp, #36	; 0x24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b14:	4413      	add	r3, r2
 8005b16:	041b      	lsls	r3, r3, #16
 8005b18:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	01db      	lsls	r3, r3, #7
 8005b24:	4413      	add	r3, r2
 8005b26:	3384      	adds	r3, #132	; 0x84
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	4611      	mov	r1, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	01d2      	lsls	r2, r2, #7
 8005b34:	440a      	add	r2, r1
 8005b36:	3284      	adds	r2, #132	; 0x84
 8005b38:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005b3c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4e:	4413      	add	r3, r2
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4619      	mov	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	01db      	lsls	r3, r3, #7
 8005b5c:	440b      	add	r3, r1
 8005b5e:	3384      	adds	r3, #132	; 0x84
 8005b60:	4619      	mov	r1, r3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b76:	4413      	add	r3, r2
 8005b78:	041b      	lsls	r3, r3, #16
 8005b7a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	01db      	lsls	r3, r3, #7
 8005b86:	4413      	add	r3, r2
 8005b88:	3384      	adds	r3, #132	; 0x84
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	4611      	mov	r1, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	01d2      	lsls	r2, r2, #7
 8005b96:	440a      	add	r2, r1
 8005b98:	3284      	adds	r2, #132	; 0x84
 8005b9a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005b9e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bae:	4413      	add	r3, r2
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	01db      	lsls	r3, r3, #7
 8005bbc:	440b      	add	r3, r1
 8005bbe:	3384      	adds	r3, #132	; 0x84
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	01db      	lsls	r3, r3, #7
 8005bd2:	4413      	add	r3, r2
 8005bd4:	3384      	adds	r3, #132	; 0x84
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	01d2      	lsls	r2, r2, #7
 8005be2:	440a      	add	r2, r1
 8005be4:	3284      	adds	r2, #132	; 0x84
 8005be6:	f023 0307 	bic.w	r3, r3, #7
 8005bea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	01db      	lsls	r3, r3, #7
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3384      	adds	r3, #132	; 0x84
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c12:	041b      	lsls	r3, r3, #16
 8005c14:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	061b      	lsls	r3, r3, #24
 8005c1c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	01db      	lsls	r3, r3, #7
 8005c28:	4413      	add	r3, r2
 8005c2a:	3384      	adds	r3, #132	; 0x84
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	01db      	lsls	r3, r3, #7
 8005c38:	4413      	add	r3, r2
 8005c3a:	3384      	adds	r3, #132	; 0x84
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c48:	461a      	mov	r2, r3
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	431a      	orrs	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4619      	mov	r1, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	01db      	lsls	r3, r3, #7
 8005c5c:	440b      	add	r3, r1
 8005c5e:	3384      	adds	r3, #132	; 0x84
 8005c60:	4619      	mov	r1, r3
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	01db      	lsls	r3, r3, #7
 8005c72:	4413      	add	r3, r2
 8005c74:	3384      	adds	r3, #132	; 0x84
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	01d2      	lsls	r2, r2, #7
 8005c82:	440a      	add	r2, r1
 8005c84:	3284      	adds	r2, #132	; 0x84
 8005c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c8a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	01db      	lsls	r3, r3, #7
 8005c96:	4413      	add	r3, r2
 8005c98:	3384      	adds	r3, #132	; 0x84
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	01db      	lsls	r3, r3, #7
 8005cac:	4413      	add	r3, r2
 8005cae:	3384      	adds	r3, #132	; 0x84
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	01d2      	lsls	r2, r2, #7
 8005cbc:	440a      	add	r2, r1
 8005cbe:	3284      	adds	r2, #132	; 0x84
 8005cc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005cc4:	f023 0307 	bic.w	r3, r3, #7
 8005cc8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	6809      	ldr	r1, [r1, #0]
 8005cd6:	4608      	mov	r0, r1
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	01c9      	lsls	r1, r1, #7
 8005cdc:	4401      	add	r1, r0
 8005cde:	3184      	adds	r1, #132	; 0x84
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	01db      	lsls	r3, r3, #7
 8005cee:	4413      	add	r3, r2
 8005cf0:	3384      	adds	r3, #132	; 0x84
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	01db      	lsls	r3, r3, #7
 8005cfe:	4413      	add	r3, r2
 8005d00:	3384      	adds	r3, #132	; 0x84
 8005d02:	461a      	mov	r2, r3
 8005d04:	2300      	movs	r3, #0
 8005d06:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	01db      	lsls	r3, r3, #7
 8005d12:	4413      	add	r3, r2
 8005d14:	3384      	adds	r3, #132	; 0x84
 8005d16:	461a      	mov	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005d26:	2304      	movs	r3, #4
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	e01b      	b.n	8005d64 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d102      	bne.n	8005d3a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005d34:	2303      	movs	r3, #3
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e014      	b.n	8005d64 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d00b      	beq.n	8005d5a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d007      	beq.n	8005d5a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d003      	beq.n	8005d5a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d56:	2b07      	cmp	r3, #7
 8005d58:	d102      	bne.n	8005d60 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	e001      	b.n	8005d64 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005d60:	2301      	movs	r3, #1
 8005d62:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	01db      	lsls	r3, r3, #7
 8005d6e:	4413      	add	r3, r2
 8005d70:	3384      	adds	r3, #132	; 0x84
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	4611      	mov	r1, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	01d2      	lsls	r2, r2, #7
 8005d7e:	440a      	add	r2, r1
 8005d80:	3284      	adds	r2, #132	; 0x84
 8005d82:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005d86:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	041a      	lsls	r2, r3, #16
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6859      	ldr	r1, [r3, #4]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	1acb      	subs	r3, r1, r3
 8005d9e:	69f9      	ldr	r1, [r7, #28]
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	3303      	adds	r3, #3
 8005da6:	68f9      	ldr	r1, [r7, #12]
 8005da8:	6809      	ldr	r1, [r1, #0]
 8005daa:	4608      	mov	r0, r1
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	01c9      	lsls	r1, r1, #7
 8005db0:	4401      	add	r1, r0
 8005db2:	3184      	adds	r1, #132	; 0x84
 8005db4:	4313      	orrs	r3, r2
 8005db6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	01db      	lsls	r3, r3, #7
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3384      	adds	r3, #132	; 0x84
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	4611      	mov	r1, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	01d2      	lsls	r2, r2, #7
 8005dd2:	440a      	add	r2, r1
 8005dd4:	3284      	adds	r2, #132	; 0x84
 8005dd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	01db      	lsls	r3, r3, #7
 8005dea:	4413      	add	r3, r2
 8005dec:	3384      	adds	r3, #132	; 0x84
 8005dee:	461a      	mov	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	01db      	lsls	r3, r3, #7
 8005e00:	4413      	add	r3, r2
 8005e02:	3384      	adds	r3, #132	; 0x84
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	01d2      	lsls	r2, r2, #7
 8005e10:	440a      	add	r2, r1
 8005e12:	3284      	adds	r2, #132	; 0x84
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	6013      	str	r3, [r2, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3724      	adds	r7, #36	; 0x24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e264      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d075      	beq.n	8005f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e46:	4ba3      	ldr	r3, [pc, #652]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d00c      	beq.n	8005e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e52:	4ba0      	ldr	r3, [pc, #640]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d112      	bne.n	8005e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5e:	4b9d      	ldr	r3, [pc, #628]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6a:	d10b      	bne.n	8005e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	4b99      	ldr	r3, [pc, #612]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d05b      	beq.n	8005f30 <HAL_RCC_OscConfig+0x108>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d157      	bne.n	8005f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e23f      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8c:	d106      	bne.n	8005e9c <HAL_RCC_OscConfig+0x74>
 8005e8e:	4b91      	ldr	r3, [pc, #580]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a90      	ldr	r2, [pc, #576]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e01d      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x98>
 8005ea6:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a8a      	ldr	r2, [pc, #552]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a87      	ldr	r2, [pc, #540]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005ec0:	4b84      	ldr	r3, [pc, #528]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a83      	ldr	r2, [pc, #524]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4b81      	ldr	r3, [pc, #516]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a80      	ldr	r2, [pc, #512]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fc fe66 	bl	8002bb0 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7fc fe62 	bl	8002bb0 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	; 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e204      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efa:	4b76      	ldr	r3, [pc, #472]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0xc0>
 8005f06:	e014      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f08:	f7fc fe52 	bl	8002bb0 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f10:	f7fc fe4e 	bl	8002bb0 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e1f0      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f22:	4b6c      	ldr	r3, [pc, #432]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0xe8>
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d063      	beq.n	8006006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f3e:	4b65      	ldr	r3, [pc, #404]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00b      	beq.n	8005f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f4a:	4b62      	ldr	r3, [pc, #392]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d11c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f56:	4b5f      	ldr	r3, [pc, #380]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d116      	bne.n	8005f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f62:	4b5c      	ldr	r3, [pc, #368]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_RCC_OscConfig+0x152>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d001      	beq.n	8005f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e1c4      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7a:	4b56      	ldr	r3, [pc, #344]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4952      	ldr	r1, [pc, #328]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8e:	e03a      	b.n	8006006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d020      	beq.n	8005fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f98:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <HAL_RCC_OscConfig+0x2b0>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9e:	f7fc fe07 	bl	8002bb0 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa6:	f7fc fe03 	bl	8002bb0 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e1a5      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb8:	4b46      	ldr	r3, [pc, #280]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc4:	4b43      	ldr	r3, [pc, #268]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4940      	ldr	r1, [pc, #256]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]
 8005fd8:	e015      	b.n	8006006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fda:	4b3f      	ldr	r3, [pc, #252]	; (80060d8 <HAL_RCC_OscConfig+0x2b0>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fc fde6 	bl	8002bb0 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe8:	f7fc fde2 	bl	8002bb0 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e184      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ffa:	4b36      	ldr	r3, [pc, #216]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d030      	beq.n	8006074 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601a:	4b30      	ldr	r3, [pc, #192]	; (80060dc <HAL_RCC_OscConfig+0x2b4>)
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006020:	f7fc fdc6 	bl	8002bb0 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006028:	f7fc fdc2 	bl	8002bb0 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e164      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800603a:	4b26      	ldr	r3, [pc, #152]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 800603c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0x200>
 8006046:	e015      	b.n	8006074 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006048:	4b24      	ldr	r3, [pc, #144]	; (80060dc <HAL_RCC_OscConfig+0x2b4>)
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800604e:	f7fc fdaf 	bl	8002bb0 <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006056:	f7fc fdab 	bl	8002bb0 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e14d      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006068:	4b1a      	ldr	r3, [pc, #104]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 800606a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1f0      	bne.n	8006056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80a0 	beq.w	80061c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006082:	2300      	movs	r3, #0
 8006084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006086:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10f      	bne.n	80060b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	4b0f      	ldr	r3, [pc, #60]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	4a0e      	ldr	r2, [pc, #56]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6413      	str	r3, [r2, #64]	; 0x40
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b2:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <HAL_RCC_OscConfig+0x2b8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d121      	bne.n	8006102 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060be:	4b08      	ldr	r3, [pc, #32]	; (80060e0 <HAL_RCC_OscConfig+0x2b8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a07      	ldr	r2, [pc, #28]	; (80060e0 <HAL_RCC_OscConfig+0x2b8>)
 80060c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ca:	f7fc fd71 	bl	8002bb0 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d0:	e011      	b.n	80060f6 <HAL_RCC_OscConfig+0x2ce>
 80060d2:	bf00      	nop
 80060d4:	40023800 	.word	0x40023800
 80060d8:	42470000 	.word	0x42470000
 80060dc:	42470e80 	.word	0x42470e80
 80060e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e4:	f7fc fd64 	bl	8002bb0 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e106      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f6:	4b85      	ldr	r3, [pc, #532]	; (800630c <HAL_RCC_OscConfig+0x4e4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d106      	bne.n	8006118 <HAL_RCC_OscConfig+0x2f0>
 800610a:	4b81      	ldr	r3, [pc, #516]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 800610c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610e:	4a80      	ldr	r2, [pc, #512]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	6713      	str	r3, [r2, #112]	; 0x70
 8006116:	e01c      	b.n	8006152 <HAL_RCC_OscConfig+0x32a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b05      	cmp	r3, #5
 800611e:	d10c      	bne.n	800613a <HAL_RCC_OscConfig+0x312>
 8006120:	4b7b      	ldr	r3, [pc, #492]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006124:	4a7a      	ldr	r2, [pc, #488]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006126:	f043 0304 	orr.w	r3, r3, #4
 800612a:	6713      	str	r3, [r2, #112]	; 0x70
 800612c:	4b78      	ldr	r3, [pc, #480]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 800612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006130:	4a77      	ldr	r2, [pc, #476]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6713      	str	r3, [r2, #112]	; 0x70
 8006138:	e00b      	b.n	8006152 <HAL_RCC_OscConfig+0x32a>
 800613a:	4b75      	ldr	r3, [pc, #468]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 800613c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613e:	4a74      	ldr	r2, [pc, #464]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	6713      	str	r3, [r2, #112]	; 0x70
 8006146:	4b72      	ldr	r3, [pc, #456]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	4a71      	ldr	r2, [pc, #452]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 800614c:	f023 0304 	bic.w	r3, r3, #4
 8006150:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d015      	beq.n	8006186 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615a:	f7fc fd29 	bl	8002bb0 <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006160:	e00a      	b.n	8006178 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006162:	f7fc fd25 	bl	8002bb0 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006170:	4293      	cmp	r3, r2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e0c5      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006178:	4b65      	ldr	r3, [pc, #404]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0ee      	beq.n	8006162 <HAL_RCC_OscConfig+0x33a>
 8006184:	e014      	b.n	80061b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006186:	f7fc fd13 	bl	8002bb0 <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618c:	e00a      	b.n	80061a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618e:	f7fc fd0f 	bl	8002bb0 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	f241 3288 	movw	r2, #5000	; 0x1388
 800619c:	4293      	cmp	r3, r2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e0af      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a4:	4b5a      	ldr	r3, [pc, #360]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 80061a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1ee      	bne.n	800618e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d105      	bne.n	80061c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b6:	4b56      	ldr	r3, [pc, #344]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	4a55      	ldr	r2, [pc, #340]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 80061bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 809b 	beq.w	8006302 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061cc:	4b50      	ldr	r3, [pc, #320]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 030c 	and.w	r3, r3, #12
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d05c      	beq.n	8006292 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d141      	bne.n	8006264 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e0:	4b4c      	ldr	r3, [pc, #304]	; (8006314 <HAL_RCC_OscConfig+0x4ec>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e6:	f7fc fce3 	bl	8002bb0 <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ee:	f7fc fcdf 	bl	8002bb0 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e081      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006200:	4b43      	ldr	r3, [pc, #268]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f0      	bne.n	80061ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	019b      	lsls	r3, r3, #6
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	3b01      	subs	r3, #1
 8006226:	041b      	lsls	r3, r3, #16
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	061b      	lsls	r3, r3, #24
 8006230:	4937      	ldr	r1, [pc, #220]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006232:	4313      	orrs	r3, r2
 8006234:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006236:	4b37      	ldr	r3, [pc, #220]	; (8006314 <HAL_RCC_OscConfig+0x4ec>)
 8006238:	2201      	movs	r2, #1
 800623a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623c:	f7fc fcb8 	bl	8002bb0 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006244:	f7fc fcb4 	bl	8002bb0 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e056      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006256:	4b2e      	ldr	r3, [pc, #184]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x41c>
 8006262:	e04e      	b.n	8006302 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006264:	4b2b      	ldr	r3, [pc, #172]	; (8006314 <HAL_RCC_OscConfig+0x4ec>)
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626a:	f7fc fca1 	bl	8002bb0 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006272:	f7fc fc9d 	bl	8002bb0 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e03f      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006284:	4b22      	ldr	r3, [pc, #136]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <HAL_RCC_OscConfig+0x44a>
 8006290:	e037      	b.n	8006302 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e032      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800629e:	4b1c      	ldr	r3, [pc, #112]	; (8006310 <HAL_RCC_OscConfig+0x4e8>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d028      	beq.n	80062fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d121      	bne.n	80062fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d11a      	bne.n	80062fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062ce:	4013      	ands	r3, r2
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d111      	bne.n	80062fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	085b      	lsrs	r3, r3, #1
 80062e6:	3b01      	subs	r3, #1
 80062e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d107      	bne.n	80062fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d001      	beq.n	8006302 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40007000 	.word	0x40007000
 8006310:	40023800 	.word	0x40023800
 8006314:	42470060 	.word	0x42470060

08006318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0cc      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800632c:	4b68      	ldr	r3, [pc, #416]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d90c      	bls.n	8006354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b65      	ldr	r3, [pc, #404]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006342:	4b63      	ldr	r3, [pc, #396]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d001      	beq.n	8006354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0b8      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d020      	beq.n	80063a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800636c:	4b59      	ldr	r3, [pc, #356]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4a58      	ldr	r2, [pc, #352]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006384:	4b53      	ldr	r3, [pc, #332]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4a52      	ldr	r2, [pc, #328]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800638e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006390:	4b50      	ldr	r3, [pc, #320]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	494d      	ldr	r1, [pc, #308]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d044      	beq.n	8006438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d107      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b6:	4b47      	ldr	r3, [pc, #284]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d119      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e07f      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d003      	beq.n	80063d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d107      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d6:	4b3f      	ldr	r3, [pc, #252]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e06f      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e6:	4b3b      	ldr	r3, [pc, #236]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e067      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063f6:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f023 0203 	bic.w	r2, r3, #3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4934      	ldr	r1, [pc, #208]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	4313      	orrs	r3, r2
 8006406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006408:	f7fc fbd2 	bl	8002bb0 <HAL_GetTick>
 800640c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640e:	e00a      	b.n	8006426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006410:	f7fc fbce 	bl	8002bb0 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	f241 3288 	movw	r2, #5000	; 0x1388
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e04f      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006426:	4b2b      	ldr	r3, [pc, #172]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 020c 	and.w	r2, r3, #12
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	429a      	cmp	r2, r3
 8006436:	d1eb      	bne.n	8006410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006438:	4b25      	ldr	r3, [pc, #148]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d20c      	bcs.n	8006460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006446:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d001      	beq.n	8006460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e032      	b.n	80064c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800646c:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4916      	ldr	r1, [pc, #88]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800648a:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	490e      	ldr	r1, [pc, #56]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	4313      	orrs	r3, r2
 800649c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800649e:	f000 f821 	bl	80064e4 <HAL_RCC_GetSysClockFreq>
 80064a2:	4602      	mov	r2, r0
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	091b      	lsrs	r3, r3, #4
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	490a      	ldr	r1, [pc, #40]	; (80064d8 <HAL_RCC_ClockConfig+0x1c0>)
 80064b0:	5ccb      	ldrb	r3, [r1, r3]
 80064b2:	fa22 f303 	lsr.w	r3, r2, r3
 80064b6:	4a09      	ldr	r2, [pc, #36]	; (80064dc <HAL_RCC_ClockConfig+0x1c4>)
 80064b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064ba:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <HAL_RCC_ClockConfig+0x1c8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fc fa6c 	bl	800299c <HAL_InitTick>

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40023c00 	.word	0x40023c00
 80064d4:	40023800 	.word	0x40023800
 80064d8:	0800bc1c 	.word	0x0800bc1c
 80064dc:	20000048 	.word	0x20000048
 80064e0:	2000004c 	.word	0x2000004c

080064e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	607b      	str	r3, [r7, #4]
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	2300      	movs	r3, #0
 80064f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064fc:	4b67      	ldr	r3, [pc, #412]	; (800669c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 030c 	and.w	r3, r3, #12
 8006504:	2b08      	cmp	r3, #8
 8006506:	d00d      	beq.n	8006524 <HAL_RCC_GetSysClockFreq+0x40>
 8006508:	2b08      	cmp	r3, #8
 800650a:	f200 80bd 	bhi.w	8006688 <HAL_RCC_GetSysClockFreq+0x1a4>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_RCC_GetSysClockFreq+0x34>
 8006512:	2b04      	cmp	r3, #4
 8006514:	d003      	beq.n	800651e <HAL_RCC_GetSysClockFreq+0x3a>
 8006516:	e0b7      	b.n	8006688 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006518:	4b61      	ldr	r3, [pc, #388]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800651a:	60bb      	str	r3, [r7, #8]
       break;
 800651c:	e0b7      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800651e:	4b61      	ldr	r3, [pc, #388]	; (80066a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006520:	60bb      	str	r3, [r7, #8]
      break;
 8006522:	e0b4      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006524:	4b5d      	ldr	r3, [pc, #372]	; (800669c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800652c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800652e:	4b5b      	ldr	r3, [pc, #364]	; (800669c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d04d      	beq.n	80065d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800653a:	4b58      	ldr	r3, [pc, #352]	; (800669c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	099b      	lsrs	r3, r3, #6
 8006540:	461a      	mov	r2, r3
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	f240 10ff 	movw	r0, #511	; 0x1ff
 800654a:	f04f 0100 	mov.w	r1, #0
 800654e:	ea02 0800 	and.w	r8, r2, r0
 8006552:	ea03 0901 	and.w	r9, r3, r1
 8006556:	4640      	mov	r0, r8
 8006558:	4649      	mov	r1, r9
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	014b      	lsls	r3, r1, #5
 8006564:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006568:	0142      	lsls	r2, r0, #5
 800656a:	4610      	mov	r0, r2
 800656c:	4619      	mov	r1, r3
 800656e:	ebb0 0008 	subs.w	r0, r0, r8
 8006572:	eb61 0109 	sbc.w	r1, r1, r9
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	018b      	lsls	r3, r1, #6
 8006580:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006584:	0182      	lsls	r2, r0, #6
 8006586:	1a12      	subs	r2, r2, r0
 8006588:	eb63 0301 	sbc.w	r3, r3, r1
 800658c:	f04f 0000 	mov.w	r0, #0
 8006590:	f04f 0100 	mov.w	r1, #0
 8006594:	00d9      	lsls	r1, r3, #3
 8006596:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800659a:	00d0      	lsls	r0, r2, #3
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	eb12 0208 	adds.w	r2, r2, r8
 80065a4:	eb43 0309 	adc.w	r3, r3, r9
 80065a8:	f04f 0000 	mov.w	r0, #0
 80065ac:	f04f 0100 	mov.w	r1, #0
 80065b0:	0259      	lsls	r1, r3, #9
 80065b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80065b6:	0250      	lsls	r0, r2, #9
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4610      	mov	r0, r2
 80065be:	4619      	mov	r1, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	f7f9 fe12 	bl	80001f0 <__aeabi_uldivmod>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	4613      	mov	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e04a      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065d6:	4b31      	ldr	r3, [pc, #196]	; (800669c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	099b      	lsrs	r3, r3, #6
 80065dc:	461a      	mov	r2, r3
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065e6:	f04f 0100 	mov.w	r1, #0
 80065ea:	ea02 0400 	and.w	r4, r2, r0
 80065ee:	ea03 0501 	and.w	r5, r3, r1
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	014b      	lsls	r3, r1, #5
 8006600:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006604:	0142      	lsls	r2, r0, #5
 8006606:	4610      	mov	r0, r2
 8006608:	4619      	mov	r1, r3
 800660a:	1b00      	subs	r0, r0, r4
 800660c:	eb61 0105 	sbc.w	r1, r1, r5
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	018b      	lsls	r3, r1, #6
 800661a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800661e:	0182      	lsls	r2, r0, #6
 8006620:	1a12      	subs	r2, r2, r0
 8006622:	eb63 0301 	sbc.w	r3, r3, r1
 8006626:	f04f 0000 	mov.w	r0, #0
 800662a:	f04f 0100 	mov.w	r1, #0
 800662e:	00d9      	lsls	r1, r3, #3
 8006630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006634:	00d0      	lsls	r0, r2, #3
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	1912      	adds	r2, r2, r4
 800663c:	eb45 0303 	adc.w	r3, r5, r3
 8006640:	f04f 0000 	mov.w	r0, #0
 8006644:	f04f 0100 	mov.w	r1, #0
 8006648:	0299      	lsls	r1, r3, #10
 800664a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800664e:	0290      	lsls	r0, r2, #10
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4610      	mov	r0, r2
 8006656:	4619      	mov	r1, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	461a      	mov	r2, r3
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	f7f9 fdc6 	bl	80001f0 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4613      	mov	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800666c:	4b0b      	ldr	r3, [pc, #44]	; (800669c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	3301      	adds	r3, #1
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	60bb      	str	r3, [r7, #8]
      break;
 8006686:	e002      	b.n	800668e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800668a:	60bb      	str	r3, [r7, #8]
      break;
 800668c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800668e:	68bb      	ldr	r3, [r7, #8]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800669a:	bf00      	nop
 800669c:	40023800 	.word	0x40023800
 80066a0:	00f42400 	.word	0x00f42400
 80066a4:	007a1200 	.word	0x007a1200

080066a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <HAL_RCC_GetHCLKFreq+0x14>)
 80066ae:	681b      	ldr	r3, [r3, #0]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000048 	.word	0x20000048

080066c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066c4:	f7ff fff0 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	0a9b      	lsrs	r3, r3, #10
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	4903      	ldr	r1, [pc, #12]	; (80066e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066d6:	5ccb      	ldrb	r3, [r1, r3]
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066dc:	4618      	mov	r0, r3
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40023800 	.word	0x40023800
 80066e4:	0800bc2c 	.word	0x0800bc2c

080066e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066ec:	f7ff ffdc 	bl	80066a8 <HAL_RCC_GetHCLKFreq>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	0b5b      	lsrs	r3, r3, #13
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	4903      	ldr	r1, [pc, #12]	; (800670c <HAL_RCC_GetPCLK2Freq+0x24>)
 80066fe:	5ccb      	ldrb	r3, [r1, r3]
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006704:	4618      	mov	r0, r3
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40023800 	.word	0x40023800
 800670c:	0800bc2c 	.word	0x0800bc2c

08006710 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	220f      	movs	r2, #15
 800671e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006720:	4b12      	ldr	r3, [pc, #72]	; (800676c <HAL_RCC_GetClockConfig+0x5c>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 0203 	and.w	r2, r3, #3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800672c:	4b0f      	ldr	r3, [pc, #60]	; (800676c <HAL_RCC_GetClockConfig+0x5c>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <HAL_RCC_GetClockConfig+0x5c>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006744:	4b09      	ldr	r3, [pc, #36]	; (800676c <HAL_RCC_GetClockConfig+0x5c>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	08db      	lsrs	r3, r3, #3
 800674a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006752:	4b07      	ldr	r3, [pc, #28]	; (8006770 <HAL_RCC_GetClockConfig+0x60>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 020f 	and.w	r2, r3, #15
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	601a      	str	r2, [r3, #0]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40023800 	.word	0x40023800
 8006770:	40023c00 	.word	0x40023c00

08006774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d075      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067a8:	4bad      	ldr	r3, [pc, #692]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067ae:	f7fc f9ff 	bl	8002bb0 <HAL_GetTick>
 80067b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067b4:	e008      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067b6:	f7fc f9fb 	bl	8002bb0 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e18b      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067c8:	4ba6      	ldr	r3, [pc, #664]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1f0      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d009      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	019a      	lsls	r2, r3, #6
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	071b      	lsls	r3, r3, #28
 80067ec:	499d      	ldr	r1, [pc, #628]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0302 	and.w	r3, r3, #2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01f      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006800:	4b98      	ldr	r3, [pc, #608]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006806:	0f1b      	lsrs	r3, r3, #28
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	019a      	lsls	r2, r3, #6
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	061b      	lsls	r3, r3, #24
 800681a:	431a      	orrs	r2, r3
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	071b      	lsls	r3, r3, #28
 8006820:	4990      	ldr	r1, [pc, #576]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006828:	4b8e      	ldr	r3, [pc, #568]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800682a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800682e:	f023 021f 	bic.w	r2, r3, #31
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	3b01      	subs	r3, #1
 8006838:	498a      	ldr	r1, [pc, #552]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00d      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	019a      	lsls	r2, r3, #6
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	061b      	lsls	r3, r3, #24
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	071b      	lsls	r3, r3, #28
 8006860:	4980      	ldr	r1, [pc, #512]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006868:	4b7d      	ldr	r3, [pc, #500]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800686e:	f7fc f99f 	bl	8002bb0 <HAL_GetTick>
 8006872:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006874:	e008      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006876:	f7fc f99b 	bl	8002bb0 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e12b      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006888:	4b76      	ldr	r3, [pc, #472]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0f0      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d105      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d079      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068ac:	4b6e      	ldr	r3, [pc, #440]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068b2:	f7fc f97d 	bl	8002bb0 <HAL_GetTick>
 80068b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068b8:	e008      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068ba:	f7fc f979 	bl	8002bb0 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e109      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068cc:	4b65      	ldr	r3, [pc, #404]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068d8:	d0ef      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d020      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068e6:	4b5f      	ldr	r3, [pc, #380]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ec:	0f1b      	lsrs	r3, r3, #28
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	019a      	lsls	r2, r3, #6
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	061b      	lsls	r3, r3, #24
 8006900:	431a      	orrs	r2, r3
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	071b      	lsls	r3, r3, #28
 8006906:	4957      	ldr	r1, [pc, #348]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800690e:	4b55      	ldr	r3, [pc, #340]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006914:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	3b01      	subs	r3, #1
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	4950      	ldr	r1, [pc, #320]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01e      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006934:	4b4b      	ldr	r3, [pc, #300]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693a:	0e1b      	lsrs	r3, r3, #24
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	019a      	lsls	r2, r3, #6
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	061b      	lsls	r3, r3, #24
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	071b      	lsls	r3, r3, #28
 8006954:	4943      	ldr	r1, [pc, #268]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800695c:	4b41      	ldr	r3, [pc, #260]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800695e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006962:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	493e      	ldr	r1, [pc, #248]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006972:	4b3d      	ldr	r3, [pc, #244]	; (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006978:	f7fc f91a 	bl	8002bb0 <HAL_GetTick>
 800697c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006980:	f7fc f916 	bl	8002bb0 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e0a6      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006992:	4b34      	ldr	r3, [pc, #208]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800699a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800699e:	d1ef      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 808d 	beq.w	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	4b2c      	ldr	r3, [pc, #176]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	4a2b      	ldr	r2, [pc, #172]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069bc:	6413      	str	r3, [r2, #64]	; 0x40
 80069be:	4b29      	ldr	r3, [pc, #164]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069ca:	4b28      	ldr	r3, [pc, #160]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069d6:	f7fc f8eb 	bl	8002bb0 <HAL_GetTick>
 80069da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069dc:	e008      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069de:	f7fc f8e7 	bl	8002bb0 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e077      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069f0:	4b1e      	ldr	r3, [pc, #120]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0f0      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069fc:	4b19      	ldr	r3, [pc, #100]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d039      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d032      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a1a:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a24:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a30:	4a0c      	ldr	r2, [pc, #48]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d11e      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a42:	f7fc f8b5 	bl	8002bb0 <HAL_GetTick>
 8006a46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a48:	e014      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a4a:	f7fc f8b1 	bl	8002bb0 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d90b      	bls.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e03f      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006a60:	42470068 	.word	0x42470068
 8006a64:	40023800 	.word	0x40023800
 8006a68:	42470070 	.word	0x42470070
 8006a6c:	40007000 	.word	0x40007000
 8006a70:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a74:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0e4      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a8c:	d10d      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006a8e:	4b16      	ldr	r3, [pc, #88]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa2:	4911      	ldr	r1, [pc, #68]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	608b      	str	r3, [r1, #8]
 8006aa8:	e005      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	4a0e      	ldr	r2, [pc, #56]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ab0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ab4:	6093      	str	r3, [r2, #8]
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ab8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ac2:	4909      	ldr	r1, [pc, #36]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0310 	and.w	r3, r3, #16
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d004      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006ada:	4b04      	ldr	r3, [pc, #16]	; (8006aec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006adc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	424711e0 	.word	0x424711e0

08006af0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e025      	b.n	8006b50 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7fb ff35 	bl	8002988 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f001 fcd3 	bl	80084dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	f001 fd3e 	bl	80085c2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d101      	bne.n	8006b74 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006b70:	2302      	movs	r3, #2
 8006b72:	e018      	b.n	8006ba6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f001 fd9b 	bl	80086c0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d104      	bne.n	8006b9c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2205      	movs	r2, #5
 8006b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006b9a:	e003      	b.n	8006ba4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d101      	bne.n	8006bc8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e00e      	b.n	8006be6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 fdae 	bl	8008738 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e07b      	b.n	8006cf8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d108      	bne.n	8006c1a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c10:	d009      	beq.n	8006c26 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	61da      	str	r2, [r3, #28]
 8006c18:	e005      	b.n	8006c26 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d106      	bne.n	8006c46 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fb fd3f 	bl	80026c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	ea42 0103 	orr.w	r1, r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	0c1b      	lsrs	r3, r3, #16
 8006cc4:	f003 0104 	and.w	r1, r3, #4
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	f003 0210 	and.w	r2, r3, #16
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69da      	ldr	r2, [r3, #28]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ce6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e01a      	b.n	8006d48 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fb fd12 	bl	8002754 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_SPI_Transmit+0x22>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e126      	b.n	8006fc0 <HAL_SPI_Transmit+0x270>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d7a:	f7fb ff19 	bl	8002bb0 <HAL_GetTick>
 8006d7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d002      	beq.n	8006d96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
 8006d92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d94:	e10b      	b.n	8006fae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_SPI_Transmit+0x52>
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006da6:	e102      	b.n	8006fae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2203      	movs	r2, #3
 8006dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	88fa      	ldrh	r2, [r7, #6]
 8006dc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	88fa      	ldrh	r2, [r7, #6]
 8006dc6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dee:	d10f      	bne.n	8006e10 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d007      	beq.n	8006e2e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e36:	d14b      	bne.n	8006ed0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_SPI_Transmit+0xf6>
 8006e40:	8afb      	ldrh	r3, [r7, #22]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d13e      	bne.n	8006ec4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	881a      	ldrh	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	1c9a      	adds	r2, r3, #2
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e6a:	e02b      	b.n	8006ec4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d112      	bne.n	8006ea0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	881a      	ldrh	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	1c9a      	adds	r2, r3, #2
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e9e:	e011      	b.n	8006ec4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ea0:	f7fb fe86 	bl	8002bb0 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d803      	bhi.n	8006eb8 <HAL_SPI_Transmit+0x168>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eb6:	d102      	bne.n	8006ebe <HAL_SPI_Transmit+0x16e>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d102      	bne.n	8006ec4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ec2:	e074      	b.n	8006fae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1ce      	bne.n	8006e6c <HAL_SPI_Transmit+0x11c>
 8006ece:	e04c      	b.n	8006f6a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_SPI_Transmit+0x18e>
 8006ed8:	8afb      	ldrh	r3, [r7, #22]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d140      	bne.n	8006f60 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	330c      	adds	r3, #12
 8006ee8:	7812      	ldrb	r2, [r2, #0]
 8006eea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f04:	e02c      	b.n	8006f60 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d113      	bne.n	8006f3c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	7812      	ldrb	r2, [r2, #0]
 8006f20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f3a:	e011      	b.n	8006f60 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f3c:	f7fb fe38 	bl	8002bb0 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d803      	bhi.n	8006f54 <HAL_SPI_Transmit+0x204>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f52:	d102      	bne.n	8006f5a <HAL_SPI_Transmit+0x20a>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d102      	bne.n	8006f60 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f5e:	e026      	b.n	8006fae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1cd      	bne.n	8006f06 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 fbda 	bl	8007728 <SPI_EndRxTxTransaction>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d002      	beq.n	8006fac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	77fb      	strb	r3, [r7, #31]
 8006faa:	e000      	b.n	8006fae <HAL_SPI_Transmit+0x25e>
  }

error:
 8006fac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fe4:	d112      	bne.n	800700c <HAL_SPI_Receive+0x44>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10e      	bne.n	800700c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f8f1 	bl	80071ea <HAL_SPI_TransmitReceive>
 8007008:	4603      	mov	r3, r0
 800700a:	e0ea      	b.n	80071e2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_SPI_Receive+0x52>
 8007016:	2302      	movs	r3, #2
 8007018:	e0e3      	b.n	80071e2 <HAL_SPI_Receive+0x21a>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007022:	f7fb fdc5 	bl	8002bb0 <HAL_GetTick>
 8007026:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b01      	cmp	r3, #1
 8007032:	d002      	beq.n	800703a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007034:	2302      	movs	r3, #2
 8007036:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007038:	e0ca      	b.n	80071d0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <HAL_SPI_Receive+0x7e>
 8007040:	88fb      	ldrh	r3, [r7, #6]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	75fb      	strb	r3, [r7, #23]
    goto error;
 800704a:	e0c1      	b.n	80071d0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2204      	movs	r2, #4
 8007050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	88fa      	ldrh	r2, [r7, #6]
 8007064:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	88fa      	ldrh	r2, [r7, #6]
 800706a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007092:	d10f      	bne.n	80070b4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d007      	beq.n	80070d2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d162      	bne.n	80071a0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070da:	e02e      	b.n	800713a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d115      	bne.n	8007116 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f103 020c 	add.w	r2, r3, #12
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007114:	e011      	b.n	800713a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007116:	f7fb fd4b 	bl	8002bb0 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d803      	bhi.n	800712e <HAL_SPI_Receive+0x166>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712c:	d102      	bne.n	8007134 <HAL_SPI_Receive+0x16c>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007138:	e04a      	b.n	80071d0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1cb      	bne.n	80070dc <HAL_SPI_Receive+0x114>
 8007144:	e031      	b.n	80071aa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	d113      	bne.n	800717c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	b292      	uxth	r2, r2
 8007160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	1c9a      	adds	r2, r3, #2
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	87da      	strh	r2, [r3, #62]	; 0x3e
 800717a:	e011      	b.n	80071a0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800717c:	f7fb fd18 	bl	8002bb0 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d803      	bhi.n	8007194 <HAL_SPI_Receive+0x1cc>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007192:	d102      	bne.n	800719a <HAL_SPI_Receive+0x1d2>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800719e:	e017      	b.n	80071d0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1cd      	bne.n	8007146 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 fa54 	bl	800765c <SPI_EndRxTransaction>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2220      	movs	r2, #32
 80071be:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
 80071cc:	e000      	b.n	80071d0 <HAL_SPI_Receive+0x208>
  }

error :
 80071ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b08c      	sub	sp, #48	; 0x30
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
 80071f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071f8:	2301      	movs	r3, #1
 80071fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x26>
 800720c:	2302      	movs	r3, #2
 800720e:	e18a      	b.n	8007526 <HAL_SPI_TransmitReceive+0x33c>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007218:	f7fb fcca 	bl	8002bb0 <HAL_GetTick>
 800721c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800722e:	887b      	ldrh	r3, [r7, #2]
 8007230:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007236:	2b01      	cmp	r3, #1
 8007238:	d00f      	beq.n	800725a <HAL_SPI_TransmitReceive+0x70>
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007240:	d107      	bne.n	8007252 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d103      	bne.n	8007252 <HAL_SPI_TransmitReceive+0x68>
 800724a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800724e:	2b04      	cmp	r3, #4
 8007250:	d003      	beq.n	800725a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007252:	2302      	movs	r3, #2
 8007254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007258:	e15b      	b.n	8007512 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_SPI_TransmitReceive+0x82>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_SPI_TransmitReceive+0x82>
 8007266:	887b      	ldrh	r3, [r7, #2]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007272:	e14e      	b.n	8007512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b04      	cmp	r3, #4
 800727e:	d003      	beq.n	8007288 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2205      	movs	r2, #5
 8007284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	887a      	ldrh	r2, [r7, #2]
 8007298:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	887a      	ldrh	r2, [r7, #2]
 800729e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	887a      	ldrh	r2, [r7, #2]
 80072aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	887a      	ldrh	r2, [r7, #2]
 80072b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	d007      	beq.n	80072dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e4:	d178      	bne.n	80073d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <HAL_SPI_TransmitReceive+0x10a>
 80072ee:	8b7b      	ldrh	r3, [r7, #26]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d166      	bne.n	80073c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	881a      	ldrh	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	1c9a      	adds	r2, r3, #2
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007318:	e053      	b.n	80073c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 0302 	and.w	r3, r3, #2
 8007324:	2b02      	cmp	r3, #2
 8007326:	d11b      	bne.n	8007360 <HAL_SPI_TransmitReceive+0x176>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d016      	beq.n	8007360 <HAL_SPI_TransmitReceive+0x176>
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d113      	bne.n	8007360 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733c:	881a      	ldrh	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	1c9a      	adds	r2, r3, #2
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b01      	cmp	r3, #1
 800736c:	d119      	bne.n	80073a2 <HAL_SPI_TransmitReceive+0x1b8>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007372:	b29b      	uxth	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d014      	beq.n	80073a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	b292      	uxth	r2, r2
 8007384:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	1c9a      	adds	r2, r3, #2
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800739e:	2301      	movs	r3, #1
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073a2:	f7fb fc05 	bl	8002bb0 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d807      	bhi.n	80073c2 <HAL_SPI_TransmitReceive+0x1d8>
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b8:	d003      	beq.n	80073c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073c0:	e0a7      	b.n	8007512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1a6      	bne.n	800731a <HAL_SPI_TransmitReceive+0x130>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1a1      	bne.n	800731a <HAL_SPI_TransmitReceive+0x130>
 80073d6:	e07c      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <HAL_SPI_TransmitReceive+0x1fc>
 80073e0:	8b7b      	ldrh	r3, [r7, #26]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d16b      	bne.n	80074be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330c      	adds	r3, #12
 80073f0:	7812      	ldrb	r2, [r2, #0]
 80073f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007402:	b29b      	uxth	r3, r3
 8007404:	3b01      	subs	r3, #1
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800740c:	e057      	b.n	80074be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b02      	cmp	r3, #2
 800741a:	d11c      	bne.n	8007456 <HAL_SPI_TransmitReceive+0x26c>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d017      	beq.n	8007456 <HAL_SPI_TransmitReceive+0x26c>
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	2b01      	cmp	r3, #1
 800742a:	d114      	bne.n	8007456 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	330c      	adds	r3, #12
 8007436:	7812      	ldrb	r2, [r2, #0]
 8007438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007448:	b29b      	uxth	r3, r3
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b01      	cmp	r3, #1
 8007462:	d119      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x2ae>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d014      	beq.n	8007498 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007494:	2301      	movs	r3, #1
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007498:	f7fb fb8a 	bl	8002bb0 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d803      	bhi.n	80074b0 <HAL_SPI_TransmitReceive+0x2c6>
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ae:	d102      	bne.n	80074b6 <HAL_SPI_TransmitReceive+0x2cc>
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d103      	bne.n	80074be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074bc:	e029      	b.n	8007512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1a2      	bne.n	800740e <HAL_SPI_TransmitReceive+0x224>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d19d      	bne.n	800740e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 f926 	bl	8007728 <SPI_EndRxTxTransaction>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d006      	beq.n	80074f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80074ee:	e010      	b.n	8007512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	e000      	b.n	8007512 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007510:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007526:	4618      	mov	r0, r3
 8007528:	3730      	adds	r7, #48	; 0x30
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800753c:	b2db      	uxtb	r3, r3
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	603b      	str	r3, [r7, #0]
 8007558:	4613      	mov	r3, r2
 800755a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800755c:	f7fb fb28 	bl	8002bb0 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	4413      	add	r3, r2
 800756a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800756c:	f7fb fb20 	bl	8002bb0 <HAL_GetTick>
 8007570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007572:	4b39      	ldr	r3, [pc, #228]	; (8007658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	015b      	lsls	r3, r3, #5
 8007578:	0d1b      	lsrs	r3, r3, #20
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	fb02 f303 	mul.w	r3, r2, r3
 8007580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007582:	e054      	b.n	800762e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800758a:	d050      	beq.n	800762e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800758c:	f7fb fb10 	bl	8002bb0 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	429a      	cmp	r2, r3
 800759a:	d902      	bls.n	80075a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d13d      	bne.n	800761e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ba:	d111      	bne.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c4:	d004      	beq.n	80075d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ce:	d107      	bne.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075e8:	d10f      	bne.n	800760a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e017      	b.n	800764e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	3b01      	subs	r3, #1
 800762c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4013      	ands	r3, r2
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	429a      	cmp	r2, r3
 800763c:	bf0c      	ite	eq
 800763e:	2301      	moveq	r3, #1
 8007640:	2300      	movne	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	429a      	cmp	r2, r3
 800764a:	d19b      	bne.n	8007584 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3720      	adds	r7, #32
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000048 	.word	0x20000048

0800765c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007670:	d111      	bne.n	8007696 <SPI_EndRxTransaction+0x3a>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800767a:	d004      	beq.n	8007686 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007684:	d107      	bne.n	8007696 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007694:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800769e:	d12a      	bne.n	80076f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a8:	d012      	beq.n	80076d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2200      	movs	r2, #0
 80076b2:	2180      	movs	r1, #128	; 0x80
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff ff49 	bl	800754c <SPI_WaitFlagStateUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d02d      	beq.n	800771c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c4:	f043 0220 	orr.w	r2, r3, #32
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e026      	b.n	800771e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	2101      	movs	r1, #1
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff ff36 	bl	800754c <SPI_WaitFlagStateUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01a      	beq.n	800771c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ea:	f043 0220 	orr.w	r2, r3, #32
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e013      	b.n	800771e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	2101      	movs	r1, #1
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f7ff ff23 	bl	800754c <SPI_WaitFlagStateUntilTimeout>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d007      	beq.n	800771c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007710:	f043 0220 	orr.w	r2, r3, #32
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e000      	b.n	800771e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af02      	add	r7, sp, #8
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007734:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <SPI_EndRxTxTransaction+0x7c>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1b      	ldr	r2, [pc, #108]	; (80077a8 <SPI_EndRxTxTransaction+0x80>)
 800773a:	fba2 2303 	umull	r2, r3, r2, r3
 800773e:	0d5b      	lsrs	r3, r3, #21
 8007740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007744:	fb02 f303 	mul.w	r3, r2, r3
 8007748:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007752:	d112      	bne.n	800777a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	2180      	movs	r1, #128	; 0x80
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f7ff fef4 	bl	800754c <SPI_WaitFlagStateUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d016      	beq.n	8007798 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776e:	f043 0220 	orr.w	r2, r3, #32
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e00f      	b.n	800779a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	3b01      	subs	r3, #1
 8007784:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007790:	2b80      	cmp	r3, #128	; 0x80
 8007792:	d0f2      	beq.n	800777a <SPI_EndRxTxTransaction+0x52>
 8007794:	e000      	b.n	8007798 <SPI_EndRxTxTransaction+0x70>
        break;
 8007796:	bf00      	nop
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20000048 	.word	0x20000048
 80077a8:	165e9f81 	.word	0x165e9f81

080077ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e041      	b.n	8007842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fa ffdc 	bl	8002790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f000 fa96 	bl	8007d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b01      	cmp	r3, #1
 800785e:	d001      	beq.n	8007864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e04e      	b.n	8007902 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0201 	orr.w	r2, r2, #1
 800787a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a23      	ldr	r2, [pc, #140]	; (8007910 <HAL_TIM_Base_Start_IT+0xc4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d022      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x80>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788e:	d01d      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x80>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1f      	ldr	r2, [pc, #124]	; (8007914 <HAL_TIM_Base_Start_IT+0xc8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d018      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x80>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1e      	ldr	r2, [pc, #120]	; (8007918 <HAL_TIM_Base_Start_IT+0xcc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d013      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x80>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a1c      	ldr	r2, [pc, #112]	; (800791c <HAL_TIM_Base_Start_IT+0xd0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00e      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x80>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1b      	ldr	r2, [pc, #108]	; (8007920 <HAL_TIM_Base_Start_IT+0xd4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x80>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a19      	ldr	r2, [pc, #100]	; (8007924 <HAL_TIM_Base_Start_IT+0xd8>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_TIM_Base_Start_IT+0x80>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a18      	ldr	r2, [pc, #96]	; (8007928 <HAL_TIM_Base_Start_IT+0xdc>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d111      	bne.n	80078f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b06      	cmp	r3, #6
 80078dc:	d010      	beq.n	8007900 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0201 	orr.w	r2, r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ee:	e007      	b.n	8007900 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40010000 	.word	0x40010000
 8007914:	40000400 	.word	0x40000400
 8007918:	40000800 	.word	0x40000800
 800791c:	40000c00 	.word	0x40000c00
 8007920:	40010400 	.word	0x40010400
 8007924:	40014000 	.word	0x40014000
 8007928:	40001800 	.word	0x40001800

0800792c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b02      	cmp	r3, #2
 8007940:	d122      	bne.n	8007988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b02      	cmp	r3, #2
 800794e:	d11b      	bne.n	8007988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0202 	mvn.w	r2, #2
 8007958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f9b5 	bl	8007cde <HAL_TIM_IC_CaptureCallback>
 8007974:	e005      	b.n	8007982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f9a7 	bl	8007cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f9b8 	bl	8007cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b04      	cmp	r3, #4
 8007994:	d122      	bne.n	80079dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b04      	cmp	r3, #4
 80079a2:	d11b      	bne.n	80079dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0204 	mvn.w	r2, #4
 80079ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2202      	movs	r2, #2
 80079b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f98b 	bl	8007cde <HAL_TIM_IC_CaptureCallback>
 80079c8:	e005      	b.n	80079d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f97d 	bl	8007cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f98e 	bl	8007cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d122      	bne.n	8007a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f003 0308 	and.w	r3, r3, #8
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d11b      	bne.n	8007a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0208 	mvn.w	r2, #8
 8007a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2204      	movs	r2, #4
 8007a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f961 	bl	8007cde <HAL_TIM_IC_CaptureCallback>
 8007a1c:	e005      	b.n	8007a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f953 	bl	8007cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f964 	bl	8007cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d122      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f003 0310 	and.w	r3, r3, #16
 8007a48:	2b10      	cmp	r3, #16
 8007a4a:	d11b      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f06f 0210 	mvn.w	r2, #16
 8007a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f937 	bl	8007cde <HAL_TIM_IC_CaptureCallback>
 8007a70:	e005      	b.n	8007a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f929 	bl	8007cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f93a 	bl	8007cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d10e      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d107      	bne.n	8007ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0201 	mvn.w	r2, #1
 8007aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7f9 faba 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d10e      	bne.n	8007adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac8:	2b80      	cmp	r3, #128	; 0x80
 8007aca:	d107      	bne.n	8007adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fae0 	bl	800809c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae6:	2b40      	cmp	r3, #64	; 0x40
 8007ae8:	d10e      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	d107      	bne.n	8007b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f8ff 	bl	8007d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b20      	cmp	r3, #32
 8007b14:	d10e      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d107      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f06f 0220 	mvn.w	r2, #32
 8007b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 faaa 	bl	8008088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_TIM_ConfigClockSource+0x1c>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e0b4      	b.n	8007cc2 <HAL_TIM_ConfigClockSource+0x186>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b90:	d03e      	beq.n	8007c10 <HAL_TIM_ConfigClockSource+0xd4>
 8007b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b96:	f200 8087 	bhi.w	8007ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8007b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9e:	f000 8086 	beq.w	8007cae <HAL_TIM_ConfigClockSource+0x172>
 8007ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba6:	d87f      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba8:	2b70      	cmp	r3, #112	; 0x70
 8007baa:	d01a      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0xa6>
 8007bac:	2b70      	cmp	r3, #112	; 0x70
 8007bae:	d87b      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb0:	2b60      	cmp	r3, #96	; 0x60
 8007bb2:	d050      	beq.n	8007c56 <HAL_TIM_ConfigClockSource+0x11a>
 8007bb4:	2b60      	cmp	r3, #96	; 0x60
 8007bb6:	d877      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb8:	2b50      	cmp	r3, #80	; 0x50
 8007bba:	d03c      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0xfa>
 8007bbc:	2b50      	cmp	r3, #80	; 0x50
 8007bbe:	d873      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc0:	2b40      	cmp	r3, #64	; 0x40
 8007bc2:	d058      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0x13a>
 8007bc4:	2b40      	cmp	r3, #64	; 0x40
 8007bc6:	d86f      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc8:	2b30      	cmp	r3, #48	; 0x30
 8007bca:	d064      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x15a>
 8007bcc:	2b30      	cmp	r3, #48	; 0x30
 8007bce:	d86b      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d060      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x15a>
 8007bd4:	2b20      	cmp	r3, #32
 8007bd6:	d867      	bhi.n	8007ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d05c      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x15a>
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d05a      	beq.n	8007c96 <HAL_TIM_ConfigClockSource+0x15a>
 8007be0:	e062      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	6899      	ldr	r1, [r3, #8]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f000 f9ad 	bl	8007f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	609a      	str	r2, [r3, #8]
      break;
 8007c0e:	e04f      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	6899      	ldr	r1, [r3, #8]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f000 f996 	bl	8007f50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c32:	609a      	str	r2, [r3, #8]
      break;
 8007c34:	e03c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6859      	ldr	r1, [r3, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	461a      	mov	r2, r3
 8007c44:	f000 f90a 	bl	8007e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2150      	movs	r1, #80	; 0x50
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 f963 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007c54:	e02c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	6859      	ldr	r1, [r3, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f000 f929 	bl	8007eba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2160      	movs	r1, #96	; 0x60
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 f953 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007c74:	e01c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6859      	ldr	r1, [r3, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f000 f8ea 	bl	8007e5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2140      	movs	r1, #64	; 0x40
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 f943 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007c94:	e00c      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	f000 f93a 	bl	8007f1a <TIM_ITRx_SetConfig>
      break;
 8007ca6:	e003      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cac:	e000      	b.n	8007cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a40      	ldr	r2, [pc, #256]	; (8007e30 <TIM_Base_SetConfig+0x114>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d013      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3a:	d00f      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a3d      	ldr	r2, [pc, #244]	; (8007e34 <TIM_Base_SetConfig+0x118>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a3c      	ldr	r2, [pc, #240]	; (8007e38 <TIM_Base_SetConfig+0x11c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a3b      	ldr	r2, [pc, #236]	; (8007e3c <TIM_Base_SetConfig+0x120>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a3a      	ldr	r2, [pc, #232]	; (8007e40 <TIM_Base_SetConfig+0x124>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d108      	bne.n	8007d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a2f      	ldr	r2, [pc, #188]	; (8007e30 <TIM_Base_SetConfig+0x114>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d02b      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7c:	d027      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a2c      	ldr	r2, [pc, #176]	; (8007e34 <TIM_Base_SetConfig+0x118>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d023      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a2b      	ldr	r2, [pc, #172]	; (8007e38 <TIM_Base_SetConfig+0x11c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d01f      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <TIM_Base_SetConfig+0x120>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d01b      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a29      	ldr	r2, [pc, #164]	; (8007e40 <TIM_Base_SetConfig+0x124>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d017      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a28      	ldr	r2, [pc, #160]	; (8007e44 <TIM_Base_SetConfig+0x128>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a27      	ldr	r2, [pc, #156]	; (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00f      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a26      	ldr	r2, [pc, #152]	; (8007e4c <TIM_Base_SetConfig+0x130>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d00b      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a25      	ldr	r2, [pc, #148]	; (8007e50 <TIM_Base_SetConfig+0x134>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d007      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a24      	ldr	r2, [pc, #144]	; (8007e54 <TIM_Base_SetConfig+0x138>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d003      	beq.n	8007dce <TIM_Base_SetConfig+0xb2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a23      	ldr	r2, [pc, #140]	; (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d108      	bne.n	8007de0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <TIM_Base_SetConfig+0x114>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d003      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a0c      	ldr	r2, [pc, #48]	; (8007e40 <TIM_Base_SetConfig+0x124>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d103      	bne.n	8007e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	691a      	ldr	r2, [r3, #16]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	615a      	str	r2, [r3, #20]
}
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40000400 	.word	0x40000400
 8007e38:	40000800 	.word	0x40000800
 8007e3c:	40000c00 	.word	0x40000c00
 8007e40:	40010400 	.word	0x40010400
 8007e44:	40014000 	.word	0x40014000
 8007e48:	40014400 	.word	0x40014400
 8007e4c:	40014800 	.word	0x40014800
 8007e50:	40001800 	.word	0x40001800
 8007e54:	40001c00 	.word	0x40001c00
 8007e58:	40002000 	.word	0x40002000

08007e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f023 0201 	bic.w	r2, r3, #1
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f023 030a 	bic.w	r3, r3, #10
 8007e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	621a      	str	r2, [r3, #32]
}
 8007eae:	bf00      	nop
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b087      	sub	sp, #28
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f023 0210 	bic.w	r2, r3, #16
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	031b      	lsls	r3, r3, #12
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	621a      	str	r2, [r3, #32]
}
 8007f0e:	bf00      	nop
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f043 0307 	orr.w	r3, r3, #7
 8007f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	609a      	str	r2, [r3, #8]
}
 8007f44:	bf00      	nop
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	021a      	lsls	r2, r3, #8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	609a      	str	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e05a      	b.n	800805e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a21      	ldr	r2, [pc, #132]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d022      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff4:	d01d      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1d      	ldr	r2, [pc, #116]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d018      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d013      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1a      	ldr	r2, [pc, #104]	; (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00e      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a18      	ldr	r2, [pc, #96]	; (800807c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d009      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a17      	ldr	r2, [pc, #92]	; (8008080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d004      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a15      	ldr	r2, [pc, #84]	; (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d10c      	bne.n	800804c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	4313      	orrs	r3, r2
 8008042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40010000 	.word	0x40010000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00
 800807c:	40010400 	.word	0x40010400
 8008080:	40014000 	.word	0x40014000
 8008084:	40001800 	.word	0x40001800

08008088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e03f      	b.n	8008142 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fa fb7c 	bl	80027d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2224      	movs	r2, #36	; 0x24
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f829 	bl	800814c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695a      	ldr	r2, [r3, #20]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	b09f      	sub	sp, #124	; 0x7c
 8008152:	af00      	add	r7, sp, #0
 8008154:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008162:	68d9      	ldr	r1, [r3, #12]
 8008164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	ea40 0301 	orr.w	r3, r0, r1
 800816c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800816e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	431a      	orrs	r2, r3
 8008178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	431a      	orrs	r2, r3
 800817e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	4313      	orrs	r3, r2
 8008184:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008190:	f021 010c 	bic.w	r1, r1, #12
 8008194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800819a:	430b      	orrs	r3, r1
 800819c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800819e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80081a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081aa:	6999      	ldr	r1, [r3, #24]
 80081ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	ea40 0301 	orr.w	r3, r0, r1
 80081b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	4bc5      	ldr	r3, [pc, #788]	; (80084d0 <UART_SetConfig+0x384>)
 80081bc:	429a      	cmp	r2, r3
 80081be:	d004      	beq.n	80081ca <UART_SetConfig+0x7e>
 80081c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	4bc3      	ldr	r3, [pc, #780]	; (80084d4 <UART_SetConfig+0x388>)
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d103      	bne.n	80081d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081ca:	f7fe fa8d 	bl	80066e8 <HAL_RCC_GetPCLK2Freq>
 80081ce:	6778      	str	r0, [r7, #116]	; 0x74
 80081d0:	e002      	b.n	80081d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081d2:	f7fe fa75 	bl	80066c0 <HAL_RCC_GetPCLK1Freq>
 80081d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081e0:	f040 80b6 	bne.w	8008350 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081e6:	461c      	mov	r4, r3
 80081e8:	f04f 0500 	mov.w	r5, #0
 80081ec:	4622      	mov	r2, r4
 80081ee:	462b      	mov	r3, r5
 80081f0:	1891      	adds	r1, r2, r2
 80081f2:	6439      	str	r1, [r7, #64]	; 0x40
 80081f4:	415b      	adcs	r3, r3
 80081f6:	647b      	str	r3, [r7, #68]	; 0x44
 80081f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081fc:	1912      	adds	r2, r2, r4
 80081fe:	eb45 0303 	adc.w	r3, r5, r3
 8008202:	f04f 0000 	mov.w	r0, #0
 8008206:	f04f 0100 	mov.w	r1, #0
 800820a:	00d9      	lsls	r1, r3, #3
 800820c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008210:	00d0      	lsls	r0, r2, #3
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	1911      	adds	r1, r2, r4
 8008218:	6639      	str	r1, [r7, #96]	; 0x60
 800821a:	416b      	adcs	r3, r5
 800821c:	667b      	str	r3, [r7, #100]	; 0x64
 800821e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	461a      	mov	r2, r3
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	1891      	adds	r1, r2, r2
 800822a:	63b9      	str	r1, [r7, #56]	; 0x38
 800822c:	415b      	adcs	r3, r3
 800822e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008234:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008238:	f7f7 ffda 	bl	80001f0 <__aeabi_uldivmod>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4ba5      	ldr	r3, [pc, #660]	; (80084d8 <UART_SetConfig+0x38c>)
 8008242:	fba3 2302 	umull	r2, r3, r3, r2
 8008246:	095b      	lsrs	r3, r3, #5
 8008248:	011e      	lsls	r6, r3, #4
 800824a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800824c:	461c      	mov	r4, r3
 800824e:	f04f 0500 	mov.w	r5, #0
 8008252:	4622      	mov	r2, r4
 8008254:	462b      	mov	r3, r5
 8008256:	1891      	adds	r1, r2, r2
 8008258:	6339      	str	r1, [r7, #48]	; 0x30
 800825a:	415b      	adcs	r3, r3
 800825c:	637b      	str	r3, [r7, #52]	; 0x34
 800825e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008262:	1912      	adds	r2, r2, r4
 8008264:	eb45 0303 	adc.w	r3, r5, r3
 8008268:	f04f 0000 	mov.w	r0, #0
 800826c:	f04f 0100 	mov.w	r1, #0
 8008270:	00d9      	lsls	r1, r3, #3
 8008272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008276:	00d0      	lsls	r0, r2, #3
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	1911      	adds	r1, r2, r4
 800827e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008280:	416b      	adcs	r3, r5
 8008282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	461a      	mov	r2, r3
 800828a:	f04f 0300 	mov.w	r3, #0
 800828e:	1891      	adds	r1, r2, r2
 8008290:	62b9      	str	r1, [r7, #40]	; 0x28
 8008292:	415b      	adcs	r3, r3
 8008294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800829a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800829e:	f7f7 ffa7 	bl	80001f0 <__aeabi_uldivmod>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4b8c      	ldr	r3, [pc, #560]	; (80084d8 <UART_SetConfig+0x38c>)
 80082a8:	fba3 1302 	umull	r1, r3, r3, r2
 80082ac:	095b      	lsrs	r3, r3, #5
 80082ae:	2164      	movs	r1, #100	; 0x64
 80082b0:	fb01 f303 	mul.w	r3, r1, r3
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	3332      	adds	r3, #50	; 0x32
 80082ba:	4a87      	ldr	r2, [pc, #540]	; (80084d8 <UART_SetConfig+0x38c>)
 80082bc:	fba2 2303 	umull	r2, r3, r2, r3
 80082c0:	095b      	lsrs	r3, r3, #5
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082c8:	441e      	add	r6, r3
 80082ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082cc:	4618      	mov	r0, r3
 80082ce:	f04f 0100 	mov.w	r1, #0
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	1894      	adds	r4, r2, r2
 80082d8:	623c      	str	r4, [r7, #32]
 80082da:	415b      	adcs	r3, r3
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
 80082de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082e2:	1812      	adds	r2, r2, r0
 80082e4:	eb41 0303 	adc.w	r3, r1, r3
 80082e8:	f04f 0400 	mov.w	r4, #0
 80082ec:	f04f 0500 	mov.w	r5, #0
 80082f0:	00dd      	lsls	r5, r3, #3
 80082f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082f6:	00d4      	lsls	r4, r2, #3
 80082f8:	4622      	mov	r2, r4
 80082fa:	462b      	mov	r3, r5
 80082fc:	1814      	adds	r4, r2, r0
 80082fe:	653c      	str	r4, [r7, #80]	; 0x50
 8008300:	414b      	adcs	r3, r1
 8008302:	657b      	str	r3, [r7, #84]	; 0x54
 8008304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	461a      	mov	r2, r3
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	1891      	adds	r1, r2, r2
 8008310:	61b9      	str	r1, [r7, #24]
 8008312:	415b      	adcs	r3, r3
 8008314:	61fb      	str	r3, [r7, #28]
 8008316:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800831a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800831e:	f7f7 ff67 	bl	80001f0 <__aeabi_uldivmod>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4b6c      	ldr	r3, [pc, #432]	; (80084d8 <UART_SetConfig+0x38c>)
 8008328:	fba3 1302 	umull	r1, r3, r3, r2
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	2164      	movs	r1, #100	; 0x64
 8008330:	fb01 f303 	mul.w	r3, r1, r3
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	3332      	adds	r3, #50	; 0x32
 800833a:	4a67      	ldr	r2, [pc, #412]	; (80084d8 <UART_SetConfig+0x38c>)
 800833c:	fba2 2303 	umull	r2, r3, r2, r3
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	f003 0207 	and.w	r2, r3, #7
 8008346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4432      	add	r2, r6
 800834c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800834e:	e0b9      	b.n	80084c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008352:	461c      	mov	r4, r3
 8008354:	f04f 0500 	mov.w	r5, #0
 8008358:	4622      	mov	r2, r4
 800835a:	462b      	mov	r3, r5
 800835c:	1891      	adds	r1, r2, r2
 800835e:	6139      	str	r1, [r7, #16]
 8008360:	415b      	adcs	r3, r3
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008368:	1912      	adds	r2, r2, r4
 800836a:	eb45 0303 	adc.w	r3, r5, r3
 800836e:	f04f 0000 	mov.w	r0, #0
 8008372:	f04f 0100 	mov.w	r1, #0
 8008376:	00d9      	lsls	r1, r3, #3
 8008378:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800837c:	00d0      	lsls	r0, r2, #3
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	eb12 0804 	adds.w	r8, r2, r4
 8008386:	eb43 0905 	adc.w	r9, r3, r5
 800838a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	4618      	mov	r0, r3
 8008390:	f04f 0100 	mov.w	r1, #0
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	008b      	lsls	r3, r1, #2
 800839e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083a2:	0082      	lsls	r2, r0, #2
 80083a4:	4640      	mov	r0, r8
 80083a6:	4649      	mov	r1, r9
 80083a8:	f7f7 ff22 	bl	80001f0 <__aeabi_uldivmod>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4b49      	ldr	r3, [pc, #292]	; (80084d8 <UART_SetConfig+0x38c>)
 80083b2:	fba3 2302 	umull	r2, r3, r3, r2
 80083b6:	095b      	lsrs	r3, r3, #5
 80083b8:	011e      	lsls	r6, r3, #4
 80083ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083bc:	4618      	mov	r0, r3
 80083be:	f04f 0100 	mov.w	r1, #0
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	1894      	adds	r4, r2, r2
 80083c8:	60bc      	str	r4, [r7, #8]
 80083ca:	415b      	adcs	r3, r3
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083d2:	1812      	adds	r2, r2, r0
 80083d4:	eb41 0303 	adc.w	r3, r1, r3
 80083d8:	f04f 0400 	mov.w	r4, #0
 80083dc:	f04f 0500 	mov.w	r5, #0
 80083e0:	00dd      	lsls	r5, r3, #3
 80083e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083e6:	00d4      	lsls	r4, r2, #3
 80083e8:	4622      	mov	r2, r4
 80083ea:	462b      	mov	r3, r5
 80083ec:	1814      	adds	r4, r2, r0
 80083ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80083f0:	414b      	adcs	r3, r1
 80083f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f04f 0100 	mov.w	r1, #0
 80083fe:	f04f 0200 	mov.w	r2, #0
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	008b      	lsls	r3, r1, #2
 8008408:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800840c:	0082      	lsls	r2, r0, #2
 800840e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008412:	f7f7 feed 	bl	80001f0 <__aeabi_uldivmod>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4b2f      	ldr	r3, [pc, #188]	; (80084d8 <UART_SetConfig+0x38c>)
 800841c:	fba3 1302 	umull	r1, r3, r3, r2
 8008420:	095b      	lsrs	r3, r3, #5
 8008422:	2164      	movs	r1, #100	; 0x64
 8008424:	fb01 f303 	mul.w	r3, r1, r3
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	3332      	adds	r3, #50	; 0x32
 800842e:	4a2a      	ldr	r2, [pc, #168]	; (80084d8 <UART_SetConfig+0x38c>)
 8008430:	fba2 2303 	umull	r2, r3, r2, r3
 8008434:	095b      	lsrs	r3, r3, #5
 8008436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800843a:	441e      	add	r6, r3
 800843c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800843e:	4618      	mov	r0, r3
 8008440:	f04f 0100 	mov.w	r1, #0
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	1894      	adds	r4, r2, r2
 800844a:	603c      	str	r4, [r7, #0]
 800844c:	415b      	adcs	r3, r3
 800844e:	607b      	str	r3, [r7, #4]
 8008450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008454:	1812      	adds	r2, r2, r0
 8008456:	eb41 0303 	adc.w	r3, r1, r3
 800845a:	f04f 0400 	mov.w	r4, #0
 800845e:	f04f 0500 	mov.w	r5, #0
 8008462:	00dd      	lsls	r5, r3, #3
 8008464:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008468:	00d4      	lsls	r4, r2, #3
 800846a:	4622      	mov	r2, r4
 800846c:	462b      	mov	r3, r5
 800846e:	eb12 0a00 	adds.w	sl, r2, r0
 8008472:	eb43 0b01 	adc.w	fp, r3, r1
 8008476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4618      	mov	r0, r3
 800847c:	f04f 0100 	mov.w	r1, #0
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	008b      	lsls	r3, r1, #2
 800848a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800848e:	0082      	lsls	r2, r0, #2
 8008490:	4650      	mov	r0, sl
 8008492:	4659      	mov	r1, fp
 8008494:	f7f7 feac 	bl	80001f0 <__aeabi_uldivmod>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <UART_SetConfig+0x38c>)
 800849e:	fba3 1302 	umull	r1, r3, r3, r2
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	2164      	movs	r1, #100	; 0x64
 80084a6:	fb01 f303 	mul.w	r3, r1, r3
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	011b      	lsls	r3, r3, #4
 80084ae:	3332      	adds	r3, #50	; 0x32
 80084b0:	4a09      	ldr	r2, [pc, #36]	; (80084d8 <UART_SetConfig+0x38c>)
 80084b2:	fba2 2303 	umull	r2, r3, r2, r3
 80084b6:	095b      	lsrs	r3, r3, #5
 80084b8:	f003 020f 	and.w	r2, r3, #15
 80084bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4432      	add	r2, r6
 80084c2:	609a      	str	r2, [r3, #8]
}
 80084c4:	bf00      	nop
 80084c6:	377c      	adds	r7, #124	; 0x7c
 80084c8:	46bd      	mov	sp, r7
 80084ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ce:	bf00      	nop
 80084d0:	40011000 	.word	0x40011000
 80084d4:	40011400 	.word	0x40011400
 80084d8:	51eb851f 	.word	0x51eb851f

080084dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d029      	beq.n	800854a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008502:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008506:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008510:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008516:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800851c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008522:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008528:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800852e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008534:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800853a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	4313      	orrs	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	e034      	b.n	80085b4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008556:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008560:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008566:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800857a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800857e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008588:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800858e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008594:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800859a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80085a0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b087      	sub	sp, #28
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d02e      	beq.n	800863a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80085e8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80085f8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	3b01      	subs	r3, #1
 8008600:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008602:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	3b01      	subs	r3, #1
 800860a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800860c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	3b01      	subs	r3, #1
 8008614:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008616:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	3b01      	subs	r3, #1
 800861e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008620:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	3b01      	subs	r3, #1
 8008628:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800862a:	4313      	orrs	r3, r2
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	609a      	str	r2, [r3, #8]
 8008638:	e03b      	b.n	80086b2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008646:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800864a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	3b01      	subs	r3, #1
 8008652:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	3b01      	subs	r3, #1
 800865a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800865c:	4313      	orrs	r3, r2
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008670:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	3b01      	subs	r3, #1
 800867e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008680:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	3b01      	subs	r3, #1
 8008688:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800868a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	3b01      	subs	r3, #1
 8008692:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008694:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	3b01      	subs	r3, #1
 800869c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800869e:	4313      	orrs	r3, r2
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80086dc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80086e6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80086ee:	4313      	orrs	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80086f8:	f7fa fa5a 	bl	8002bb0 <HAL_GetTick>
 80086fc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80086fe:	e010      	b.n	8008722 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008706:	d00c      	beq.n	8008722 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d007      	beq.n	800871e <FMC_SDRAM_SendCommand+0x5e>
 800870e:	f7fa fa4f 	bl	8002bb0 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d201      	bcs.n	8008722 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e006      	b.n	8008730 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b20      	cmp	r3, #32
 800872c:	d0e8      	beq.n	8008700 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	695a      	ldr	r2, [r3, #20]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	431a      	orrs	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f043 0201 	orr.w	r2, r3, #1
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f023 0201 	bic.w	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
	...

080087a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	019b      	lsls	r3, r3, #6
 80087b6:	f043 0220 	orr.w	r2, r3, #32
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3301      	adds	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	4a08      	ldr	r2, [pc, #32]	; (80087e8 <USB_FlushTxFifo+0x44>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d901      	bls.n	80087ce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e006      	b.n	80087dc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d0f1      	beq.n	80087be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	00030d40 	.word	0x00030d40

080087ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2210      	movs	r2, #16
 80087fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	4a08      	ldr	r2, [pc, #32]	; (8008828 <USB_FlushRxFifo+0x3c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d901      	bls.n	800880e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e006      	b.n	800881c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	2b10      	cmp	r3, #16
 8008818:	d0f1      	beq.n	80087fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	00030d40 	.word	0x00030d40

0800882c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800882c:	b480      	push	{r7}
 800882e:	b08b      	sub	sp, #44	; 0x2c
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4613      	mov	r3, r2
 8008838:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008842:	88fb      	ldrh	r3, [r7, #6]
 8008844:	089b      	lsrs	r3, r3, #2
 8008846:	b29b      	uxth	r3, r3
 8008848:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800884a:	88fb      	ldrh	r3, [r7, #6]
 800884c:	f003 0303 	and.w	r3, r3, #3
 8008850:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008852:	2300      	movs	r3, #0
 8008854:	623b      	str	r3, [r7, #32]
 8008856:	e014      	b.n	8008882 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	601a      	str	r2, [r3, #0]
    pDest++;
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	3301      	adds	r3, #1
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	3301      	adds	r3, #1
 800886e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008872:	3301      	adds	r3, #1
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	3301      	adds	r3, #1
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	3301      	adds	r3, #1
 8008880:	623b      	str	r3, [r7, #32]
 8008882:	6a3a      	ldr	r2, [r7, #32]
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	429a      	cmp	r2, r3
 8008888:	d3e6      	bcc.n	8008858 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800888a:	8bfb      	ldrh	r3, [r7, #30]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01e      	beq.n	80088ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800889a:	461a      	mov	r2, r3
 800889c:	f107 0310 	add.w	r3, r7, #16
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	6a3b      	ldr	r3, [r7, #32]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	701a      	strb	r2, [r3, #0]
      i++;
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	3301      	adds	r3, #1
 80088ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	3301      	adds	r3, #1
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80088c2:	8bfb      	ldrh	r3, [r7, #30]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80088c8:	8bfb      	ldrh	r3, [r7, #30]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1ea      	bne.n	80088a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	372c      	adds	r7, #44	; 0x2c
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	4013      	ands	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088f4:	68fb      	ldr	r3, [r7, #12]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	f003 0301 	and.w	r3, r3, #1
}
 8008912:	4618      	mov	r0, r3
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800891e:	b480      	push	{r7}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800893c:	f023 0303 	bic.w	r3, r3, #3
 8008940:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	78fb      	ldrb	r3, [r7, #3]
 800894c:	f003 0303 	and.w	r3, r3, #3
 8008950:	68f9      	ldr	r1, [r7, #12]
 8008952:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008956:	4313      	orrs	r3, r2
 8008958:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d107      	bne.n	8008970 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008966:	461a      	mov	r2, r3
 8008968:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800896c:	6053      	str	r3, [r2, #4]
 800896e:	e009      	b.n	8008984 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d106      	bne.n	8008984 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800897c:	461a      	mov	r2, r3
 800897e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008982:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008992:	b480      	push	{r7}
 8008994:	b085      	sub	sp, #20
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	b29b      	uxth	r3, r3
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b089      	sub	sp, #36	; 0x24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	0c9b      	lsrs	r3, r3, #18
 80089dc:	f003 0303 	and.w	r3, r3, #3
 80089e0:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	0fdb      	lsrs	r3, r3, #31
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 0320 	and.w	r3, r3, #32
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	d104      	bne.n	8008a0e <USB_HC_Halt+0x5a>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e0e8      	b.n	8008be0 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <USB_HC_Halt+0x66>
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d173      	bne.n	8008b02 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	0151      	lsls	r1, r2, #5
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	440a      	add	r2, r1
 8008a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a38:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 80cb 	bne.w	8008bde <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d143      	bne.n	8008adc <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	0151      	lsls	r1, r2, #5
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	440a      	add	r2, r1
 8008a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a72:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	0151      	lsls	r1, r2, #5
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	440a      	add	r2, r1
 8008a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a92:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ab2:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	61fb      	str	r3, [r7, #28]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ac0:	d81d      	bhi.n	8008afe <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	015a      	lsls	r2, r3, #5
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ad8:	d0ec      	beq.n	8008ab4 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ada:	e080      	b.n	8008bde <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	0151      	lsls	r1, r2, #5
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	440a      	add	r2, r1
 8008af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008afa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008afc:	e06f      	b.n	8008bde <USB_HC_Halt+0x22a>
            break;
 8008afe:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b00:	e06d      	b.n	8008bde <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	015a      	lsls	r2, r3, #5
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	4413      	add	r3, r2
 8008b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	0151      	lsls	r1, r2, #5
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	440a      	add	r2, r1
 8008b18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b20:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d143      	bne.n	8008bba <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	0151      	lsls	r1, r2, #5
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	440a      	add	r2, r1
 8008b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b50:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b70:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b90:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	3301      	adds	r3, #1
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b9e:	d81d      	bhi.n	8008bdc <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bb6:	d0ec      	beq.n	8008b92 <USB_HC_Halt+0x1de>
 8008bb8:	e011      	b.n	8008bde <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	0151      	lsls	r1, r2, #5
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	440a      	add	r2, r1
 8008bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	e000      	b.n	8008bde <USB_HC_Halt+0x22a>
          break;
 8008bdc:	bf00      	nop
    }
  }

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3724      	adds	r7, #36	; 0x24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7ff fdbf 	bl	8008780 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008c02:	2110      	movs	r1, #16
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff fdcd 	bl	80087a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff fdee 	bl	80087ec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	e01f      	b.n	8008c56 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c34:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c3c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	3301      	adds	r3, #1
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b0f      	cmp	r3, #15
 8008c5a:	d9dc      	bls.n	8008c16 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	e034      	b.n	8008ccc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c78:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c80:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c88:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c96:	461a      	mov	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	617b      	str	r3, [r7, #20]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ca8:	d80c      	bhi.n	8008cc4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cc0:	d0ec      	beq.n	8008c9c <USB_StopHost+0xb0>
 8008cc2:	e000      	b.n	8008cc6 <USB_StopHost+0xda>
        break;
 8008cc4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	613b      	str	r3, [r7, #16]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	2b0f      	cmp	r3, #15
 8008cd0:	d9c7      	bls.n	8008c62 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cde:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ce6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff fd38 	bl	800875e <USB_EnableGlobalInt>

  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f804 	bl	8008d1c <USBH_HandleSof>
}
 8008d14:	bf00      	nop
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b0b      	cmp	r3, #11
 8008d2c:	d10a      	bne.n	8008d44 <USBH_HandleSof+0x28>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
  }
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d70:	2200      	movs	r2, #0
 8008d72:	4619      	mov	r1, r3
 8008d74:	f000 f8ae 	bl	8008ed4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008d78:	bf00      	nop
}
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008d90:	bf00      	nop
}
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	f000 f87e 	bl	8008ed4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 f912 	bl	800a02c <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	791b      	ldrb	r3, [r3, #4]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f830 	bl	8008e74 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	795b      	ldrb	r3, [r3, #5]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f82a 	bl	8008e74 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e34:	2200      	movs	r2, #0
 8008e36:	4619      	mov	r1, r3
 8008e38:	f000 f84c 	bl	8008ed4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e62:	2200      	movs	r2, #0
 8008e64:	4619      	mov	r1, r3
 8008e66:	f000 f835 	bl	8008ed4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	2b0a      	cmp	r3, #10
 8008e84:	d80d      	bhi.n	8008ea2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	33e0      	adds	r3, #224	; 0xe0
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	78fb      	ldrb	r3, [r7, #3]
 8008e94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e98:	6879      	ldr	r1, [r7, #4]
 8008e9a:	33e0      	adds	r3, #224	; 0xe0
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eb6:	f3ef 8305 	mrs	r3, IPSR
 8008eba:	607b      	str	r3, [r7, #4]
  return(result);
 8008ebc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bf14      	ite	ne
 8008ec2:	2301      	movne	r3, #1
 8008ec4:	2300      	moveq	r3, #0
 8008ec6:	b2db      	uxtb	r3, r3
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <osMessagePut+0x1e>
    ticks = 1;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008ef2:	f7ff ffdd 	bl	8008eb0 <inHandlerMode>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d018      	beq.n	8008f2e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008efc:	f107 0210 	add.w	r2, r7, #16
 8008f00:	f107 0108 	add.w	r1, r7, #8
 8008f04:	2300      	movs	r3, #0
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f9aa 	bl	8009260 <xQueueGenericSendFromISR>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d001      	beq.n	8008f16 <osMessagePut+0x42>
      return osErrorOS;
 8008f12:	23ff      	movs	r3, #255	; 0xff
 8008f14:	e018      	b.n	8008f48 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d014      	beq.n	8008f46 <osMessagePut+0x72>
 8008f1c:	4b0c      	ldr	r3, [pc, #48]	; (8008f50 <osMessagePut+0x7c>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	e00b      	b.n	8008f46 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008f2e:	f107 0108 	add.w	r1, r7, #8
 8008f32:	2300      	movs	r3, #0
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 f894 	bl	8009064 <xQueueGenericSend>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d001      	beq.n	8008f46 <osMessagePut+0x72>
      return osErrorOS;
 8008f42:	23ff      	movs	r3, #255	; 0xff
 8008f44:	e000      	b.n	8008f48 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	e000ed04 	.word	0xe000ed04

08008f54 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689a      	ldr	r2, [r3, #8]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	601a      	str	r2, [r3, #0]
}
 8008f90:	bf00      	nop
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fb2:	d103      	bne.n	8008fbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	e00c      	b.n	8008fd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	e002      	b.n	8008fca <vListInsert+0x2e>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d2f6      	bcs.n	8008fc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	601a      	str	r2, [r3, #0]
}
 8009002:	bf00      	nop
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800900e:	b480      	push	{r7}
 8009010:	b085      	sub	sp, #20
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	6892      	ldr	r2, [r2, #8]
 8009024:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	6852      	ldr	r2, [r2, #4]
 800902e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	429a      	cmp	r2, r3
 8009038:	d103      	bne.n	8009042 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	1e5a      	subs	r2, r3, #1
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
	...

08009064 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08e      	sub	sp, #56	; 0x38
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
 8009070:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009072:	2300      	movs	r3, #0
 8009074:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10a      	bne.n	8009096 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d103      	bne.n	80090a4 <xQueueGenericSend+0x40>
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <xQueueGenericSend+0x44>
 80090a4:	2301      	movs	r3, #1
 80090a6:	e000      	b.n	80090aa <xQueueGenericSend+0x46>
 80090a8:	2300      	movs	r3, #0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10a      	bne.n	80090c4 <xQueueGenericSend+0x60>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090c0:	bf00      	nop
 80090c2:	e7fe      	b.n	80090c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d103      	bne.n	80090d2 <xQueueGenericSend+0x6e>
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <xQueueGenericSend+0x72>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <xQueueGenericSend+0x74>
 80090d6:	2300      	movs	r3, #0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10a      	bne.n	80090f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	623b      	str	r3, [r7, #32]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090f2:	f000 fd31 	bl	8009b58 <xTaskGetSchedulerState>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d102      	bne.n	8009102 <xQueueGenericSend+0x9e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <xQueueGenericSend+0xa2>
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <xQueueGenericSend+0xa4>
 8009106:	2300      	movs	r3, #0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <xQueueGenericSend+0xbe>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	61fb      	str	r3, [r7, #28]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009122:	f000 fe39 	bl	8009d98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800912e:	429a      	cmp	r2, r3
 8009130:	d302      	bcc.n	8009138 <xQueueGenericSend+0xd4>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d129      	bne.n	800918c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800913e:	f000 f92a 	bl	8009396 <prvCopyDataToQueue>
 8009142:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	2b00      	cmp	r3, #0
 800914a:	d010      	beq.n	800916e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	3324      	adds	r3, #36	; 0x24
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fbfb 	bl	800994c <xTaskRemoveFromEventList>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d013      	beq.n	8009184 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800915c:	4b3f      	ldr	r3, [pc, #252]	; (800925c <xQueueGenericSend+0x1f8>)
 800915e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	e00a      	b.n	8009184 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d007      	beq.n	8009184 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009174:	4b39      	ldr	r3, [pc, #228]	; (800925c <xQueueGenericSend+0x1f8>)
 8009176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009184:	f000 fe38 	bl	8009df8 <vPortExitCritical>
				return pdPASS;
 8009188:	2301      	movs	r3, #1
 800918a:	e063      	b.n	8009254 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d103      	bne.n	800919a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009192:	f000 fe31 	bl	8009df8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009196:	2300      	movs	r3, #0
 8009198:	e05c      	b.n	8009254 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800919a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919c:	2b00      	cmp	r3, #0
 800919e:	d106      	bne.n	80091ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091a0:	f107 0314 	add.w	r3, r7, #20
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 fc33 	bl	8009a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091aa:	2301      	movs	r3, #1
 80091ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091ae:	f000 fe23 	bl	8009df8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091b2:	f000 f9c5 	bl	8009540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091b6:	f000 fdef 	bl	8009d98 <vPortEnterCritical>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c6:	d103      	bne.n	80091d0 <xQueueGenericSend+0x16c>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091d6:	b25b      	sxtb	r3, r3
 80091d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091dc:	d103      	bne.n	80091e6 <xQueueGenericSend+0x182>
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091e6:	f000 fe07 	bl	8009df8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091ea:	1d3a      	adds	r2, r7, #4
 80091ec:	f107 0314 	add.w	r3, r7, #20
 80091f0:	4611      	mov	r1, r2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fc22 	bl	8009a3c <xTaskCheckForTimeOut>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d124      	bne.n	8009248 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009200:	f000 f985 	bl	800950e <prvIsQueueFull>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d018      	beq.n	800923c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	3310      	adds	r3, #16
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fb76 	bl	8009904 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800921a:	f000 f926 	bl	800946a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800921e:	f000 f99d 	bl	800955c <xTaskResumeAll>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	f47f af7c 	bne.w	8009122 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800922a:	4b0c      	ldr	r3, [pc, #48]	; (800925c <xQueueGenericSend+0x1f8>)
 800922c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	e772      	b.n	8009122 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800923c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800923e:	f000 f914 	bl	800946a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009242:	f000 f98b 	bl	800955c <xTaskResumeAll>
 8009246:	e76c      	b.n	8009122 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800924a:	f000 f90e 	bl	800946a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800924e:	f000 f985 	bl	800955c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009252:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009254:	4618      	mov	r0, r3
 8009256:	3738      	adds	r7, #56	; 0x38
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	e000ed04 	.word	0xe000ed04

08009260 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b090      	sub	sp, #64	; 0x40
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10a      	bne.n	800928e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800928a:	bf00      	nop
 800928c:	e7fe      	b.n	800928c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d103      	bne.n	800929c <xQueueGenericSendFromISR+0x3c>
 8009294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <xQueueGenericSendFromISR+0x40>
 800929c:	2301      	movs	r3, #1
 800929e:	e000      	b.n	80092a2 <xQueueGenericSendFromISR+0x42>
 80092a0:	2300      	movs	r3, #0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d103      	bne.n	80092ca <xQueueGenericSendFromISR+0x6a>
 80092c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d101      	bne.n	80092ce <xQueueGenericSendFromISR+0x6e>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <xQueueGenericSendFromISR+0x70>
 80092ce:	2300      	movs	r3, #0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	623b      	str	r3, [r7, #32]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ea:	f000 fe07 	bl	8009efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092ee:	f3ef 8211 	mrs	r2, BASEPRI
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	61fa      	str	r2, [r7, #28]
 8009304:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009306:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009308:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009312:	429a      	cmp	r2, r3
 8009314:	d302      	bcc.n	800931c <xQueueGenericSendFromISR+0xbc>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d12f      	bne.n	800937c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	68b9      	ldr	r1, [r7, #8]
 8009330:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009332:	f000 f830 	bl	8009396 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009336:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800933e:	d112      	bne.n	8009366 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	2b00      	cmp	r3, #0
 8009346:	d016      	beq.n	8009376 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	3324      	adds	r3, #36	; 0x24
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fafd 	bl	800994c <xTaskRemoveFromEventList>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00e      	beq.n	8009376 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00b      	beq.n	8009376 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	e007      	b.n	8009376 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009366:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800936a:	3301      	adds	r3, #1
 800936c:	b2db      	uxtb	r3, r3
 800936e:	b25a      	sxtb	r2, r3
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009376:	2301      	movs	r3, #1
 8009378:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800937a:	e001      	b.n	8009380 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800937c:	2300      	movs	r3, #0
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800938a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800938c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800938e:	4618      	mov	r0, r3
 8009390:	3740      	adds	r7, #64	; 0x40
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b086      	sub	sp, #24
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10d      	bne.n	80093d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d14d      	bne.n	8009458 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 fbe7 	bl	8009b94 <xTaskPriorityDisinherit>
 80093c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	609a      	str	r2, [r3, #8]
 80093ce:	e043      	b.n	8009458 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d119      	bne.n	800940a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6858      	ldr	r0, [r3, #4]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	461a      	mov	r2, r3
 80093e0:	68b9      	ldr	r1, [r7, #8]
 80093e2:	f000 fe8f 	bl	800a104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	441a      	add	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d32b      	bcc.n	8009458 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	605a      	str	r2, [r3, #4]
 8009408:	e026      	b.n	8009458 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68d8      	ldr	r0, [r3, #12]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	461a      	mov	r2, r3
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	f000 fe75 	bl	800a104 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009422:	425b      	negs	r3, r3
 8009424:	441a      	add	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d207      	bcs.n	8009446 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689a      	ldr	r2, [r3, #8]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943e:	425b      	negs	r3, r3
 8009440:	441a      	add	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d105      	bne.n	8009458 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	3b01      	subs	r3, #1
 8009456:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009460:	697b      	ldr	r3, [r7, #20]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3718      	adds	r7, #24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009472:	f000 fc91 	bl	8009d98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800947c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800947e:	e011      	b.n	80094a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	2b00      	cmp	r3, #0
 8009486:	d012      	beq.n	80094ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3324      	adds	r3, #36	; 0x24
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fa5d 	bl	800994c <xTaskRemoveFromEventList>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009498:	f000 fb32 	bl	8009b00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	3b01      	subs	r3, #1
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dce9      	bgt.n	8009480 <prvUnlockQueue+0x16>
 80094ac:	e000      	b.n	80094b0 <prvUnlockQueue+0x46>
					break;
 80094ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	22ff      	movs	r2, #255	; 0xff
 80094b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80094b8:	f000 fc9e 	bl	8009df8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094bc:	f000 fc6c 	bl	8009d98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094c8:	e011      	b.n	80094ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d012      	beq.n	80094f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	3310      	adds	r3, #16
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 fa38 	bl	800994c <xTaskRemoveFromEventList>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80094e2:	f000 fb0d 	bl	8009b00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dce9      	bgt.n	80094ca <prvUnlockQueue+0x60>
 80094f6:	e000      	b.n	80094fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	22ff      	movs	r2, #255	; 0xff
 80094fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009502:	f000 fc79 	bl	8009df8 <vPortExitCritical>
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009516:	f000 fc3f 	bl	8009d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009522:	429a      	cmp	r2, r3
 8009524:	d102      	bne.n	800952c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009526:	2301      	movs	r3, #1
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	e001      	b.n	8009530 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009530:	f000 fc62 	bl	8009df8 <vPortExitCritical>

	return xReturn;
 8009534:	68fb      	ldr	r3, [r7, #12]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009544:	4b04      	ldr	r3, [pc, #16]	; (8009558 <vTaskSuspendAll+0x18>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3301      	adds	r3, #1
 800954a:	4a03      	ldr	r2, [pc, #12]	; (8009558 <vTaskSuspendAll+0x18>)
 800954c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800954e:	bf00      	nop
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	20000300 	.word	0x20000300

0800955c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009566:	2300      	movs	r3, #0
 8009568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800956a:	4b41      	ldr	r3, [pc, #260]	; (8009670 <xTaskResumeAll+0x114>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <xTaskResumeAll+0x2c>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	603b      	str	r3, [r7, #0]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009588:	f000 fc06 	bl	8009d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800958c:	4b38      	ldr	r3, [pc, #224]	; (8009670 <xTaskResumeAll+0x114>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3b01      	subs	r3, #1
 8009592:	4a37      	ldr	r2, [pc, #220]	; (8009670 <xTaskResumeAll+0x114>)
 8009594:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009596:	4b36      	ldr	r3, [pc, #216]	; (8009670 <xTaskResumeAll+0x114>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d161      	bne.n	8009662 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800959e:	4b35      	ldr	r3, [pc, #212]	; (8009674 <xTaskResumeAll+0x118>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d05d      	beq.n	8009662 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095a6:	e02e      	b.n	8009606 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a8:	4b33      	ldr	r3, [pc, #204]	; (8009678 <xTaskResumeAll+0x11c>)
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3318      	adds	r3, #24
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff fd2a 	bl	800900e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3304      	adds	r3, #4
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff fd25 	bl	800900e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c8:	2201      	movs	r2, #1
 80095ca:	409a      	lsls	r2, r3
 80095cc:	4b2b      	ldr	r3, [pc, #172]	; (800967c <xTaskResumeAll+0x120>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	4a2a      	ldr	r2, [pc, #168]	; (800967c <xTaskResumeAll+0x120>)
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095da:	4613      	mov	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4413      	add	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4a27      	ldr	r2, [pc, #156]	; (8009680 <xTaskResumeAll+0x124>)
 80095e4:	441a      	add	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3304      	adds	r3, #4
 80095ea:	4619      	mov	r1, r3
 80095ec:	4610      	mov	r0, r2
 80095ee:	f7ff fcb1 	bl	8008f54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f6:	4b23      	ldr	r3, [pc, #140]	; (8009684 <xTaskResumeAll+0x128>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d302      	bcc.n	8009606 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009600:	4b21      	ldr	r3, [pc, #132]	; (8009688 <xTaskResumeAll+0x12c>)
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009606:	4b1c      	ldr	r3, [pc, #112]	; (8009678 <xTaskResumeAll+0x11c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1cc      	bne.n	80095a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009614:	f000 fa80 	bl	8009b18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009618:	4b1c      	ldr	r3, [pc, #112]	; (800968c <xTaskResumeAll+0x130>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d010      	beq.n	8009646 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009624:	f000 f836 	bl	8009694 <xTaskIncrementTick>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800962e:	4b16      	ldr	r3, [pc, #88]	; (8009688 <xTaskResumeAll+0x12c>)
 8009630:	2201      	movs	r2, #1
 8009632:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3b01      	subs	r3, #1
 8009638:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1f1      	bne.n	8009624 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009640:	4b12      	ldr	r3, [pc, #72]	; (800968c <xTaskResumeAll+0x130>)
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009646:	4b10      	ldr	r3, [pc, #64]	; (8009688 <xTaskResumeAll+0x12c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d009      	beq.n	8009662 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800964e:	2301      	movs	r3, #1
 8009650:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009652:	4b0f      	ldr	r3, [pc, #60]	; (8009690 <xTaskResumeAll+0x134>)
 8009654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009662:	f000 fbc9 	bl	8009df8 <vPortExitCritical>

	return xAlreadyYielded;
 8009666:	68bb      	ldr	r3, [r7, #8]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20000300 	.word	0x20000300
 8009674:	200002e0 	.word	0x200002e0
 8009678:	200002b8 	.word	0x200002b8
 800967c:	200002e8 	.word	0x200002e8
 8009680:	20000224 	.word	0x20000224
 8009684:	20000220 	.word	0x20000220
 8009688:	200002f4 	.word	0x200002f4
 800968c:	200002f0 	.word	0x200002f0
 8009690:	e000ed04 	.word	0xe000ed04

08009694 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800969a:	2300      	movs	r3, #0
 800969c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800969e:	4b4e      	ldr	r3, [pc, #312]	; (80097d8 <xTaskIncrementTick+0x144>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f040 808e 	bne.w	80097c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096a8:	4b4c      	ldr	r3, [pc, #304]	; (80097dc <xTaskIncrementTick+0x148>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3301      	adds	r3, #1
 80096ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096b0:	4a4a      	ldr	r2, [pc, #296]	; (80097dc <xTaskIncrementTick+0x148>)
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d120      	bne.n	80096fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80096bc:	4b48      	ldr	r3, [pc, #288]	; (80097e0 <xTaskIncrementTick+0x14c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00a      	beq.n	80096dc <xTaskIncrementTick+0x48>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	603b      	str	r3, [r7, #0]
}
 80096d8:	bf00      	nop
 80096da:	e7fe      	b.n	80096da <xTaskIncrementTick+0x46>
 80096dc:	4b40      	ldr	r3, [pc, #256]	; (80097e0 <xTaskIncrementTick+0x14c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	4b40      	ldr	r3, [pc, #256]	; (80097e4 <xTaskIncrementTick+0x150>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a3e      	ldr	r2, [pc, #248]	; (80097e0 <xTaskIncrementTick+0x14c>)
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	4a3e      	ldr	r2, [pc, #248]	; (80097e4 <xTaskIncrementTick+0x150>)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	4b3d      	ldr	r3, [pc, #244]	; (80097e8 <xTaskIncrementTick+0x154>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3301      	adds	r3, #1
 80096f6:	4a3c      	ldr	r2, [pc, #240]	; (80097e8 <xTaskIncrementTick+0x154>)
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	f000 fa0d 	bl	8009b18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096fe:	4b3b      	ldr	r3, [pc, #236]	; (80097ec <xTaskIncrementTick+0x158>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	429a      	cmp	r2, r3
 8009706:	d348      	bcc.n	800979a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009708:	4b35      	ldr	r3, [pc, #212]	; (80097e0 <xTaskIncrementTick+0x14c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d104      	bne.n	800971c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009712:	4b36      	ldr	r3, [pc, #216]	; (80097ec <xTaskIncrementTick+0x158>)
 8009714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009718:	601a      	str	r2, [r3, #0]
					break;
 800971a:	e03e      	b.n	800979a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971c:	4b30      	ldr	r3, [pc, #192]	; (80097e0 <xTaskIncrementTick+0x14c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	429a      	cmp	r2, r3
 8009732:	d203      	bcs.n	800973c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009734:	4a2d      	ldr	r2, [pc, #180]	; (80097ec <xTaskIncrementTick+0x158>)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800973a:	e02e      	b.n	800979a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	3304      	adds	r3, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff fc64 	bl	800900e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	2b00      	cmp	r3, #0
 800974c:	d004      	beq.n	8009758 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	3318      	adds	r3, #24
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff fc5b 	bl	800900e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	2201      	movs	r2, #1
 800975e:	409a      	lsls	r2, r3
 8009760:	4b23      	ldr	r3, [pc, #140]	; (80097f0 <xTaskIncrementTick+0x15c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4313      	orrs	r3, r2
 8009766:	4a22      	ldr	r2, [pc, #136]	; (80097f0 <xTaskIncrementTick+0x15c>)
 8009768:	6013      	str	r3, [r2, #0]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976e:	4613      	mov	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4a1f      	ldr	r2, [pc, #124]	; (80097f4 <xTaskIncrementTick+0x160>)
 8009778:	441a      	add	r2, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	3304      	adds	r3, #4
 800977e:	4619      	mov	r1, r3
 8009780:	4610      	mov	r0, r2
 8009782:	f7ff fbe7 	bl	8008f54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978a:	4b1b      	ldr	r3, [pc, #108]	; (80097f8 <xTaskIncrementTick+0x164>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009790:	429a      	cmp	r2, r3
 8009792:	d3b9      	bcc.n	8009708 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009798:	e7b6      	b.n	8009708 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800979a:	4b17      	ldr	r3, [pc, #92]	; (80097f8 <xTaskIncrementTick+0x164>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a0:	4914      	ldr	r1, [pc, #80]	; (80097f4 <xTaskIncrementTick+0x160>)
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	440b      	add	r3, r1
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d901      	bls.n	80097b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80097b2:	2301      	movs	r3, #1
 80097b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80097b6:	4b11      	ldr	r3, [pc, #68]	; (80097fc <xTaskIncrementTick+0x168>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d007      	beq.n	80097ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80097be:	2301      	movs	r3, #1
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	e004      	b.n	80097ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80097c4:	4b0e      	ldr	r3, [pc, #56]	; (8009800 <xTaskIncrementTick+0x16c>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3301      	adds	r3, #1
 80097ca:	4a0d      	ldr	r2, [pc, #52]	; (8009800 <xTaskIncrementTick+0x16c>)
 80097cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80097ce:	697b      	ldr	r3, [r7, #20]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20000300 	.word	0x20000300
 80097dc:	200002e4 	.word	0x200002e4
 80097e0:	200002b0 	.word	0x200002b0
 80097e4:	200002b4 	.word	0x200002b4
 80097e8:	200002f8 	.word	0x200002f8
 80097ec:	200002fc 	.word	0x200002fc
 80097f0:	200002e8 	.word	0x200002e8
 80097f4:	20000224 	.word	0x20000224
 80097f8:	20000220 	.word	0x20000220
 80097fc:	200002f4 	.word	0x200002f4
 8009800:	200002f0 	.word	0x200002f0

08009804 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800980a:	4b39      	ldr	r3, [pc, #228]	; (80098f0 <vTaskSwitchContext+0xec>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009812:	4b38      	ldr	r3, [pc, #224]	; (80098f4 <vTaskSwitchContext+0xf0>)
 8009814:	2201      	movs	r2, #1
 8009816:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009818:	e066      	b.n	80098e8 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800981a:	4b36      	ldr	r3, [pc, #216]	; (80098f4 <vTaskSwitchContext+0xf0>)
 800981c:	2200      	movs	r2, #0
 800981e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009820:	4b35      	ldr	r3, [pc, #212]	; (80098f8 <vTaskSwitchContext+0xf4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009826:	61fb      	str	r3, [r7, #28]
 8009828:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800982c:	61bb      	str	r3, [r7, #24]
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	429a      	cmp	r2, r3
 8009836:	d111      	bne.n	800985c <vTaskSwitchContext+0x58>
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	3304      	adds	r3, #4
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	429a      	cmp	r2, r3
 8009842:	d10b      	bne.n	800985c <vTaskSwitchContext+0x58>
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	3308      	adds	r3, #8
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	429a      	cmp	r2, r3
 800984e:	d105      	bne.n	800985c <vTaskSwitchContext+0x58>
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	330c      	adds	r3, #12
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69ba      	ldr	r2, [r7, #24]
 8009858:	429a      	cmp	r2, r3
 800985a:	d008      	beq.n	800986e <vTaskSwitchContext+0x6a>
 800985c:	4b26      	ldr	r3, [pc, #152]	; (80098f8 <vTaskSwitchContext+0xf4>)
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <vTaskSwitchContext+0xf4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3334      	adds	r3, #52	; 0x34
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f7f6 fe3d 	bl	80004e8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800986e:	4b23      	ldr	r3, [pc, #140]	; (80098fc <vTaskSwitchContext+0xf8>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	fab3 f383 	clz	r3, r3
 800987a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800987c:	7afb      	ldrb	r3, [r7, #11]
 800987e:	f1c3 031f 	rsb	r3, r3, #31
 8009882:	617b      	str	r3, [r7, #20]
 8009884:	491e      	ldr	r1, [pc, #120]	; (8009900 <vTaskSwitchContext+0xfc>)
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	4613      	mov	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	440b      	add	r3, r1
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <vTaskSwitchContext+0xaa>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	607b      	str	r3, [r7, #4]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <vTaskSwitchContext+0xa8>
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4a11      	ldr	r2, [pc, #68]	; (8009900 <vTaskSwitchContext+0xfc>)
 80098ba:	4413      	add	r3, r2
 80098bc:	613b      	str	r3, [r7, #16]
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	605a      	str	r2, [r3, #4]
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	3308      	adds	r3, #8
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d104      	bne.n	80098de <vTaskSwitchContext+0xda>
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	605a      	str	r2, [r3, #4]
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	4a04      	ldr	r2, [pc, #16]	; (80098f8 <vTaskSwitchContext+0xf4>)
 80098e6:	6013      	str	r3, [r2, #0]
}
 80098e8:	bf00      	nop
 80098ea:	3720      	adds	r7, #32
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20000300 	.word	0x20000300
 80098f4:	200002f4 	.word	0x200002f4
 80098f8:	20000220 	.word	0x20000220
 80098fc:	200002e8 	.word	0x200002e8
 8009900:	20000224 	.word	0x20000224

08009904 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	60fb      	str	r3, [r7, #12]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800992a:	4b07      	ldr	r3, [pc, #28]	; (8009948 <vTaskPlaceOnEventList+0x44>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3318      	adds	r3, #24
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff fb32 	bl	8008f9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009938:	2101      	movs	r1, #1
 800993a:	6838      	ldr	r0, [r7, #0]
 800993c:	f000 f9b0 	bl	8009ca0 <prvAddCurrentTaskToDelayedList>
}
 8009940:	bf00      	nop
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20000220 	.word	0x20000220

0800994c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10a      	bne.n	8009978 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	60fb      	str	r3, [r7, #12]
}
 8009974:	bf00      	nop
 8009976:	e7fe      	b.n	8009976 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	3318      	adds	r3, #24
 800997c:	4618      	mov	r0, r3
 800997e:	f7ff fb46 	bl	800900e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009982:	4b1d      	ldr	r3, [pc, #116]	; (80099f8 <xTaskRemoveFromEventList+0xac>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d11c      	bne.n	80099c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	3304      	adds	r3, #4
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff fb3d 	bl	800900e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009998:	2201      	movs	r2, #1
 800999a:	409a      	lsls	r2, r3
 800999c:	4b17      	ldr	r3, [pc, #92]	; (80099fc <xTaskRemoveFromEventList+0xb0>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	4a16      	ldr	r2, [pc, #88]	; (80099fc <xTaskRemoveFromEventList+0xb0>)
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099aa:	4613      	mov	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4a13      	ldr	r2, [pc, #76]	; (8009a00 <xTaskRemoveFromEventList+0xb4>)
 80099b4:	441a      	add	r2, r3
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	3304      	adds	r3, #4
 80099ba:	4619      	mov	r1, r3
 80099bc:	4610      	mov	r0, r2
 80099be:	f7ff fac9 	bl	8008f54 <vListInsertEnd>
 80099c2:	e005      	b.n	80099d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	3318      	adds	r3, #24
 80099c8:	4619      	mov	r1, r3
 80099ca:	480e      	ldr	r0, [pc, #56]	; (8009a04 <xTaskRemoveFromEventList+0xb8>)
 80099cc:	f7ff fac2 	bl	8008f54 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <xTaskRemoveFromEventList+0xbc>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099da:	429a      	cmp	r2, r3
 80099dc:	d905      	bls.n	80099ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099de:	2301      	movs	r3, #1
 80099e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099e2:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <xTaskRemoveFromEventList+0xc0>)
 80099e4:	2201      	movs	r2, #1
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	e001      	b.n	80099ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099ee:	697b      	ldr	r3, [r7, #20]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20000300 	.word	0x20000300
 80099fc:	200002e8 	.word	0x200002e8
 8009a00:	20000224 	.word	0x20000224
 8009a04:	200002b8 	.word	0x200002b8
 8009a08:	20000220 	.word	0x20000220
 8009a0c:	200002f4 	.word	0x200002f4

08009a10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a18:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <vTaskInternalSetTimeOutState+0x24>)
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a20:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <vTaskInternalSetTimeOutState+0x28>)
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	605a      	str	r2, [r3, #4]
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	200002f8 	.word	0x200002f8
 8009a38:	200002e4 	.word	0x200002e4

08009a3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	613b      	str	r3, [r7, #16]
}
 8009a5e:	bf00      	nop
 8009a60:	e7fe      	b.n	8009a60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	60fb      	str	r3, [r7, #12]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a7e:	f000 f98b 	bl	8009d98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a82:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <xTaskCheckForTimeOut+0xbc>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a9a:	d102      	bne.n	8009aa2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61fb      	str	r3, [r7, #28]
 8009aa0:	e023      	b.n	8009aea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	4b15      	ldr	r3, [pc, #84]	; (8009afc <xTaskCheckForTimeOut+0xc0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d007      	beq.n	8009abe <xTaskCheckForTimeOut+0x82>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d302      	bcc.n	8009abe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	61fb      	str	r3, [r7, #28]
 8009abc:	e015      	b.n	8009aea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d20b      	bcs.n	8009ae0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	1ad2      	subs	r2, r2, r3
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff ff9b 	bl	8009a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	61fb      	str	r3, [r7, #28]
 8009ade:	e004      	b.n	8009aea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009aea:	f000 f985 	bl	8009df8 <vPortExitCritical>

	return xReturn;
 8009aee:	69fb      	ldr	r3, [r7, #28]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3720      	adds	r7, #32
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	200002e4 	.word	0x200002e4
 8009afc:	200002f8 	.word	0x200002f8

08009b00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b04:	4b03      	ldr	r3, [pc, #12]	; (8009b14 <vTaskMissedYield+0x14>)
 8009b06:	2201      	movs	r2, #1
 8009b08:	601a      	str	r2, [r3, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	200002f4 	.word	0x200002f4

08009b18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b1e:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <prvResetNextTaskUnblockTime+0x38>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d104      	bne.n	8009b32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b28:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <prvResetNextTaskUnblockTime+0x3c>)
 8009b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b30:	e008      	b.n	8009b44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b32:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <prvResetNextTaskUnblockTime+0x38>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	4a04      	ldr	r2, [pc, #16]	; (8009b54 <prvResetNextTaskUnblockTime+0x3c>)
 8009b42:	6013      	str	r3, [r2, #0]
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	200002b0 	.word	0x200002b0
 8009b54:	200002fc 	.word	0x200002fc

08009b58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <xTaskGetSchedulerState+0x34>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d102      	bne.n	8009b6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b66:	2301      	movs	r3, #1
 8009b68:	607b      	str	r3, [r7, #4]
 8009b6a:	e008      	b.n	8009b7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b6c:	4b08      	ldr	r3, [pc, #32]	; (8009b90 <xTaskGetSchedulerState+0x38>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b74:	2302      	movs	r3, #2
 8009b76:	607b      	str	r3, [r7, #4]
 8009b78:	e001      	b.n	8009b7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b7e:	687b      	ldr	r3, [r7, #4]
	}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	200002ec 	.word	0x200002ec
 8009b90:	20000300 	.word	0x20000300

08009b94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d06e      	beq.n	8009c88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009baa:	4b3a      	ldr	r3, [pc, #232]	; (8009c94 <xTaskPriorityDisinherit+0x100>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d00a      	beq.n	8009bca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	60fb      	str	r3, [r7, #12]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10a      	bne.n	8009be8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	60bb      	str	r3, [r7, #8]
}
 8009be4:	bf00      	nop
 8009be6:	e7fe      	b.n	8009be6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bec:	1e5a      	subs	r2, r3, #1
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d044      	beq.n	8009c88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d140      	bne.n	8009c88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff f9ff 	bl	800900e <uxListRemove>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d115      	bne.n	8009c42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1a:	491f      	ldr	r1, [pc, #124]	; (8009c98 <xTaskPriorityDisinherit+0x104>)
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	440b      	add	r3, r1
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10a      	bne.n	8009c42 <xTaskPriorityDisinherit+0xae>
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	2201      	movs	r2, #1
 8009c32:	fa02 f303 	lsl.w	r3, r2, r3
 8009c36:	43da      	mvns	r2, r3
 8009c38:	4b18      	ldr	r3, [pc, #96]	; (8009c9c <xTaskPriorityDisinherit+0x108>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	4a17      	ldr	r2, [pc, #92]	; (8009c9c <xTaskPriorityDisinherit+0x108>)
 8009c40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	f1c3 0207 	rsb	r2, r3, #7
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	409a      	lsls	r2, r3
 8009c5e:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <xTaskPriorityDisinherit+0x108>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	4a0d      	ldr	r2, [pc, #52]	; (8009c9c <xTaskPriorityDisinherit+0x108>)
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4a08      	ldr	r2, [pc, #32]	; (8009c98 <xTaskPriorityDisinherit+0x104>)
 8009c76:	441a      	add	r2, r3
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4610      	mov	r0, r2
 8009c80:	f7ff f968 	bl	8008f54 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c84:	2301      	movs	r3, #1
 8009c86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c88:	697b      	ldr	r3, [r7, #20]
	}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3718      	adds	r7, #24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20000220 	.word	0x20000220
 8009c98:	20000224 	.word	0x20000224
 8009c9c:	200002e8 	.word	0x200002e8

08009ca0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009caa:	4b29      	ldr	r3, [pc, #164]	; (8009d50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cb0:	4b28      	ldr	r3, [pc, #160]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff f9a9 	bl	800900e <uxListRemove>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10b      	bne.n	8009cda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009cc2:	4b24      	ldr	r3, [pc, #144]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	2201      	movs	r2, #1
 8009cca:	fa02 f303 	lsl.w	r3, r2, r3
 8009cce:	43da      	mvns	r2, r3
 8009cd0:	4b21      	ldr	r3, [pc, #132]	; (8009d58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	4a20      	ldr	r2, [pc, #128]	; (8009d58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cd8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ce0:	d10a      	bne.n	8009cf8 <prvAddCurrentTaskToDelayedList+0x58>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d007      	beq.n	8009cf8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ce8:	4b1a      	ldr	r3, [pc, #104]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4619      	mov	r1, r3
 8009cf0:	481a      	ldr	r0, [pc, #104]	; (8009d5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009cf2:	f7ff f92f 	bl	8008f54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cf6:	e026      	b.n	8009d46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d00:	4b14      	ldr	r3, [pc, #80]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d209      	bcs.n	8009d24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d10:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	f7ff f93d 	bl	8008f9c <vListInsert>
}
 8009d22:	e010      	b.n	8009d46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d24:	4b0f      	ldr	r3, [pc, #60]	; (8009d64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4610      	mov	r0, r2
 8009d32:	f7ff f933 	bl	8008f9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d202      	bcs.n	8009d46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d40:	4a09      	ldr	r2, [pc, #36]	; (8009d68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	6013      	str	r3, [r2, #0]
}
 8009d46:	bf00      	nop
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	200002e4 	.word	0x200002e4
 8009d54:	20000220 	.word	0x20000220
 8009d58:	200002e8 	.word	0x200002e8
 8009d5c:	200002cc 	.word	0x200002cc
 8009d60:	200002b4 	.word	0x200002b4
 8009d64:	200002b0 	.word	0x200002b0
 8009d68:	200002fc 	.word	0x200002fc
 8009d6c:	00000000 	.word	0x00000000

08009d70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <pxCurrentTCBConst2>)
 8009d72:	6819      	ldr	r1, [r3, #0]
 8009d74:	6808      	ldr	r0, [r1, #0]
 8009d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	f380 8809 	msr	PSP, r0
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8811 	msr	BASEPRI, r0
 8009d8a:	4770      	bx	lr
 8009d8c:	f3af 8000 	nop.w

08009d90 <pxCurrentTCBConst2>:
 8009d90:	20000220 	.word	0x20000220
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop

08009d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	607b      	str	r3, [r7, #4]
}
 8009db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009db2:	4b0f      	ldr	r3, [pc, #60]	; (8009df0 <vPortEnterCritical+0x58>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3301      	adds	r3, #1
 8009db8:	4a0d      	ldr	r2, [pc, #52]	; (8009df0 <vPortEnterCritical+0x58>)
 8009dba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <vPortEnterCritical+0x58>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d10f      	bne.n	8009de4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <vPortEnterCritical+0x5c>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <vPortEnterCritical+0x4c>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	603b      	str	r3, [r7, #0]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <vPortEnterCritical+0x4a>
	}
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	20000054 	.word	0x20000054
 8009df4:	e000ed04 	.word	0xe000ed04

08009df8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dfe:	4b12      	ldr	r3, [pc, #72]	; (8009e48 <vPortExitCritical+0x50>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <vPortExitCritical+0x24>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	607b      	str	r3, [r7, #4]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	; (8009e48 <vPortExitCritical+0x50>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	4a09      	ldr	r2, [pc, #36]	; (8009e48 <vPortExitCritical+0x50>)
 8009e24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e26:	4b08      	ldr	r3, [pc, #32]	; (8009e48 <vPortExitCritical+0x50>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <vPortExitCritical+0x42>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	f383 8811 	msr	BASEPRI, r3
}
 8009e38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e3a:	bf00      	nop
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20000054 	.word	0x20000054
 8009e4c:	00000000 	.word	0x00000000

08009e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e50:	f3ef 8009 	mrs	r0, PSP
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	4b15      	ldr	r3, [pc, #84]	; (8009eb0 <pxCurrentTCBConst>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	f01e 0f10 	tst.w	lr, #16
 8009e60:	bf08      	it	eq
 8009e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6a:	6010      	str	r0, [r2, #0]
 8009e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e74:	f380 8811 	msr	BASEPRI, r0
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f7ff fcc0 	bl	8009804 <vTaskSwitchContext>
 8009e84:	f04f 0000 	mov.w	r0, #0
 8009e88:	f380 8811 	msr	BASEPRI, r0
 8009e8c:	bc09      	pop	{r0, r3}
 8009e8e:	6819      	ldr	r1, [r3, #0]
 8009e90:	6808      	ldr	r0, [r1, #0]
 8009e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e96:	f01e 0f10 	tst.w	lr, #16
 8009e9a:	bf08      	it	eq
 8009e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ea0:	f380 8809 	msr	PSP, r0
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	f3af 8000 	nop.w

08009eb0 <pxCurrentTCBConst>:
 8009eb0:	20000220 	.word	0x20000220
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009eb4:	bf00      	nop
 8009eb6:	bf00      	nop

08009eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	607b      	str	r3, [r7, #4]
}
 8009ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ed2:	f7ff fbdf 	bl	8009694 <xTaskIncrementTick>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <SysTick_Handler+0x40>)
 8009ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	f383 8811 	msr	BASEPRI, r3
}
 8009eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	e000ed04 	.word	0xe000ed04

08009efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f02:	f3ef 8305 	mrs	r3, IPSR
 8009f06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b0f      	cmp	r3, #15
 8009f0c:	d914      	bls.n	8009f38 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f0e:	4a17      	ldr	r2, [pc, #92]	; (8009f6c <vPortValidateInterruptPriority+0x70>)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f18:	4b15      	ldr	r3, [pc, #84]	; (8009f70 <vPortValidateInterruptPriority+0x74>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	7afa      	ldrb	r2, [r7, #11]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d20a      	bcs.n	8009f38 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	607b      	str	r3, [r7, #4]
}
 8009f34:	bf00      	nop
 8009f36:	e7fe      	b.n	8009f36 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f38:	4b0e      	ldr	r3, [pc, #56]	; (8009f74 <vPortValidateInterruptPriority+0x78>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f40:	4b0d      	ldr	r3, [pc, #52]	; (8009f78 <vPortValidateInterruptPriority+0x7c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d90a      	bls.n	8009f5e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	603b      	str	r3, [r7, #0]
}
 8009f5a:	bf00      	nop
 8009f5c:	e7fe      	b.n	8009f5c <vPortValidateInterruptPriority+0x60>
	}
 8009f5e:	bf00      	nop
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	e000e3f0 	.word	0xe000e3f0
 8009f70:	20000304 	.word	0x20000304
 8009f74:	e000ed0c 	.word	0xe000ed0c
 8009f78:	20000308 	.word	0x20000308

08009f7c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe feb4 	bl	8008cf8 <USBH_LL_IncTimer>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe fef8 	bl	8008d9c <USBH_LL_Connect>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe ff0d 	bl	8008de2 <USBH_LL_Disconnect>
}
 8009fc8:	bf00      	nop
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe ff2d 	bl	8008e46 <USBH_LL_NotifyURBChange>
#endif
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe fea2 	bl	8008d4c <USBH_LL_PortEnabled>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe feae 	bl	8008d80 <USBH_LL_PortDisabled>
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a042:	4618      	mov	r0, r3
 800a044:	f7fa f818 	bl	8004078 <HAL_HCD_Stop>
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 f808 	bl	800a064 <USBH_Get_USB_Status>
 800a054:	4603      	mov	r3, r0
 800a056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a058:	7bbb      	ldrb	r3, [r7, #14]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	2b03      	cmp	r3, #3
 800a076:	d817      	bhi.n	800a0a8 <USBH_Get_USB_Status+0x44>
 800a078:	a201      	add	r2, pc, #4	; (adr r2, 800a080 <USBH_Get_USB_Status+0x1c>)
 800a07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07e:	bf00      	nop
 800a080:	0800a091 	.word	0x0800a091
 800a084:	0800a097 	.word	0x0800a097
 800a088:	0800a09d 	.word	0x0800a09d
 800a08c:	0800a0a3 	.word	0x0800a0a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
    break;
 800a094:	e00b      	b.n	800a0ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a096:	2302      	movs	r3, #2
 800a098:	73fb      	strb	r3, [r7, #15]
    break;
 800a09a:	e008      	b.n	800a0ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a09c:	2301      	movs	r3, #1
 800a09e:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a0:	e005      	b.n	800a0ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0a6:	e002      	b.n	800a0ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ac:	bf00      	nop
  }
  return usb_status;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <__libc_init_array>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4d0d      	ldr	r5, [pc, #52]	; (800a0f4 <__libc_init_array+0x38>)
 800a0c0:	4c0d      	ldr	r4, [pc, #52]	; (800a0f8 <__libc_init_array+0x3c>)
 800a0c2:	1b64      	subs	r4, r4, r5
 800a0c4:	10a4      	asrs	r4, r4, #2
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	42a6      	cmp	r6, r4
 800a0ca:	d109      	bne.n	800a0e0 <__libc_init_array+0x24>
 800a0cc:	4d0b      	ldr	r5, [pc, #44]	; (800a0fc <__libc_init_array+0x40>)
 800a0ce:	4c0c      	ldr	r4, [pc, #48]	; (800a100 <__libc_init_array+0x44>)
 800a0d0:	f000 f82e 	bl	800a130 <_init>
 800a0d4:	1b64      	subs	r4, r4, r5
 800a0d6:	10a4      	asrs	r4, r4, #2
 800a0d8:	2600      	movs	r6, #0
 800a0da:	42a6      	cmp	r6, r4
 800a0dc:	d105      	bne.n	800a0ea <__libc_init_array+0x2e>
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e4:	4798      	blx	r3
 800a0e6:	3601      	adds	r6, #1
 800a0e8:	e7ee      	b.n	800a0c8 <__libc_init_array+0xc>
 800a0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ee:	4798      	blx	r3
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	e7f2      	b.n	800a0da <__libc_init_array+0x1e>
 800a0f4:	0800bc44 	.word	0x0800bc44
 800a0f8:	0800bc44 	.word	0x0800bc44
 800a0fc:	0800bc44 	.word	0x0800bc44
 800a100:	0800bc48 	.word	0x0800bc48

0800a104 <memcpy>:
 800a104:	440a      	add	r2, r1
 800a106:	4291      	cmp	r1, r2
 800a108:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a10c:	d100      	bne.n	800a110 <memcpy+0xc>
 800a10e:	4770      	bx	lr
 800a110:	b510      	push	{r4, lr}
 800a112:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a11a:	4291      	cmp	r1, r2
 800a11c:	d1f9      	bne.n	800a112 <memcpy+0xe>
 800a11e:	bd10      	pop	{r4, pc}

0800a120 <memset>:
 800a120:	4402      	add	r2, r0
 800a122:	4603      	mov	r3, r0
 800a124:	4293      	cmp	r3, r2
 800a126:	d100      	bne.n	800a12a <memset+0xa>
 800a128:	4770      	bx	lr
 800a12a:	f803 1b01 	strb.w	r1, [r3], #1
 800a12e:	e7f9      	b.n	800a124 <memset+0x4>

0800a130 <_init>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr

0800a13c <_fini>:
 800a13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13e:	bf00      	nop
 800a140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a142:	bc08      	pop	{r3}
 800a144:	469e      	mov	lr, r3
 800a146:	4770      	bx	lr
