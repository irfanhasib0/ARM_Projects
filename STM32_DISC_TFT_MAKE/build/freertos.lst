ARM GAS  /tmp/ccngTBDx.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"freertos.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vApplicationIdleHook,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.weak	vApplicationIdleHook
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	vApplicationIdleHook:
  28              	.LFB135:
  29              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****   * in the root directory of this software component.
  14:Core/Src/freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****   *
  16:Core/Src/freertos.c ****   ******************************************************************************
  17:Core/Src/freertos.c ****   */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** 
  25:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/freertos.c **** 
  28:Core/Src/freertos.c **** /* USER CODE END Includes */
  29:Core/Src/freertos.c **** 
ARM GAS  /tmp/ccngTBDx.s 			page 2


  30:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  32:Core/Src/freertos.c **** 
  33:Core/Src/freertos.c **** /* USER CODE END PTD */
  34:Core/Src/freertos.c **** 
  35:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  37:Core/Src/freertos.c **** 
  38:Core/Src/freertos.c **** /* USER CODE END PD */
  39:Core/Src/freertos.c **** 
  40:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  42:Core/Src/freertos.c **** 
  43:Core/Src/freertos.c **** /* USER CODE END PM */
  44:Core/Src/freertos.c **** 
  45:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  47:Core/Src/freertos.c **** 
  48:Core/Src/freertos.c **** /* USER CODE END Variables */
  49:Core/Src/freertos.c **** 
  50:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  52:Core/Src/freertos.c **** 
  53:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  54:Core/Src/freertos.c **** 
  55:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  56:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  57:Core/Src/freertos.c **** 
  58:Core/Src/freertos.c **** /* Hook prototypes */
  59:Core/Src/freertos.c **** void vApplicationIdleHook(void);
  60:Core/Src/freertos.c **** void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
  61:Core/Src/freertos.c **** void vApplicationMallocFailedHook(void);
  62:Core/Src/freertos.c **** 
  63:Core/Src/freertos.c **** /* USER CODE BEGIN 2 */
  64:Core/Src/freertos.c **** __weak void vApplicationIdleHook( void )
  65:Core/Src/freertos.c **** {
  30              		.loc 1 65 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  66:Core/Src/freertos.c ****    /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
  67:Core/Src/freertos.c ****    to 1 in FreeRTOSConfig.h. It will be called on each iteration of the idle
  68:Core/Src/freertos.c ****    task. It is essential that code added to this hook function never attempts
  69:Core/Src/freertos.c ****    to block in any way (for example, call xQueueReceive() with a block time
  70:Core/Src/freertos.c ****    specified, or call vTaskDelay()). If the application makes use of the
  71:Core/Src/freertos.c ****    vTaskDelete() API function (as this demo application does) then it is also
  72:Core/Src/freertos.c ****    important that vApplicationIdleHook() is permitted to return to its calling
  73:Core/Src/freertos.c ****    function, because it is the responsibility of the idle task to clean up
  74:Core/Src/freertos.c ****    memory allocated by the kernel to any task that has since been deleted. */
  75:Core/Src/freertos.c **** }
  35              		.loc 1 75 1 view .LVU1
  36 0000 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE135:
  40 0002 00BF     		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  41              		.align	1
ARM GAS  /tmp/ccngTBDx.s 			page 3


  42              		.p2align 2,,3
  43              		.weak	vApplicationStackOverflowHook
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  48              	vApplicationStackOverflowHook:
  49              	.LVL0:
  50              	.LFB136:
  76:Core/Src/freertos.c **** /* USER CODE END 2 */
  77:Core/Src/freertos.c **** 
  78:Core/Src/freertos.c **** /* USER CODE BEGIN 4 */
  79:Core/Src/freertos.c **** __weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
  80:Core/Src/freertos.c **** {
  51              		.loc 1 80 1 view -0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  81:Core/Src/freertos.c ****    /* Run time stack overflow checking is performed if
  82:Core/Src/freertos.c ****    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
  83:Core/Src/freertos.c ****    called if a stack overflow is detected. */
  84:Core/Src/freertos.c **** }
  56              		.loc 1 84 1 view .LVU3
  57 0000 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE136:
  61 0002 00BF     		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
  62              		.align	1
  63              		.p2align 2,,3
  64              		.weak	vApplicationMallocFailedHook
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  69              	vApplicationMallocFailedHook:
  70              	.LFB140:
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75 0000 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE140:
  79 0002 00BF     		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  80              		.align	1
  81              		.p2align 2,,3
  82              		.global	vApplicationGetIdleTaskMemory
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  87              	vApplicationGetIdleTaskMemory:
  88              	.LVL1:
  89              	.LFB138:
  85:Core/Src/freertos.c **** /* USER CODE END 4 */
  86:Core/Src/freertos.c **** 
  87:Core/Src/freertos.c **** /* USER CODE BEGIN 5 */
  88:Core/Src/freertos.c **** __weak void vApplicationMallocFailedHook(void)
  89:Core/Src/freertos.c **** {
ARM GAS  /tmp/ccngTBDx.s 			page 4


  90:Core/Src/freertos.c ****    /* vApplicationMallocFailedHook() will only be called if
  91:Core/Src/freertos.c ****    configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h. It is a hook
  92:Core/Src/freertos.c ****    function that will get called if a call to pvPortMalloc() fails.
  93:Core/Src/freertos.c ****    pvPortMalloc() is called internally by the kernel whenever a task, queue,
  94:Core/Src/freertos.c ****    timer or semaphore is created. It is also called by various parts of the
  95:Core/Src/freertos.c ****    demo application. If heap_1.c or heap_2.c are used, then the size of the
  96:Core/Src/freertos.c ****    heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
  97:Core/Src/freertos.c ****    FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
  98:Core/Src/freertos.c ****    to query the size of free heap space that remains (although it does not
  99:Core/Src/freertos.c ****    provide information on how the remaining heap might be fragmented). */
 100:Core/Src/freertos.c **** }
 101:Core/Src/freertos.c **** /* USER CODE END 5 */
 102:Core/Src/freertos.c **** 
 103:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
 104:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
 105:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
 106:Core/Src/freertos.c **** 
 107:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
 108:Core/Src/freertos.c **** {
  90              		.loc 1 108 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
 109:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  95              		.loc 1 109 3 view .LVU5
  96              		.loc 1 109 25 is_stmt 0 view .LVU6
  97 0000 044B     		ldr	r3, .L7
  98 0002 0360     		str	r3, [r0]
 110:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  99              		.loc 1 110 3 is_stmt 1 view .LVU7
 108:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 100              		.loc 1 108 1 is_stmt 0 view .LVU8
 101 0004 10B4     		push	{r4}
 102              	.LCFI0:
 103              		.cfi_def_cfa_offset 4
 104              		.cfi_offset 4, -4
 111:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 105              		.loc 1 111 25 view .LVU9
 106 0006 8023     		movs	r3, #128
 110:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 107              		.loc 1 110 27 view .LVU10
 108 0008 034C     		ldr	r4, .L7+4
 109 000a 0C60     		str	r4, [r1]
 110              		.loc 1 111 3 is_stmt 1 view .LVU11
 112:Core/Src/freertos.c ****   /* place for user code */
 113:Core/Src/freertos.c **** }
 111              		.loc 1 113 1 is_stmt 0 view .LVU12
 112 000c 5DF8044B 		ldr	r4, [sp], #4
 113              	.LCFI1:
 114              		.cfi_restore 4
 115              		.cfi_def_cfa_offset 0
 111:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 116              		.loc 1 111 25 view .LVU13
 117 0010 1360     		str	r3, [r2]
 118              		.loc 1 113 1 view .LVU14
 119 0012 7047     		bx	lr
ARM GAS  /tmp/ccngTBDx.s 			page 5


 120              	.L8:
 121              		.align	2
 122              	.L7:
 123 0014 00000000 		.word	.LANCHOR0
 124 0018 00000000 		.word	.LANCHOR1
 125              		.cfi_endproc
 126              	.LFE138:
 128              		.section	.bss.xIdleStack,"aw",%nobits
 129              		.align	2
 130              		.set	.LANCHOR1,. + 0
 133              	xIdleStack:
 134 0000 00000000 		.space	512
 134      00000000 
 134      00000000 
 134      00000000 
 134      00000000 
 135              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 136              		.align	2
 137              		.set	.LANCHOR0,. + 0
 140              	xIdleTaskTCBBuffer:
 141 0000 00000000 		.space	88
 141      00000000 
 141      00000000 
 141      00000000 
 141      00000000 
 142              		.text
 143              	.Letext0:
 144              		.file 2 "/home/irfan/Desktop/arm/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/gcc-arm-none-eabi-10.
 145              		.file 3 "/home/irfan/Desktop/arm/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux/gcc-arm-none-eabi-10.
 146              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 147              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 148              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccngTBDx.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
     /tmp/ccngTBDx.s:20     .text.vApplicationIdleHook:0000000000000000 $t
     /tmp/ccngTBDx.s:27     .text.vApplicationIdleHook:0000000000000000 vApplicationIdleHook
     /tmp/ccngTBDx.s:41     .text.vApplicationStackOverflowHook:0000000000000000 $t
     /tmp/ccngTBDx.s:48     .text.vApplicationStackOverflowHook:0000000000000000 vApplicationStackOverflowHook
     /tmp/ccngTBDx.s:62     .text.vApplicationMallocFailedHook:0000000000000000 $t
     /tmp/ccngTBDx.s:69     .text.vApplicationMallocFailedHook:0000000000000000 vApplicationMallocFailedHook
     /tmp/ccngTBDx.s:80     .text.vApplicationGetIdleTaskMemory:0000000000000000 $t
     /tmp/ccngTBDx.s:87     .text.vApplicationGetIdleTaskMemory:0000000000000000 vApplicationGetIdleTaskMemory
     /tmp/ccngTBDx.s:123    .text.vApplicationGetIdleTaskMemory:0000000000000014 $d
     /tmp/ccngTBDx.s:129    .bss.xIdleStack:0000000000000000 $d
     /tmp/ccngTBDx.s:133    .bss.xIdleStack:0000000000000000 xIdleStack
     /tmp/ccngTBDx.s:136    .bss.xIdleTaskTCBBuffer:0000000000000000 $d
     /tmp/ccngTBDx.s:140    .bss.xIdleTaskTCBBuffer:0000000000000000 xIdleTaskTCBBuffer

NO UNDEFINED SYMBOLS
